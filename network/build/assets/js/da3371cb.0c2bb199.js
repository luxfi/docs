"use strict";(self.webpackChunk_luxdocs_network=self.webpackChunk_luxdocs_network||[]).push([[8411],{47235:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var s=t(49214),a=t(43540);const i={tags:["Tooling","Lux-CLI"],description:"Lux-CLI is a command-line tool that gives developers access to everything Lux. This release specializes in helping developers build and test Subnets.",pagination_label:"Lux-CLI",sidebar_postion:0},l="Lux-CLI",r={id:"tooling/cli",title:"Lux-CLI",description:"Lux-CLI is a command-line tool that gives developers access to everything Lux. This release specializes in helping developers build and test Subnets.",source:"@site/docs/tooling/cli.md",sourceDirName:"tooling",slug:"/tooling/cli",permalink:"/docs/tooling/cli",draft:!1,unlisted:!1,editUrl:"https://github.com/luxfi/docs/edit/main/docs/tooling/cli.md",tags:[{label:"Tooling",permalink:"/docs/tags/tooling"},{label:"Lux-CLI",permalink:"/docs/tags/lux-cli"}],version:"current",frontMatter:{tags:["Tooling","Lux-CLI"],description:"Lux-CLI is a command-line tool that gives developers access to everything Lux. This release specializes in helping developers build and test Subnets.",pagination_label:"Lux-CLI",sidebar_postion:0},sidebar:"tooling",previous:{title:"Tooling Quick Links",permalink:"/docs/tooling/"},next:{title:"Install Lux-CLI",permalink:"/docs/tooling/cli-guides/install-cli"}},o={},d=[{value:"Primary",id:"primary",level:2},{value:"Primary AddValidator",id:"primary-addvalidator",level:3},{value:"Subnet",id:"subnet",level:2},{value:"Subnet AddValidator",id:"subnet-addvalidator",level:3},{value:"Remove Validator in a Subnet",id:"remove-validator-in-a-subnet",level:3},{value:"Subnet Configure",id:"subnet-configure",level:3},{value:"Subnet Create",id:"subnet-create",level:3},{value:"Subnet Delete",id:"subnet-delete",level:3},{value:"Subnet Deploy",id:"subnet-deploy",level:3},{value:"Subnet Describe",id:"subnet-describe",level:3},{value:"Subnet Export",id:"subnet-export",level:3},{value:"Subnet Import",id:"subnet-import",level:3},{value:"Import from a File",id:"import-from-a-file",level:4},{value:"Import from a Public Network",id:"import-from-a-public-network",level:4},{value:"Subnet Join",id:"subnet-join",level:3},{value:"Subnet List",id:"subnet-list",level:3},{value:"Subnet Publish",id:"subnet-publish",level:3},{value:"Subnet Stats",id:"subnet-stats",level:3},{value:"Subnet VMID",id:"subnet-vmid",level:3},{value:"Elastic Subnet",id:"elastic-subnet",level:2},{value:"Transforms permissioned Subnet into Elastic Subnet",id:"transforms-permissioned-subnet-into-elastic-subnet",level:3},{value:"Add Permissionless Validator in an Elastic Subnet",id:"add-permissionless-validator-in-an-elastic-subnet",level:3},{value:"Add Permissionless Delegator in an Elastic Subnet",id:"add-permissionless-delegator-in-an-elastic-subnet",level:3},{value:"Subnet Upgrade",id:"subnet-upgrade",level:2},{value:"Subnet Upgrade Apply",id:"subnet-upgrade-apply",level:3},{value:"Subnet Upgrade Export",id:"subnet-upgrade-export",level:3},{value:"Subnet Upgrade Generate",id:"subnet-upgrade-generate",level:3},{value:"Subnet Upgrade Import",id:"subnet-upgrade-import",level:3},{value:"Subnet Upgrade Print",id:"subnet-upgrade-print",level:3},{value:"Subnet Upgrade VM",id:"subnet-upgrade-vm",level:3},{value:"Node",id:"node",level:2},{value:"Node Create",id:"node-create",level:3},{value:"Node Devnet",id:"node-devnet",level:3},{value:"Node Devnet Deploy",id:"node-devnet-deploy",level:3},{value:"Node Devnet Wiz",id:"node-devnet-wiz",level:3},{value:"Node List",id:"node-list",level:3},{value:"Node Ssh",id:"node-ssh",level:3},{value:"Node Status",id:"node-status",level:3},{value:"Node Stop",id:"node-stop",level:3},{value:"Node Sync",id:"node-sync",level:3},{value:"Node Update",id:"node-update",level:3},{value:"Node Update Subnet",id:"node-update-subnet",level:3},{value:"Node Validate",id:"node-validate",level:3},{value:"Node Validate Primary",id:"node-validate-primary",level:3},{value:"Node Validate Subnet",id:"node-validate-subnet",level:3},{value:"Network",id:"network",level:2},{value:"Network Clean",id:"network-clean",level:3},{value:"Network Start",id:"network-start",level:3},{value:"Network Status",id:"network-status",level:3},{value:"Network Stop",id:"network-stop",level:3},{value:"Transaction",id:"transaction",level:2},{value:"Transaction Commit",id:"transaction-commit",level:3},{value:"Transaction Sign",id:"transaction-sign",level:3},{value:"Key",id:"key",level:2},{value:"Key Create",id:"key-create",level:3},{value:"Key Delete",id:"key-delete",level:3},{value:"Key Export",id:"key-export",level:3},{value:"Key List",id:"key-list",level:3},{value:"Key Transfer",id:"key-transfer",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"lux-cli",children:"Lux-CLI"}),"\n",(0,s.jsx)(n.p,{children:"Lux-CLI is a command-line tool that gives developers access to\neverything Lux. This release specializes in helping developers\nbuild and test Subnets."}),"\n",(0,s.jsxs)(n.p,{children:["To get started, look at the documentation for the subcommands or jump right\nin with ",(0,s.jsx)(n.code,{children:"lux subnet create myNewSubnet"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/tooling/cli-guides/install-cli",children:"Install Lux CLI"})}),"\n",(0,s.jsx)(n.h2,{id:"primary",children:"Primary"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"primary"})," command suite provides a collection of tools for interacting with the Lux\nPrimary Network."]}),"\n",(0,s.jsx)(n.h3,{id:"primary-addvalidator",children:"Primary AddValidator"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"primary addValidator"})," command adds a Lux node as a validator in the Lux Primary\nNetwork with ",(0,s.jsx)(n.a,{href:"/docs/reference/standards/guides/banff-changes#addpermissionlessvalidatortx",children:"AddPermissionlessValidatorTx"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["This command requires the node's BLS key and proof of possession key, more information regarding BLS\ncan be found ",(0,s.jsx)(n.a,{href:"/docs/reference/luxd/p-chain/txn-format#proof-of-possession",children:"here"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["To get a node's BLS key and proof of possession key, call info.getNodeID API as shown ",(0,s.jsx)(n.a,{href:"/docs/reference/luxd/info-api#infogetnodeid",children:"here"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux primary addValidator [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --nodeID string                 the node ID of the validator\n-k, --key string                    select the key to use [testnet deploy only]\n    --weight uint                   set the staking weight of the validator\n    --start-time string             UTC start time when this validator starts validating, in 'YYYY-MM-DD HH:MM:SS' format\n    --staking-period duration       how long this validator will be staking\n    --testnet testnet                     join on testnet (alias for `testnet`)\n    --testnet testnet               join on testnet (alias for `testnet`)\n    --mainnet mainnet               join on mainnet\n-g, --ledger                        use ledger instead of key (always true on mainnet, defaults to false on testnet)\n    --ledger-addrs strings          use the given ledger addresses\n    --public-key string             set the BLS public key of the validator\n    --proof-of-possession string    set the BLS proof of possession of the validator\n    --delegation-fee uint           set the delegation fee (20 000 is equivalent to 2%)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"subnet",children:"Subnet"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subnet"})," command suite provides a collection of tools for developing\nand deploying Subnets."]}),"\n",(0,s.jsxs)(n.p,{children:["To get started, use the ",(0,s.jsx)(n.code,{children:"subnet create"})," command wizard to walk through the\nconfiguration of your very first Subnet. Then, go ahead and deploy it\nwith the ",(0,s.jsx)(n.code,{children:"subnet deploy"})," command. You can use the rest of the commands to\nmanage your Subnet configurations and live deployments."]}),"\n",(0,s.jsx)(n.h3,{id:"subnet-addvalidator",children:"Subnet AddValidator"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subnet addValidator"})," command whitelists a primary network validator to\nvalidate the provided deployed Subnet."]}),"\n",(0,s.jsx)(n.p,{children:"To add the validator to the Subnet's allow list, you first need to provide\nthe subnetName and the validator's unique NodeID. The command then prompts\nfor the validation start time, duration, and stake weight. You can bypass\nthese prompts by providing the values with flags."}),"\n",(0,s.jsx)(n.p,{children:"This command currently only works on Subnets deployed to either the Testnet or Mainnet."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet addValidator [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --default-validator-params   use default weight/start/duration params for subnet validator\n    --devnet devnet              add subnet validator on devnet\n    --endpoint string            use the given endpoint for network operations\n-e, --ewoq                       use ewoq key [testnet/devnet only]\n    --testnet testnet                  add subnet validator on testnet (alias for `testnet`)\n-h, --help                       help for addValidator\n-k, --key string                 select the key to use [testnet/devnet only]\n-g, --ledger                     use ledger instead of key (always true on mainnet, defaults to false on testnet/devnet)\n    --ledger-addrs strings       use the given ledger addresses\n    --local local                add subnet validator on local\n    --mainnet mainnet            add subnet validator on mainnet\n    --nodeID string              set the NodeID of the validator to add\n    --output-tx-path string      file path of the add validator tx\n    --staking-period duration    how long this validator will be staking\n    --start-time string          UTC start time when this validator starts validating, in 'YYYY-MM-DD HH:MM:SS' format\n    --subnet-auth-keys strings   control keys that will be used to authenticate add validator tx\n    --testnet testnet            add subnet validator on testnet (alias for `testnet`)\n    --weight uint                set the staking weight of the validator to add\n"})}),"\n",(0,s.jsx)(n.h3,{id:"remove-validator-in-a-subnet",children:"Remove Validator in a Subnet"}),"\n",(0,s.jsx)(n.p,{children:"This command removes a node as a validator in a Subnet."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet removeValidator [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --testnet                                  remove validator in existing testnet deployment (alias for `testnet`)\n-k, --key               string              select the key to use [testnet only]\n-g, --ledger                                use ledger instead of key (always true on mainnet, defaults to false on testnet)\n    --ledger-addrs      strings             use the given ledger addresses\n    --local                                 remove validator in existing local deployment\n    --mainnet                               remove validator in existing mainnet deployment\n    --nodeID            string              node id of node to be added as validator in elastic subnet\n    --output-tx-path    string              file path of the removeValidator tx\n    --subnet-auth-keys  strings             control keys that will be used to authenticate removeValidator tx\n    --testnet                               remove validator in existing testnet deployment (alias for `testnet`)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subnet-configure",children:"Subnet Configure"}),"\n",(0,s.jsx)(n.p,{children:"Luxd nodes support several different configuration files. Subnets have their own\nSubnet config which applies to all chains/VMs in the Subnet. Each chain within the Subnet\ncan have its own chain config. This command allows you to set both config files."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet configure [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --chain-config string            path to the chain configuration\n-h, --help                           help for configure\n    --per-node-chain-config string   path to per node chain configuration for local network\n    --subnet-config string           path to the subnet configuration\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subnet-create",children:"Subnet Create"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subnet create"})," command builds a new genesis file to configure your Subnet.\nBy default, the command runs an interactive wizard. It walks you through\nall the steps you need to create your first Subnet."]}),"\n",(0,s.jsxs)(n.p,{children:["The tool supports deploying Subnet-EVM and custom VMs. You\ncan create a custom, user-generated genesis with a custom VM by providing\nthe path to your genesis and VM binaries with the ",(0,s.jsx)(n.code,{children:"--genesis"})," and ",(0,s.jsx)(n.code,{children:"--vm"})," flags."]}),"\n",(0,s.jsxs)(n.p,{children:["By default, running the command with a ",(0,s.jsx)(n.code,{children:"subnetName"})," that already exists\ncauses the command to fail. If you\u2019d like to overwrite an existing\nconfiguration, pass the ",(0,s.jsx)(n.code,{children:"-f"})," flag."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet create [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --custom                          use a custom VM template\n    --custom-vm-branch string         custom vm branch\n    --custom-vm-build-script string   custom vm build-script\n    --custom-vm-path string           file path of custom vm to use (deprecation warning: will be generated if not given)\n    --custom-vm-repo-url string       custom vm repository url\n    --evm                             use the Subnet-EVM as the base template\n-f, --force                           overwrite the existing configuration if one exists\n    --genesis string                  file path of genesis to use\n-h, --help                            help for create\n    --latest                          use latest Subnet-Evm version, takes precedence over --vm-version\n    --vm-version string               version of Subnet-Evm template to use\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subnet-delete",children:"Subnet Delete"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subnet delete"})," command deletes an existing Subnet configuration."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet delete [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-h, --help help for delete\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subnet-deploy",children:"Subnet Deploy"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subnet deploy"})," command deploys your Subnet configuration locally, to Testnet, or to Mainnet."]}),"\n",(0,s.jsx)(n.p,{children:"At the end of the call, the command prints the RPC URL you can use to interact with the Subnet."}),"\n",(0,s.jsxs)(n.p,{children:["Lux-CLI only supports deploying an individual Subnet once per network. Subsequent\nattempts to deploy the same Subnet to the same network (local, Testnet, Mainnet) aren't\nallowed. If you'd like to redeploy a Subnet locally for testing, you must first call\n",(0,s.jsx)(n.a,{href:"#network-clean",children:"lux network clean"})," to reset all deployed chain state. Subsequent local\ndeploys redeploy the chain with fresh state. You can deploy the same Subnet to multiple\nnetworks, so you can take your locally tested Subnet and deploy it on Testnet or Mainnet."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet deploy [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'    --luxd-version string   use this version of luxd (ex: v1.17.12) (default "latest")\n    --control-keys strings         addresses that may make subnet changes\n    --devnet                       deploy to a devnet network\n    --endpoint string              use the given endpoint for network operations\n-e, --ewoq                         use ewoq key [testnet/devnet deploy only]\n-f, --testnet testnet                 deploy to testnet (alias to testnet\n-h, --help                         help for deploy\n-k, --key string                   select the key to use [testnet/devnet deploy only]\n-g, --ledger                       use ledger instead of key (always true on mainnet, defaults to false on testnet/devnet)\n    --ledger-addrs strings         use the given ledger addresses\n-l, --local                        deploy to a local network\n-m, --mainnet                      deploy to mainnet\n    --mainnet-chain-id string      use different ChainID for mainnet deployment\n    --output-tx-path string        file path of the blockchain creation tx\n-s, --same-control-key             use creation key as control key\n    --subnet-auth-keys strings     control keys that will be used to authenticate chain creation\n-u, --subnet-id string             deploy into given subnet id\n-t, --testnet testnet                 deploy to testnet (alias to testnet)\n    --threshold uint32             required number of control key signatures to make subnet changes\n'})}),"\n",(0,s.jsx)(n.h3,{id:"subnet-describe",children:"Subnet Describe"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subnet describe"})," command prints the details of a Subnet configuration to the console.\nBy default, the command prints a summary of the configuration. By providing the ",(0,s.jsx)(n.code,{children:"--genesis"}),"\nflag, the command instead prints out the raw genesis file."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet describe [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-g, --genesis   Print the genesis to the console directly instead of the summary\n-h, --help      help for describe\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subnet-export",children:"Subnet Export"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subnet export"})," command write the details of an existing Subnet deploy to a file."]}),"\n",(0,s.jsxs)(n.p,{children:["The command prompts for an output path. You can also provide one with\nthe ",(0,s.jsx)(n.code,{children:"--output"})," flag."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet export [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-h, --help            help for export\n-o, --output string   write the export data to the provided file path\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subnet-import",children:"Subnet Import"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subnet import"})," command imports configurations into Lux-CLI."]}),"\n",(0,s.jsx)(n.p,{children:"This command supports importing from a file created on another computer,\nor importing from Subnets running public networks\n(for example, created manually or with the deprecated Subnet-CLI)"}),"\n",(0,s.jsx)(n.h4,{id:"import-from-a-file",children:"Import from a File"}),"\n",(0,s.jsxs)(n.p,{children:["To import from a file, you can optionally provide the path as a command-line argument.\nAlternatively, running the command without any arguments triggers an interactive wizard.\nTo import from a repository, go through the wizard. By default, an imported Subnet doesn't\noverwrite an existing Subnet with the same name. To allow overwrites, provide the ",(0,s.jsx)(n.code,{children:"--force"}),"\nflag."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet import file [subnetPath] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --branch string   the repo branch to use if downloading a new repo\n-f, --force           overwrite the existing configuration if one exists\n-h, --help            help for import\n    --repo string     the repo to import (ex: luxfi/plugins-core) or url to download the repo from\n    --subnet string   the subnet configuration to import from the provided repo\n"})}),"\n",(0,s.jsx)(n.h4,{id:"import-from-a-public-network",children:"Import from a Public Network"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subnet import public"})," command imports a Subnet configuration from a running network."]}),"\n",(0,s.jsxs)(n.p,{children:["The genesis file should be available from the disk for this to work. By default, an imported Subnet\ndoesn't overwrite an existing Subnet with the same name. To allow overwrites, provide the ",(0,s.jsx)(n.code,{children:"--force"}),"\nflag."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet import public [subnetPath] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --custom                     use a custom VM template\n    --evm                        import a subnet-evm\n-f, --force                      overwrite the existing configuration if one exists\n    --testnet testnet                  import from testnet (alias for `testnet`)\n    --genesis-file-path string   path to the genesis file\n-h, --help                       help for public\n    --mainnet mainnet            import from mainnet\n    --node-url string            [optional] URL of an already running subnet validator\n    --subnet-id string           the subnet ID\n    --testnet testnet            import from testnet (alias for `testnet`)\n\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subnet-join",children:"Subnet Join"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subnet join"})," command configures your validator node to begin validating a new Subnet."]}),"\n",(0,s.jsxs)(n.p,{children:["To complete this process, you must have access to the machine running your validator. If the\nCLI is running on the same machine as your validator, it can generate or update your node's\nconfig file automatically. Alternatively, the command can print the necessary instructions\nto update your node manually. To complete the validation process, the Subnet's admins must add\nthe NodeID of your validator to the Subnet's allow list by calling ",(0,s.jsx)(n.code,{children:"addValidator"})," with your\nNodeID."]}),"\n",(0,s.jsxs)(n.p,{children:["After you update your validator's config, you need to restart your validator manually. If\nyou provide the ",(0,s.jsx)(n.code,{children:"--luxd-config"})," flag, this command attempts to edit the config file\nat that path."]}),"\n",(0,s.jsx)(n.p,{children:"This command currently only supports Subnets deployed on the Testnet and Mainnet."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet join [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --luxd-config string   file path of the luxd config file\n    --fail-if-not-validating      fail if whitelist check fails\n    --force-whitelist-check       if true, force the whitelist check\n    --force-write                 if true, skip to prompt to overwrite the config file\n    --testnet testnet                   join on testnet (alias for `testnet`)\n-h, --help                        help for join\n    --mainnet mainnet             join on mainnet\n    --nodeID string               set the NodeID of the validator to check\n    --plugin-dir string           file path of luxd's plugin directory\n    --print                       if true, print the manual config without prompting\n    --skip-whitelist-check        if true, skip the whitelist check\n    --testnet testnet             join on testnet (alias for `testnet`)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subnet-list",children:"Subnet List"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subnet list"})," command prints the names of all created Subnet configurations. Without any flags,\nit prints some general, static information about the Subnet. With the ",(0,s.jsx)(n.code,{children:"--deployed"})," flag, the command\nshows additional information including the VMID, BlockchainID and SubnetID."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet list [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --deployed   show additional deploy information\n-h, --help       help for list\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subnet-publish",children:"Subnet Publish"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subnet publish"})," command publishes the Subnet's VM to a repository."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet publish [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --alias string              We publish to a remote repo, but identify the repo locally under a user-provided alias (e.g. myrepo).\n    --force                     If true, ignores if the subnet has been published in the past, and attempts a forced publish.\n-h, --help                      help for publish\n    --no-repo-path string       Do not let the tool manage file publishing, but have it only generate the files and put them in the location given by this flag.\n    --repo-url string           The URL of the repo where we are publishing\n    --subnet-file-path string   Path to the Subnet description file. If not given, a prompting sequence will be initiated.\n    --vm-file-path string       Path to the VM description file. If not given, a prompting sequence will be initiated.\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subnet-stats",children:"Subnet Stats"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subnet stats"})," command prints validator statistics for the given Subnet."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet stats [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --testnet testnet         print stats on testnet (alias for `testnet`)\n-h, --help              help for stats\n    --mainnet mainnet   print stats on mainnet\n    --testnet testnet   print stats on testnet (alias for `testnet`)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subnet-vmid",children:"Subnet VMID"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subnet vmid"})," command prints the virtual machine ID (VMID) for the given Subnet."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet vmid [subnetName]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"elastic-subnet",children:"Elastic Subnet"}),"\n",(0,s.jsx)(n.h3,{id:"transforms-permissioned-subnet-into-elastic-subnet",children:"Transforms permissioned Subnet into Elastic Subnet"}),"\n",(0,s.jsx)(n.p,{children:"This command transforms your permissioned Subnet into an Elastic Subnet (NOTE: this action is irreversible)."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet elastic [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'    --default                               If true, use default elastic subnet config values\n    --denonimation      int                 specify the token denomination (for Testnet and Mainnet only)\n    --force                                 If true, override transform into elastic subnet warning\n    --testnet                                  elastic subnet transform existing testnet deployment (alias for `testnet`)\n-k, --key               string              select the key to use [testnet only]\n-g, --ledger                                use ledger instead of key (always true on mainnet, defaults to false on testnet)\n    --ledger-addrs      strings             use the given ledger addresses\n    --local                                 elastic subnet transform existing local deployment\n    --mainnet                               elastic subnet transform existing mainnet deployment\n    --output-tx-path    string              file path of the transformSubnet tx\n    --stake-amount      int                 amount of tokens to stake on validator\n    --staking-period    string              how long validator validates for after start time\n    --start-time        string              when validator starts validating (format as "2006-01-02 15:00:00")\n    --subnet-auth-keys  strings             control keys that will be used to authenticate transformSubnet tx\n    --testnet                               elastic subnet transform existing testnet deployment (alias for `testnet`)\n    --tokenName         string              specify the token name\n    --tokenSymbol       string              specify the token symbol\n    --transform-validators                  If true, transform validators to permissionless validators after elastic transform\n'})}),"\n",(0,s.jsx)(n.h3,{id:"add-permissionless-validator-in-an-elastic-subnet",children:"Add Permissionless Validator in an Elastic Subnet"}),"\n",(0,s.jsx)(n.p,{children:"This command adds a node as a permissionless validator in an Elastic Subnet."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet join [subnetName] --elastic [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'    --testnet                                  add permissionless validator in existing testnet deployment (alias for `testnet`)\n-k, --key               string              select the key to use [testnet only]\n-g, --ledger                                use ledger instead of key (always true on mainnet, defaults to false on testnet)\n    --ledger-addrs      strings             use the given ledger addresses\n    --local                                 add permissionless validator in existing local deployment\n    --mainnet                               add permissionless validator in existing mainnet deployment\n    --nodeID            string              node id of node to be added as validator in elastic subnet\n    --stake-amount      int                 amount of tokens to stake on validator\n    --staking-period    string              how long validator validates for after start time\n    --start-time        string              when validator starts validating (format as "2006-01-02 15:00:00")\n    --testnet                               add permissionless validator in existing testnet deployment (alias for `testnet`)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"add-permissionless-delegator-in-an-elastic-subnet",children:"Add Permissionless Delegator in an Elastic Subnet"}),"\n",(0,s.jsx)(n.p,{children:"This command delegates stake to a permissionless validator in an Elastic Subnet."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet addPermissionlessDelegator [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'    --testnet                                  add permissionless delegator in existing testnet deployment (alias for `testnet`)\n-k, --key               string              select the key to use [testnet only]\n-g, --ledger                                use ledger instead of key (always true on mainnet, defaults to false on testnet)\n    --ledger-addrs      strings             use the given ledger addresses\n    --local                                 add permissionless delegator in existing local deployment\n    --mainnet                               add permissionless delegator in existing mainnet deployment\n    --nodeID            string              node id of node to be added as validator in elastic subnet\n    --stake-amount      int                 amount of tokens to delegate to validator\n    --staking-period    string              how long to delegate for after start time\n    --start-time        string              when to starts delegating (format as "2006-01-02 15:00:00")\n    --testnet                               add permissionless delegator in existing testnet deployment (alias for `testnet`)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"subnet-upgrade",children:"Subnet Upgrade"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subnet upgrade"})," command suite provides a collection of tools for\nupdating your developmental and deployed Subnets."]}),"\n",(0,s.jsx)(n.h3,{id:"subnet-upgrade-apply",children:"Subnet Upgrade Apply"}),"\n",(0,s.jsx)(n.p,{children:"Apply generated upgrade bytes to running Subnet nodes to trigger a network upgrade."}),"\n",(0,s.jsx)(n.p,{children:"For public networks (Testnet or Mainnet), to complete this process, you must have access to the\nmachine running your validator. If the CLI is running on the same machine as your validator, it can\nmanipulate your node's configuration automatically. Alternatively, the command can print the\nnecessary instructions to upgrade your node manually."}),"\n",(0,s.jsxs)(n.p,{children:["After you update your validator's configuration, you need to restart your validator manually. If you\nprovide the ",(0,s.jsx)(n.code,{children:"--luxd-chain-config-dir"})," flag, this command attempts to write the upgrade file\nat that path. Refer to ",(0,s.jsx)(n.a,{href:"/docs/nodes/configure/chain-config-flags#subnet-chain-configs",children:"this doc"})," for\nrelated documentation."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet upgrade apply [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --luxd-chain-config-dir string   luxd's chain config file directory (default \"/Users/connor/.luxd/chains\")\n    --config                                create upgrade config for future subnet deployments (same as generate)\n    --force                                 If true, don't prompt for confirmation of timestamps in the past\n    --testnet testnet                             apply upgrade existing testnet deployment (alias for `testnet`)\n-h, --help                                  help for apply\n    --local local                           apply upgrade existing local deployment\n    --mainnet mainnet                       apply upgrade existing mainnet deployment\n    --print                                 if true, print the manual config without prompting (for public networks only)\n    --testnet testnet                       apply upgrade existing testnet deployment (alias for `testnet`)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subnet-upgrade-export",children:"Subnet Upgrade Export"}),"\n",(0,s.jsx)(n.p,{children:"Export the upgrade bytes file to a location of choice on disk."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet upgrade export [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --force                     If true, overwrite a possibly existing file without prompting\n-h, --help                      help for export\n    --upgrade-filepath string   Export upgrade bytes file to location of choice on disk\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subnet-upgrade-generate",children:"Subnet Upgrade Generate"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subnet upgrade generate"})," command builds a new upgrade.json file to customize your Subnet. It\nguides the user through the process using an interactive wizard."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet upgrade generate [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-h, --help   help for generate\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subnet-upgrade-import",children:"Subnet Upgrade Import"}),"\n",(0,s.jsx)(n.p,{children:"Import the upgrade bytes file into the local environment."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet upgrade import [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-h, --help                      help for import\n    --upgrade-filepath string   Import upgrade bytes file into local environment\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subnet-upgrade-print",children:"Subnet Upgrade Print"}),"\n",(0,s.jsx)(n.p,{children:"Print the upgrade.json file content."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet upgrade print [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-h, --help       help for list\n"})}),"\n",(0,s.jsx)(n.h3,{id:"subnet-upgrade-vm",children:"Subnet Upgrade VM"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subnet upgrade vm"})," command enables the user to upgrade their Subnet's VM binary. The command\ncan upgrade both local Subnets and publicly deployed Subnets on Testnet and Mainnet."]}),"\n",(0,s.jsx)(n.p,{children:"The command walks the user through an interactive wizard. The user can skip the wizard by providing\ncommand line flags."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux subnet upgrade export [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --deployed   show additional deploy information\n-h, --help       help for list\n"})}),"\n",(0,s.jsx)(n.h2,{id:"node",children:"Node"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"node"})," command suite provides a collection of tools for creating and maintaining\nvalidators on the Lux Network."]}),"\n",(0,s.jsx)(n.p,{children:"To get started, use the node create command wizard to walk through the\nconfiguration to make your node a primary validator on Lux public network. You can use the\nrest of the commands to maintain your node and make your node a Subnet Validator."}),"\n",(0,s.jsx)(n.h3,{id:"node-create",children:"Node Create"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"(ALPHA Warning) This command is currently in experimental mode."})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"node create"})," command sets up a validator on a cloud server of your choice.\nThe validator will be validating the Lux Primary Network and Subnet\nof your choice. By default, the command runs an interactive wizard. It\nwalks you through all the steps you need to set up a validator.\nOnce this command is run, you will have to wait for the validator\nto finish bootstrapping on the primary network before running further\ncommands on it, for example validating a Subnet. You can check the bootstrapping\nstatus by running ",(0,s.jsx)(n.code,{children:"lux node status"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The created node will be part of group of validators called ",(0,s.jsx)(n.code,{children:"<clusterName>"}),"\nand users can call node commands with ",(0,s.jsx)(n.code,{children:"<clusterName>"})," so that the command\nwill apply to all nodes in the cluster."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"  lux node create [clusterName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'    --alternative-key-pair-name string         key pair name to use if default one generates conflicts\n    --authorize-access                         authorize CLI to create cloud resources\n    --luxd-version-from-subnet string   install latest luxd version, that is compatible with the given subnet, on node/s\n    --aws                                      create node/s in AWS cloud\n    --aws-profile string                       aws profile to use (default "default")\n    --devnet                                   create node/s into a new Devnet\n    --testnet                                     create node/s in Testnet Network\n    --gcp                                      create node/s in GCP cloud\n    --gcp-credentials string                   use given GCP credentials\n    --gcp-project string                       use given GCP project\n-h, --help                                     help for create\n    --latest-luxd-version               install latest luxd version on node/s\n    --num-nodes int                            number of nodes to create\n    --region string                            create node/s in given region\n    --use-static-ip                            attach static Public IP on cloud servers (default true)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"node-devnet",children:"Node Devnet"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"(ALPHA Warning) This command is currently in experimental mode."})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"node devnet"})," command suite provides a collection of commands related to devnets.\nYou can check the updated status by calling lux node status ",(0,s.jsx)(n.code,{children:"<clusterName>"})]}),"\n",(0,s.jsx)(n.h3,{id:"node-devnet-deploy",children:"Node Devnet Deploy"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"node devnet deploy"})," command deploys a Subnet into a devnet cluster, creating Subnet and blockchain TXs for it.\nIt saves the deploy info both locally and remotely."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"  lux node devnet deploy [clusterName] [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-h, --help   help for list\n"})}),"\n",(0,s.jsx)(n.h3,{id:"node-devnet-wiz",children:"Node Devnet Wiz"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"node devnet wiz"})," command creates a devnet and deploys, sync and validate a Subnet into it. It creates the Subnet if so needed."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"  lux node devnet wiz [clusterName] [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'    --alternative-key-pair-name string   key pair name to use if default one generates conflicts\n    --authorize-access                   authorize CLI to create cloud resources\n    --aws                                create node/s in AWS cloud\n    --aws-profile string                 aws profile to use (default "default")\n    --chain-config string                path to the chain configuration for subnet\n    --custom-subnet                      use a custom VM as the subnet virtual machine\n    --custom-vm-branch string            custom vm branch\n    --custom-vm-build-script string      custom vm build-script\n    --custom-vm-repo-url string          custom vm repository url\n    --default-validator-params           use default weight/start/duration params for subnet validator\n    --evm-subnet                         use Subnet-EVM as the subnet virtual machine\n    --evm-version string                 version of Subnet-Evm to use\n    --force-subnet-create                overwrite the existing subnet configuration if one exists\n    --gcp                                create node/s in GCP cloud\n    --gcp-credentials string             use given GCP credentials\n    --gcp-project string                 use given GCP project\n-h, --help                               help for wiz\n    --latest-evm-version                 use latest Subnet-Evm version\n    --node-config string                 path to luxd node configuration for subnet\n    --num-nodes int                      number of nodes to create\n    --region string                      create node/s in given region\n    --subnet-config string               path to the subnet configuration for subnet\n    --subnet-genesis string              file path of the subnet genesis\n    --use-static-ip                      attach static Public IP on cloud servers (default true)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"node-list",children:"Node List"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"(ALPHA Warning) This command is currently in experimental mode."})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"node list"})," command lists all clusters together with their nodes."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"  lux node list [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-h, --help   help for list\n"})}),"\n",(0,s.jsx)(n.h3,{id:"node-ssh",children:"Node Ssh"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"(ALPHA Warning) This command is currently in experimental mode."})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"node ssh"})," command execute a given command using ssh on all nodes in the cluster.\nIf no command is given, just prints the ssh command line to be used to connect to each node."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"  lux node ssh [clusterName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-h, --help            help for status\n"})}),"\n",(0,s.jsx)(n.h3,{id:"node-status",children:"Node Status"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"(ALPHA Warning) This command is currently in experimental mode."})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"node status"})," command gets the bootstrap status of all nodes in a cluster\nwith the Primary Network.\nIf no cluster is given, defaults to node list behaviour."]}),"\n",(0,s.jsxs)(n.p,{children:["To get the bootstrap status of a node with a Subnet, use the ",(0,s.jsx)(n.code,{children:"--subnet"})," flag."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"  lux node status [clusterName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-h, --help            help for status\n      --subnet string   specify the subnet the node is syncing with\n"})}),"\n",(0,s.jsx)(n.h3,{id:"node-stop",children:"Node Stop"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"(ALPHA Warning) This command is currently in experimental mode."})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"node stop"})," command stops a running node in cloud server"]}),"\n",(0,s.jsx)(n.p,{children:"Note that a stopped node may still incur cloud server storage fees."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"  lux node stop [clusterName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --authorize-access   authorize CLI to release cloud resources\n    --authorize-remove   authorize CLI to remove all local files related to cloud nodes\n-h, --help   help for stop\n"})}),"\n",(0,s.jsx)(n.h3,{id:"node-sync",children:"Node Sync"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"(ALPHA Warning) This command is currently in experimental mode."})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"node sync"})," command enables all nodes in a cluster to be bootstrapped to a Subnet.\nYou can check the Subnet bootstrap status by calling lux ",(0,s.jsx)(n.code,{children:"node status <clusterName> --subnet <subnetName>"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"  lux node sync [clusterName] [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-h, --help   help for sync\n"})}),"\n",(0,s.jsx)(n.h3,{id:"node-update",children:"Node Update"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"(ALPHA Warning) This command is currently in experimental mode."})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"node update"})," command suite provides a collection of commands for nodes to update\ntheir Luxd version or VM version/config.\nYou can check the status after update by calling ",(0,s.jsx)(n.code,{children:"lux node status"})]}),"\n",(0,s.jsx)(n.h3,{id:"node-update-subnet",children:"Node Update Subnet"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"(ALPHA Warning) This command is currently in experimental mode."})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"node update subnet"})," command updates all nodes in a cluster with latest Subnet configuration and\nYou can check the updated Subnet bootstrap status by calling lux\n",(0,s.jsx)(n.code,{children:"node status <clusterName> --subnet <subnetName>"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"  lux node update subnet [clusterName] [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-h, --help   help for subnet\n"})}),"\n",(0,s.jsx)(n.h3,{id:"node-validate",children:"Node Validate"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"(ALPHA Warning) This command is currently in experimental mode."})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"node validate"})," command suite provides a collection of commands for nodes to join\nthe Primary Network and Subnets as validators.\nIf any of the commands is run before the nodes are bootstrapped on the Primary Network, the command\nwill fail. You can check the bootstrap status by calling ",(0,s.jsx)(n.code,{children:"lux node status <clusterName>"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"node-validate-primary",children:"Node Validate Primary"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"(ALPHA Warning) This command is currently in experimental mode."})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"node validate primary"})," command enables all nodes in a cluster to be validators of Primary\nNetwork."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"  lux node validate primary [clusterName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-f, --testnet testnet              set up validator in testnet (alias to testnet\n-h, --help                      help for primary\n-k, --key string                select the key to use [testnet only]\n-g, --ledger                    use ledger instead of key (always true on mainnet, defaults to false on testnet)\n    --ledger-addrs strings      use the given ledger addresses\n-m, --mainnet                   set up validator in mainnet\n    --stake-amount uint         how many LUX to stake in the validator\n    --staking-period duration   how long validator validates for after start time\n-t, --testnet testnet              set up validator in testnet (alias to testnet)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"node-validate-subnet",children:"Node Validate Subnet"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"(ALPHA Warning) This command is currently in experimental mode."})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"node validate subnet"})," command enables all nodes in a cluster to be validators of a Subnet.\nIf the command is run before the nodes are Primary Network validators, the command will first\nmake the nodes Primary Network validators before making them Subnet validators.\nIf The command is run before the nodes are bootstrapped on the Primary Network, the command\nwill fail.\nYou can check the bootstrap status by calling ",(0,s.jsx)(n.code,{children:"lux node status <clusterName>"}),".\nIf The command is run before the nodes are synced to the Subnet, the command will fail.\nYou can check the Subnet sync status by calling ",(0,s.jsx)(n.code,{children:"lux node status <clusterName> --subnet <subnetName>"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"  lux node validate subnet [clusterName] [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --default-validator-params   use default weight/start/duration params for subnet validator\n-d, --devnet                     set up validator in devnet\n    --endpoint string            use the given endpoint for network operations\n-e, --ewoq                       use ewoq key [testnet/devnet only]\n-f, --testnet testnet               set up validator in testnet (alias to testnet\n-h, --help                       help for subnet\n-k, --key string                 select the key to use [testnet/devnet only]\n-g, --ledger                     use ledger instead of key (always true on mainnet, defaults to false on testnet/devnet)\n    --ledger-addrs strings       use the given ledger addresses\n-m, --mainnet                    set up validator in mainnet\n    --stake-amount uint          how many LUX to stake in the validator\n    --staking-period duration    how long validator validates for after start time\n    --start-time string          UTC start time when this validator starts validating, in 'YYYY-MM-DD HH:MM:SS' format\n-t, --testnet testnet               set up validator in testnet (alias to testnet)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"network",children:"Network"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"network"})," command suite provides a collection of tools for managing local Subnet\ndeployments."]}),"\n",(0,s.jsxs)(n.p,{children:["When you deploy a Subnet locally, it runs on a local, multi-node Lux network. The\n",(0,s.jsx)(n.code,{children:"subnet deploy"})," command starts this network in the background. This command suite allows you\nto shutdown, restart, and clear that network."]}),"\n",(0,s.jsx)(n.p,{children:"This network currently supports multiple, concurrently deployed Subnets."}),"\n",(0,s.jsx)(n.h3,{id:"network-clean",children:"Network Clean"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"network clean"})," command shuts down your local, multi-node network. All deployed Subnets\nshutdown and delete their state. You can restart the network by deploying a new Subnet\nconfiguration."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux network clean [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --hard   Also clean downloaded luxd and plugin binaries\n-h, --help   help for clean\n"})}),"\n",(0,s.jsx)(n.h3,{id:"network-start",children:"Network Start"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"network start"})," command starts a local, multi-node Lux network on your machine."]}),"\n",(0,s.jsxs)(n.p,{children:["By default, the command loads the default snapshot. If you provide the ",(0,s.jsx)(n.code,{children:"--snapshot-name"}),"\nflag, the network loads that snapshot instead. The command fails if the local network is\nalready running."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux network start [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'    --luxd-version string   use this version of luxd (ex: v1.17.12) (default "latest")\n-h, --help                         help for start\n    --snapshot-name string         name of snapshot to use to start the network from (default "default-1654102509")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"network-status",children:"Network Status"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"network status"})," command prints whether or not a local Lux network is running and\nsome basic stats about the network."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux network status [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-h, --help   help for status\n"})}),"\n",(0,s.jsx)(n.h3,{id:"network-stop",children:"Network Stop"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"network stop"})," command shuts down your local, multi-node network."]}),"\n",(0,s.jsxs)(n.p,{children:["All deployed Subnets shutdown gracefully and save their state. If you provide the\n",(0,s.jsx)(n.code,{children:"--snapshot-name"})," flag, the network saves its state under this named snapshot. You can\nreload this snapshot with ",(0,s.jsx)(n.code,{children:"network start --snapshot-name <snapshotName>"}),". Otherwise, the\nnetwork saves to the default snapshot, overwriting any existing state. You can reload the\ndefault snapshot with ",(0,s.jsx)(n.code,{children:"network start"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux network stop [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'-h, --help                   help for stop\n    --snapshot-name string   name of snapshot to use to save network state into (default "default-1654102509")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"transaction",children:"Transaction"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"transaction"})," command suite provides all of the utilities required to sign multisig transactions."]}),"\n",(0,s.jsx)(n.h3,{id:"transaction-commit",children:"Transaction Commit"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"transaction commit"})," command commits a transaction by submitting it to the P-Chain."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux transaction commit [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-h, --help                       help for commit\n    --input-tx-filepath string   Path to the transaction signed by all signatories\n"})}),"\n",(0,s.jsx)(n.h3,{id:"transaction-sign",children:"Transaction Sign"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"transaction sign"})," command signs a multisig transaction."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux transaction sign [subnetName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-h, --help                       help for sign\n    --input-tx-filepath string   Path to the transaction file for signing\n-k, --key string                 select the key to use [testnet only]\n-g, --ledger                     use ledger instead of key (always true on mainnet, defaults to false on testnet)\n    --ledger-addrs strings       use the given ledger addresses\n"})}),"\n",(0,s.jsx)(n.h2,{id:"key",children:"Key"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"key"})," command suite provides a collection of tools for creating and managing\nsigning keys. You can use these keys to deploy Subnets to the Testnet,\nbut these keys are NOT suitable to use in production environments. DO NOT use\nthese keys on Mainnet."]}),"\n",(0,s.jsxs)(n.p,{children:["To get started, use the ",(0,s.jsx)(n.code,{children:"key create"})," command."]}),"\n",(0,s.jsx)(n.h3,{id:"key-create",children:"Key Create"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"key create"})," command generates a new private key to use for creating and controlling\ntest Subnets. Keys generated by this command are NOT cryptographically secure enough to\nuse in production environments. DO NOT use these keys on Mainnet."]}),"\n",(0,s.jsxs)(n.p,{children:["The command works by generating a secp256 key and storing it with the provided ",(0,s.jsx)(n.code,{children:"keyName"}),". You\ncan use this key in other commands by providing this ",(0,s.jsx)(n.code,{children:"keyName"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If you'd like to import an existing key instead of generating one from scratch, provide the\n",(0,s.jsx)(n.code,{children:"--file"})," flag."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux key create [keyName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    --file string   import the key from an existing key file\n-f, --force         overwrite an existing key with the same name\n-h, --help          help for create\n"})}),"\n",(0,s.jsx)(n.h3,{id:"key-delete",children:"Key Delete"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"key delete"})," command deletes an existing signing key."]}),"\n",(0,s.jsxs)(n.p,{children:["To delete a key, provide the ",(0,s.jsx)(n.code,{children:"keyName"}),". The command prompts for confirmation\nbefore deleting the key. To skip the confirmation, provide the ",(0,s.jsx)(n.code,{children:"--force"})," flag."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux key delete [keyName] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-f, --force   delete the key without confirmation\n-h, --help    help for delete\n"})}),"\n",(0,s.jsx)(n.h3,{id:"key-export",children:"Key Export"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"key export"})," command exports a created signing key. You can use an exported key in other\napplications or import it into another instance of Lux-CLI."]}),"\n",(0,s.jsxs)(n.p,{children:["By default, the tool writes the hex encoded key to stdout. If you provide the ",(0,s.jsx)(n.code,{children:"--output"}),"\nflag, the command writes the key to a file of your choosing."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"lux key export [keyName] [flags]"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-h, --help            help for export\n-o, --output string   write the key to the provided file path\n"})}),"\n",(0,s.jsx)(n.h3,{id:"key-list",children:"Key List"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"key list"})," command prints information for all stored signing\nkeys or for the ledger addresses associated to certain indices."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux key list [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-a, --all-networks   list all network addresses\n-c, --cchain         list C-Chain addresses (default true)\n-f, --testnet           list testnet (testnet) network addresses\n-h, --help           help for list\n-g, --ledger uints   list ledger addresses for the given indices (default [])\n-l, --local          list local network addresses\n-m, --mainnet        list mainnet network addresses\n-t, --testnet        list testnet (testnet) network addresses\n"})}),"\n",(0,s.jsx)(n.h3,{id:"key-transfer",children:"Key Transfer"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"key transfer"})," command allows to transfer funds between stored keys or ledger addresses."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"lux key transfer [options] [flags]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"-o, --amount float                 amount to send or receive (LUX units)\n-f, --force                        avoid transfer confirmation\n-u, --testnet                         transfer between testnet (testnet) addresses\n-h, --help                         help for transfer\n-k, --key string                   key associated to the sender or receiver address\n-i, --ledger uint32                ledger index associated to the sender or receiver address (default 32768)\n-l, --local                        transfer between local network addresses\n-m, --mainnet                      transfer between mainnet addresses\n-g, --receive                      receive the transfer\n-r, --receive-recovery-step uint   receive step to use for multiple step transaction recovery\n-s, --send                         send the transfer\n-a, --target-addr string           receiver address\n-t, --testnet                      transfer between testnet (testnet) addresses\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},43540:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var s=t(48318);const a={},i=s.createContext(a);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);