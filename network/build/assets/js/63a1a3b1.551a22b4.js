"use strict";(self.webpackChunk_luxdocs_network=self.webpackChunk_luxdocs_network||[]).push([[9099],{63817:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>h,toc:()=>c});var s=t(49214),i=t(43540);const l={tags:["Luxd APIs"],description:"This page is an overview of the Health API associated with Luxd. This API can be used for measuring node health.",sidebar_label:"Health API",pagination_label:"Health API"},a="Health API",h={id:"reference/luxd/health-api",title:"Health API",description:"This page is an overview of the Health API associated with Luxd. This API can be used for measuring node health.",source:"@site/docs/reference/luxd/health-api.md",sourceDirName:"reference/luxd",slug:"/reference/luxd/health-api",permalink:"/docs/reference/luxd/health-api",draft:!1,unlisted:!1,editUrl:"https://github.com/luxfi/docs/edit/main/docs/reference/luxd/health-api.md",tags:[{label:"Luxd APIs",permalink:"/docs/tags/luxd-ap-is"}],version:"current",frontMatter:{tags:["Luxd APIs"],description:"This page is an overview of the Health API associated with Luxd. This API can be used for measuring node health.",sidebar_label:"Health API",pagination_label:"Health API"},sidebar:"reference",previous:{title:"Auth API",permalink:"/docs/reference/luxd/auth-api"},next:{title:"Index API",permalink:"/docs/reference/luxd/index-api"}},r={},c=[{value:"Filterable Health Checks",id:"filterable-health-checks",level:2},{value:"GET Request",id:"get-request",level:2},{value:"Filtering",id:"filtering",level:3},{value:"JSON RPC Request",id:"json-rpc-request",level:2},{value:"Format",id:"format",level:3},{value:"Endpoint",id:"endpoint",level:3},{value:"Methods",id:"methods",level:3},{value:"<code>health.health</code>",id:"healthhealth",level:4},{value:"Filtering",id:"filtering-1",level:3}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"health-api",children:"Health API"}),"\n",(0,s.jsx)(n.p,{children:"This API can be used for measuring node health."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["This API set is for a specific node, it is unavailable on the ",(0,s.jsx)(n.a,{href:"/docs/tooling/rpc-providers",children:"public server"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"filterable-health-checks",children:"Filterable Health Checks"}),"\n",(0,s.jsxs)(n.p,{children:["The health checks that are run by the node are filterable. You can specify which health checks\nyou want to see by using ",(0,s.jsx)(n.code,{children:"tags"})," filters. Returned results will only include health checks that\nmatch the specified tags and global\nhealth checks like ",(0,s.jsx)(n.code,{children:"network"}),", ",(0,s.jsx)(n.code,{children:"database"})," etc.\nWhen filtered, the returned results will not show the full node health,\nbut only a subset of filtered health checks.\nThis means the node can be still unhealthy in unfiltered checks, even if the returned results show that\nthe node is healthy.\nLuxd supports filtering tags by subnetIDs. For more information check Filtering sections below."]}),"\n",(0,s.jsx)(n.h2,{id:"get-request",children:"GET Request"}),"\n",(0,s.jsxs)(n.p,{children:["To get an HTTP status code response that indicates the node\u2019s health, make a ",(0,s.jsx)(n.code,{children:"GET"})," request to\n",(0,s.jsx)(n.code,{children:"/ext/health"}),". If the node is healthy, it will return a ",(0,s.jsx)(n.code,{children:"200"})," status code. If you want more in-depth\ninformation about a node\u2019s health, use the JSON RPC methods."]}),"\n",(0,s.jsx)(n.h3,{id:"filtering",children:"Filtering"}),"\n",(0,s.jsxs)(n.p,{children:["To filter GET health checks, add a ",(0,s.jsx)(n.code,{children:"tag"})," query parameter to the request. The ",(0,s.jsx)(n.code,{children:"tag"})," parameter is a\nstring.\nTo filter health results by subnetID, use the\n",(0,s.jsx)(n.code,{children:"subnetID"})," tag. For example,\nto filter health results by subnetID ",(0,s.jsx)(n.code,{children:"29uVeLPJB1eQJkzRemU8g8wZDw5uJRqpab5U2mX9euieVwiEbL"}),",\nuse the following query:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'curl --location --request GET \'http://localhost:9650/ext/health?tag=29uVeLPJB1eQJkzRemU8g8wZDw5uJRqpab5U2mX9euieVwiEbL\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    "jsonrpc":"2.0",\n    "id"     :1,\n    "method" :"health.health",\n}\'\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In this example returned results will contain global health checks and health checks that are\nrelated to subnetID ",(0,s.jsx)(n.code,{children:"29uVeLPJB1eQJkzRemU8g8wZDw5uJRqpab5U2mX9euieVwiEbL"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," This filtering can show healthy results even if the node is unhealthy in other Chains/Subnets."]}),"\n",(0,s.jsxs)(n.p,{children:["In order to filter results by multiple tags, use multiple ",(0,s.jsx)(n.code,{children:"tag"})," query parameters. For example, to\nfilter health results by subnetID ",(0,s.jsx)(n.code,{children:"29uVeLPJB1eQJkzRemU8g8wZDw5uJRqpab5U2mX9euieVwiEbL"})," and\n",(0,s.jsx)(n.code,{children:"28nrH5T2BMvNrWecFcV3mfccjs6axM1TVyqe79MCv2Mhs8kxiY"})," use the following query:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'curl --location --request GET \'http://localhost:9650/ext/health?tag=29uVeLPJB1eQJkzRemU8g8wZDw5uJRqpab5U2mX9euieVwiEbL&tag=28nrH5T2BMvNrWecFcV3mfccjs6axM1TVyqe79MCv2Mhs8kxiY\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    "jsonrpc":"2.0",\n    "id"     :1,\n    "method" :"health.health",\n}\'\n'})}),"\n",(0,s.jsx)(n.p,{children:"Returned results will contain checks for both subnetIDs and global health checks."}),"\n",(0,s.jsx)(n.h2,{id:"json-rpc-request",children:"JSON RPC Request"}),"\n",(0,s.jsx)(n.h3,{id:"format",children:"Format"}),"\n",(0,s.jsxs)(n.p,{children:["This API uses the ",(0,s.jsx)(n.code,{children:"json 2.0"})," RPC format. For more information on making JSON RPC calls, see\n",(0,s.jsx)(n.a,{href:"/docs/reference/standards/guides/issuing-api-calls",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"endpoint",children:"Endpoint"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"/ext/health\n"})}),"\n",(0,s.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h4,{id:"healthhealth",children:(0,s.jsx)(n.code,{children:"health.health"})}),"\n",(0,s.jsx)(n.p,{children:"The node runs a set of health checks every 30 seconds, including a health check for each chain. This\nmethod returns the last set of health check results."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"health.health() -> {\n    checks: []{\n        checkName: {\n            message: JSON,\n            error: JSON,\n            timestamp: string,\n            duration: int,\n            contiguousFailures: int,\n            timeOfFirstFailure: int\n        }\n    },\n    healthy: bool\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"healthy"})," is true if the node if all health checks are passing."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"checks"})," is a list of health check responses."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A check response may include a ",(0,s.jsx)(n.code,{children:"message"})," with additional context."]}),"\n",(0,s.jsxs)(n.li,{children:["A check response may include an ",(0,s.jsx)(n.code,{children:"error"})," describing why the check failed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"timestamp"})," is the timestamp of the last health check."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"duration"})," is the execution duration of the last health check, in nanoseconds."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"contiguousFailures"})," is the number of times in a row this check failed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"timeOfFirstFailure"})," is the time this check first failed."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["More information on these measurements can be found in the documentation for the\n",(0,s.jsx)(n.a,{href:"https://github.com/AppsFlyer/go-sundheit",children:"go-sundheit"})," library."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example Call:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'curl -X POST --data \'{\n    "jsonrpc":"2.0",\n    "id"     :1,\n    "method" :"health.health"\n}\' -H \'content-type:application/json;\' 127.0.0.1:9650/ext/health\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example Response:"})}),"\n",(0,s.jsx)(n.p,{children:"In this example response, the C-Chain\u2019s health check is failing."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "jsonrpc": "2.0",\n  "result": {\n    "checks": {\n      "C": {\n        "message": null,\n        "error": {\n          "message": "example error message"\n        },\n        "timestamp": "2020-10-14T14:04:20.57759662Z",\n        "duration": 465253,\n        "contiguousFailures": 50,\n        "timeOfFirstFailure": "2020-10-14T13:16:10.576435413Z"\n      },\n      "P": {\n        "message": {\n          "percentConnected": 0.9967694992864075\n        },\n        "timestamp": "2020-10-14T14:04:08.668743851Z",\n        "duration": 433363830,\n        "contiguousFailures": 0,\n        "timeOfFirstFailure": null\n      },\n      "X": {\n        "timestamp": "2020-10-14T14:04:20.3962705Z",\n        "duration": 1853,\n        "contiguousFailures": 0,\n        "timeOfFirstFailure": null\n      },\n      "chains.default.bootstrapped": {\n        "timestamp": "2020-10-14T14:04:04.238623814Z",\n        "duration": 8075,\n        "contiguousFailures": 0,\n        "timeOfFirstFailure": null\n      },\n      "network.validators.heartbeat": {\n        "message": {\n          "heartbeat": 1602684245\n        },\n        "timestamp": "2020-10-14T14:04:05.610007874Z",\n        "duration": 6124,\n        "contiguousFailures": 0,\n        "timeOfFirstFailure": null\n      }\n    },\n    "healthy": false\n  },\n  "id": 1\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"filtering-1",children:"Filtering"}),"\n",(0,s.jsxs)(n.p,{children:["JSON RPC methods in Health API supports filtering by tags. In order to filter results use ",(0,s.jsx)(n.code,{children:"tags"}),"\nparams in the\nrequest body. ",(0,s.jsx)(n.code,{children:"tags"})," accepts a list of tags. Currently only ",(0,s.jsx)(n.code,{children:"subnetID"}),"s are supported as tags.\nFor example, to filter health results by subnetID ",(0,s.jsx)(n.code,{children:"29uVeLPJB1eQJkzRemU8g8wZDw5uJRqpab5U2mX9euieVwiEbL"}),"\nuse the following request:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'curl -X POST --data \'{\n    "jsonrpc":"2.0",\n    "id"     :1,\n    "method" :"health.health",\n    "params":{\n        "tags": ["29uVeLPJB1eQJkzRemU8g8wZDw5uJRqpab5U2mX9euieVwiEbL"]\n    }\n}\' -H \'content-type:application/json;\' 127.0.0.1:9650/ext/health\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Returned results will contain checks for subnetID ",(0,s.jsx)(n.code,{children:"29uVeLPJB1eQJkzRemU8g8wZDw5uJRqpab5U2mX9euieVwiEbL"}),"\nand global health checks."]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},43540:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>h});var s=t(48318);const i={},l=s.createContext(i);function a(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function h(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);