"use strict";(self.webpackChunk_luxdocs_network=self.webpackChunk_luxdocs_network||[]).push([[3732],{64890:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var s=i(49214),t=i(43540);const a={tags:["Tooling","LuxJS"],description:"LuxJS is a JavaScript Library for interfacing with the Lux platform. It is built using TypeScript and intended to support both browser and Node.js. The LuxJS library allows one to issue commands to the Lux node APIs.",pagination_label:"Manual Creation of Public-Private Key Pairs using LuxJS",sidebar_label:"Generate Key Pair",sidebar_position:0},r="Manual Creation of Public-Private Key Pairs using LuxJS",o={id:"tooling/luxjs-guides/generate-key-pair",title:"Manual Creation of Public-Private Key Pairs using LuxJS",description:"LuxJS is a JavaScript Library for interfacing with the Lux platform. It is built using TypeScript and intended to support both browser and Node.js. The LuxJS library allows one to issue commands to the Lux node APIs.",source:"@site/docs/tooling/luxjs-guides/generate-key-pair.md",sourceDirName:"tooling/luxjs-guides",slug:"/tooling/luxjs-guides/generate-key-pair",permalink:"/docs/tooling/luxjs-guides/generate-key-pair",draft:!1,unlisted:!1,editUrl:"https://github.com/luxfi/docs/edit/main/docs/tooling/luxjs-guides/generate-key-pair.md",tags:[{label:"Tooling",permalink:"/docs/tags/tooling"},{label:"LuxJS",permalink:"/docs/tags/lux-js"}],version:"current",sidebarPosition:0,frontMatter:{tags:["Tooling","LuxJS"],description:"LuxJS is a JavaScript Library for interfacing with the Lux platform. It is built using TypeScript and intended to support both browser and Node.js. The LuxJS library allows one to issue commands to the Lux node APIs.",pagination_label:"Manual Creation of Public-Private Key Pairs using LuxJS",sidebar_label:"Generate Key Pair",sidebar_position:0},sidebar:"tooling",previous:{title:"LuxJS API Reference",permalink:"/docs/tooling/luxjs-api"},next:{title:"Generate a Transaction ID Using LuxJS",permalink:"/docs/tooling/luxjs-guides/generate-a-txid-using-luxjs"}},d={},c=[{value:"Generate a Mnemonic",id:"generate-a-mnemonic",level:2},{value:"Derive Addresses",id:"derive-addresses",level:2},{value:"Generate Private Keys from a Mnemonic",id:"generate-private-keys-from-a-mnemonic",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"manual-creation-of-public-private-key-pairs-using-luxjs",children:"Manual Creation of Public-Private Key Pairs using LuxJS"}),"\n",(0,s.jsx)(n.h2,{id:"generate-a-mnemonic",children:"Generate a Mnemonic"}),"\n",(0,s.jsxs)(n.p,{children:["To begin, we'll create a mnemonic phrase with\n",(0,s.jsx)(n.a,{href:"/docs/tooling/luxjs-overview",children:"LuxJS"}),". Mnemonics enable us to encode\nstrong security into a human-readable phrase. LuxJS supports 10 languages\nincluding English, Japanese, Spanish, Italian, French, Korean, Czech,\nPortuguese, Chinese Simplified and Chinese Traditional."]}),"\n",(0,s.jsxs)(n.p,{children:["First, generate a 24 word english\n",(0,s.jsx)(n.a,{href:"https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki",children:"BIP39"}),"-compliant\nmnemonic via LuxJS."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Mnemonic } from "lux"\nconst mnemonic: Mnemonic = Mnemonic.getInstance()\nconst strength: number = 256\nconst wordlist = mnemonic.getWordlists("english") as string[]\nconst m: string = mnemonic.generateMnemonic(strength, randomBytes, wordlist)\nconsole.log(m)\n// "chimney asset heavy ecology accuse window gold weekend annual oil emerge alley retreat rabbit seed advance define off amused board quick wealth peasant disorder"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"derive-addresses",children:"Derive Addresses"}),"\n",(0,s.jsxs)(n.p,{children:["After generating a mnemonic we can use LuxJS to derive\n",(0,s.jsx)(n.a,{href:"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki",children:"BIP32"}),"-compliant\nhierarchical deterministic (HD) Keypairs."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import HDNode from "lux/dist/utils/hdnode"\nimport { Lux, Mnemonic, Buffer } from "lux"\nimport { EVMAPI, KeyChain } from "lux/dist/apis/evm"\nimport { ethers } from "ethers"\n\nconst ip: string = "api.lux-test.network"\nconst port: number = 443\nconst protocol: string = "https"\nconst networkID: number = 5\nconst lux: Lux = new Lux(ip, port, protocol, networkID)\nconst cchain: EVMAPI = lux.CChain()\n\nconst mnemonic: Mnemonic = Mnemonic.getInstance()\nconst m: string =\n  "chimney asset heavy ecology accuse window gold weekend annual oil emerge alley retreat rabbit seed advance define off amused board quick wealth peasant disorder"\nconst seed: Buffer = mnemonic.mnemonicToSeedSync(m)\nconst hdnode: HDNode = new HDNode(seed)\n\nconst keyChain: KeyChain = cchain.newKeyChain()\n\nconst cAddresses: string[] = []\n\nfor (let i: number = 0; i <= 2; i++) {\n  const child: HDNode = hdnode.derive(`m/44\'/60\'/0\'/0/${i}`)\n  keyChain.importKey(child.privateKey)\n  const cchainAddress = ethers.utils.computeAddress(child.privateKey)\n  cAddresses.push(cchainAddress)\n}\nconsole.log(cAddresses)\n// [\n//   \'0x2d1d87fF3Ea2ba6E0576bCA4310fC057972F2559\',\n//   \'0x25d83F090D842c1b4645c1EFA46B15093d4CaC7C\',\n//   \'0xa14dFb7d8593c44a47A07298eCEA774557036ff3\'\n// ]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"generate-private-keys-from-a-mnemonic",children:"Generate Private Keys from a Mnemonic"}),"\n",(0,s.jsx)(n.p,{children:"As long as you have the mnemonic phrase, you can re-generate your private keys\nand the addresses they control."}),"\n",(0,s.jsx)(n.p,{children:"For example, if you want to generate the private keys for the first 3 address in the C Chain keychain:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://testnet.snowtrace.io/address/0x2d1d87fF3Ea2ba6E0576bCA4310fC057972F2559",children:"0x2d1d87fF3Ea2ba6E0576bCA4310fC057972F2559"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://testnet.snowtrace.io/address/0x25d83F090D842c1b4645c1EFA46B15093d4CaC7C",children:"0x25d83F090D842c1b4645c1EFA46B15093d4CaC7C"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://testnet.snowtrace.io/address/0xa14dFb7d8593c44a47A07298eCEA774557036ff3",children:"0xa14dFb7d8593c44a47A07298eCEA774557036ff3"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"you might update the example script above to the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const cAddresses: string[] = []\nconst privateKeys: string[] = []\nfor (let i: number = 0; i <= 2; i++) {\n  // Deriving the _i_th external BIP44 C-Chain address\n  const child: HDNode = hdnode.derive(`m/44'/60'/0'/0/${i}`)\n  keyChain.importKey(child.privateKey)\n  // Converting the BIP44 addresses to hexadecimal addresses\n  const cchainAddress = ethers.utils.computeAddress(child.privateKey)\n  privateKeys.push(child.privateKey.toString(\"hex\"))\n  cAddresses.push(cchainAddress)\n}\nconsole.log({ cAddresses, privateKeys })\n// {\n//   cAddresses: [\n//     '0x2d1d87fF3Ea2ba6E0576bCA4310fC057972F2559',\n//     '0x25d83F090D842c1b4645c1EFA46B15093d4CaC7C',\n//     '0xa14dFb7d8593c44a47A07298eCEA774557036ff3'\n//   ],\n//   privateKeys: [\n//     'cd30aef1af167238c627593537e162ecf5aad1d4ab4ea98ed2f96ad4e47006dc',\n//     'b85479b26bc8fbada4737e90ab2133204f2fa2a9ea33c1e0de4452cbf8fa3be4',\n//     'c72e18ea0f9aa5457396e3bf810e9de8df0177c8e4e5bf83a85f871512d645a9'\n//   ]\n// }\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},43540:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var s=i(48318);const t={},a=s.createContext(t);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);