"use strict";(self.webpackChunk_luxdocs_network=self.webpackChunk_luxdocs_network||[]).push([[5331],{25550:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>u});var a=t(49214),o=t(43540);const i={tags:["Build","Subnets"],description:"This tutorial will guide you through the process of doing various Subnet upgrades and changes including what to watch out for and suggested precautions.",sidebar_label:"Considerations",pagination_label:"Key Considerations When Upgrading a Subnet",sidebar_position:0},s="Key Considerations When Upgrading a Subnet",r={id:"build/subnet/upgrade/considerations-subnet-upgrade",title:"Key Considerations When Upgrading a Subnet",description:"This tutorial will guide you through the process of doing various Subnet upgrades and changes including what to watch out for and suggested precautions.",source:"@site/docs/build/subnet/upgrade/considerations-subnet-upgrade.md",sourceDirName:"build/subnet/upgrade",slug:"/build/subnet/upgrade/considerations-subnet-upgrade",permalink:"/docs/build/subnet/upgrade/considerations-subnet-upgrade",draft:!1,unlisted:!1,editUrl:"https://github.com/luxfi/docs/edit/main/docs/build/subnet/upgrade/considerations-subnet-upgrade.md",tags:[{label:"Build",permalink:"/docs/tags/build"},{label:"Subnets",permalink:"/docs/tags/subnets"}],version:"current",sidebarPosition:0,frontMatter:{tags:["Build","Subnets"],description:"This tutorial will guide you through the process of doing various Subnet upgrades and changes including what to watch out for and suggested precautions.",sidebar_label:"Considerations",pagination_label:"Key Considerations When Upgrading a Subnet",sidebar_position:0},sidebar:"build-subnet",previous:{title:"Deploy a Cross-Chain EVM Bridge",permalink:"/docs/build/subnet/utility/cross-chain-evm-bridge"},next:{title:"Customize your EVM-Powered Subnet",permalink:"/docs/build/subnet/upgrade/customize-a-subnet"}},d={},u=[{value:"General Upgrade Considerations",id:"general-upgrade-considerations",level:2},{value:"Upgrading Subnet Validator Nodes",id:"upgrading-subnet-validator-nodes",level:2},{value:"Upgrading Subnet VM Plugin Binaries",id:"upgrading-subnet-vm-plugin-binaries",level:2},{value:"Network Upgrades",id:"network-upgrades",level:2},{value:"Summary",id:"summary",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"key-considerations-when-upgrading-a-subnet",children:"Key Considerations When Upgrading a Subnet"}),"\n",(0,a.jsxs)(n.p,{children:["In the course of Subnet operation, you will inevitably need to upgrade or change some part of the\nsoftware stack that is running your Subnet. If nothing else, you will have to upgrade the\nLuxd node client. Same goes for the VM plugin binary that is used to run the blockchain on\nyour Subnet, which is most likely the ",(0,a.jsx)(n.a,{href:"https://github.com/luxfi/subnet-evm",children:"Subnet-EVM"}),", the\nSubnet implementation of the Ethereum virtual machine."]}),"\n",(0,a.jsx)(n.p,{children:"Node and VM upgrades usually don't change the way your Subnet functions, instead they keep your\nSubnet in sync with the rest of the network, bringing security, performance and feature upgrades.\nMost upgrades are optional, but all of them are recommended, and you should make optional upgrades\npart of your routine Subnet maintenance. Some upgrades will be mandatory, and those will be clearly\ncommunicated as such ahead of time, you need to pay special attention to those."}),"\n",(0,a.jsxs)(n.p,{children:["Besides the upgrades due to new releases, you also may want to change the configuration of the VM,\nto alter the way Subnet runs, for various business or operational needs. These upgrades are solely\nthe purview of your team, and you have complete control over the timing of their roll out. Any such\nchange represents a ",(0,a.jsx)(n.strong,{children:"network upgrade"})," and needs to be carefully planned and executed."]}),"\n",(0,a.jsxs)(n.admonition,{type:"warning",children:[(0,a.jsx)(n.p,{children:"Network Upgrades Permanently Change the Rules of Your Subnet."}),(0,a.jsx)(n.p,{children:"Procedural mistakes or a botched upgrade can halt your Subnet or lead to data loss!"}),(0,a.jsx)(n.p,{children:"When performing a Subnet upgrade, every single validator on the Subnet will need to perform the\nidentical upgrade. If you are coordinating a network upgrade, you must schedule advance notice to\nevery Subnet validator so that they have time to perform the upgrade prior to activation. Make sure\nyou have direct line of communication to all your validators!"})]}),"\n",(0,a.jsx)(n.p,{children:"This tutorial will guide you through the process of doing various Subnet upgrades and changes. We\nwill point out things to watch out for and precautions you need to be mindful about."}),"\n",(0,a.jsx)(n.h2,{id:"general-upgrade-considerations",children:"General Upgrade Considerations"}),"\n",(0,a.jsxs)(n.p,{children:["When operating a Subnet, you should always keep in mind that Proof of Stake networks like Lux\ncan only make progress if sufficient amount of validating nodes are connected and processing\ntransactions. Each validator on a Subnet is assigned a certain ",(0,a.jsx)(n.code,{children:"weight"}),", which is a numerical value\nrepresenting the significance of the node in consensus decisions. On the Primary Network, weight is\nequal to the amount of LUX staked on the node. On Subnets, weight is currently assigned by the\nSubnet owners when they issue the transaction ",(0,a.jsx)(n.a,{href:"/docs/reference/luxd/p-chain/api#platformaddsubnetvalidator",children:"adding a validator"})," to the Subnet."]}),"\n",(0,a.jsx)(n.p,{children:"Subnets can operate normally only if validators representing 80% or more of the cumulative validator\nweight is connected. If the amount of connected stake falls close to or below 80%, Subnet\nperformance (time to finality) will suffer, and ultimately the Subnet will halt (stop processing\ntransactions)."}),"\n",(0,a.jsx)(n.p,{children:"You as a Subnet operator need to ensure that whatever you do, at least 80% of the validators'\ncumulative weight is connected and working at all times."}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["It is mandatory that the cumulative weight of all validators in the Subnet must be at least\nthe value of\n",(0,a.jsx)(n.a,{href:"/docs/nodes/configure/luxd-config-flags#snow-sample-size-int",children:(0,a.jsx)(n.code,{children:"snow-sample-size"})})," (default\n20). For example, if there is only one validator in the Subnet, its weight must be at least\n",(0,a.jsx)(n.code,{children:"snow-sample-size"})," . Hence, when assigning weight to the nodes, always use values greater than 20.\nRecall that a validator's weight can't be changed while it is validating, so take care to use an\nappropriate value."]})}),"\n",(0,a.jsx)(n.h2,{id:"upgrading-subnet-validator-nodes",children:"Upgrading Subnet Validator Nodes"}),"\n",(0,a.jsxs)(n.p,{children:["Luxd, the node client that is running the Lux validators is under constant and rapid\ndevelopment. New versions come out often (roughly every two weeks), bringing added capabilities,\nperformance improvements or security fixes. Updates are usually optional, but from time to time\n(much less frequently than regular updates) there will be an update that includes a mandatory\nnetwork upgrade. Those upgrades are ",(0,a.jsx)(n.strong,{children:"MANDATORY"})," for every node running the Subnet. Any node that\ndoes not perform the update before the activation timestamp will immediately stop working when the\nupgrade activates."]}),"\n",(0,a.jsx)(n.p,{children:"That's why having a node upgrade strategy is absolutely vital, and you should always update to the\nlatest Luxd client immediately when it is made available."}),"\n",(0,a.jsxs)(n.p,{children:["For a general guide on upgrading Luxd check out ",(0,a.jsx)(n.a,{href:"/docs/nodes/maintain/upgrade-your-luxd-node",children:"this tutorial"}),". When upgrading Subnet nodes and\nkeeping in mind the previous section, make sure to stagger node upgrades and start a new upgrade\nonly once the previous node has successfully upgraded. Use the ",(0,a.jsx)(n.a,{href:"/docs/reference/luxd/health-api#healthhealth",children:"Health API"})," to check that ",(0,a.jsx)(n.code,{children:"healthy"})," value in the response\nis ",(0,a.jsx)(n.code,{children:"true"})," on the upgraded node, and on other Subnet validators check that\n",(0,a.jsx)(n.a,{href:"/docs/reference/luxd/p-chain/api#platformgetcurrentvalidators",children:"platform.getCurrentValidators()"}),"\nhas ",(0,a.jsx)(n.code,{children:"true"})," in ",(0,a.jsx)(n.code,{children:"connected"})," attribute for the upgraded node's ",(0,a.jsx)(n.code,{children:"nodeID"}),". Once those two conditions are\nsatisfied, node is confirmed to be online and validating the Subnet and you can start upgrading\nanother node."]}),"\n",(0,a.jsx)(n.p,{children:"Continue the upgrade cycle until all the Subnet nodes are upgraded."}),"\n",(0,a.jsx)(n.h2,{id:"upgrading-subnet-vm-plugin-binaries",children:"Upgrading Subnet VM Plugin Binaries"}),"\n",(0,a.jsxs)(n.p,{children:["Besides the Luxd client itself, new versions get released for the VM binaries that run the\nblockchains on the Subnet. On most Subnets, that is the\n",(0,a.jsx)(n.a,{href:"https://github.com/luxfi/subnet-evm",children:"Subnet-EVM"}),", so this tutorial will go through the steps for\nupdating the ",(0,a.jsx)(n.code,{children:"subnet-evm"})," binary. The update process will be similar for updating any VM plugin\nbinary."]}),"\n",(0,a.jsx)(n.p,{children:"All the considerations for doing staggered node upgrades as discussed in previous section are valid\nfor VM upgrades as well."}),"\n",(0,a.jsxs)(n.p,{children:["In the future, VM upgrades will be handled by the ",(0,a.jsx)(n.a,{href:"https://github.com/luxfi/cli",children:"Lux-CLI\ntool"}),", but for now we need to do it manually."]}),"\n",(0,a.jsxs)(n.p,{children:["Go to the ",(0,a.jsx)(n.a,{href:"https://github.com/luxfi/subnet-evm/releases",children:"releases page"})," of the Subnet-EVM\nrepository. Locate the latest version, and copy link that corresponds to the OS and architecture of\nthe machine the node is running on (",(0,a.jsx)(n.code,{children:"darwin"})," = Mac, ",(0,a.jsx)(n.code,{children:"amd64"})," = Intel/AMD processor, ",(0,a.jsx)(n.code,{children:"arm64"})," = Arm\nprocessor). Log into the machine where the node is running and download the archive, using ",(0,a.jsx)(n.code,{children:"wget"}),"\nand the link to the archive, like this:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"wget https://github.com/luxfi/subnet-evm/releases/download/v0.2.9/subnet-evm_0.2.9_linux_amd64.tar.gz\n"})}),"\n",(0,a.jsx)(n.p,{children:"This will download the archive to the machine. Unpack it like this (use the correct filename, of course):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tar xvf subnet-evm_0.2.9_linux_amd64.tar.gz\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This will unpack and place the contents of the archive in the current directory, file ",(0,a.jsx)(n.code,{children:"subnet-evm"}),"\nis the plugin binary. You need to stop the node now (if the node is running as a service, use ",(0,a.jsx)(n.code,{children:"sudo systemctl stop luxd"})," command). You need to place that file into the plugins directory where\nthe Luxd binary is located. If the node is installed using the install script, the path will\nbe ",(0,a.jsx)(n.code,{children:"~/node/plugins"})," Instead of the ",(0,a.jsx)(n.code,{children:"subnet-evm"})," filename, VM binary needs to be named as\nthe VM ID of the chain on the Subnet. For example, for the ",(0,a.jsx)(n.a,{href:"https://subnets-test.lux.network/wagmi",children:"ZOO\nSubnet"})," that VM ID is\n",(0,a.jsx)(n.code,{children:"srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy"}),". So, the command to copy the new plugin binary\nwould look like:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cp subnet-evm ~/node/plugins/srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsx)(n.p,{children:"Make sure you use the correct VM ID, otherwise, your VM will not get updated and your Subnet may halt."})}),"\n",(0,a.jsxs)(n.p,{children:["After you do that, you can start the node back up (if running as service do ",(0,a.jsx)(n.code,{children:"sudo systemctl start luxd"}),"). You can monitor the log output on the node to check that everything is OK, or you can\nuse the\n",(0,a.jsx)(n.a,{href:"https://docs.lux.network/apis/luxd/apis/info#infogetnodeversion",children:"info.getNodeVersion()"})," API\nto check the versions. Example output would look like:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "jsonrpc": "2.0",\n  "result": {\n    "version": "lux/1.7.18",\n    "databaseVersion": "v1.4.5",\n    "gitCommit": "b6d5827f1a87e26da649f932ad649a4ea0e429c4",\n    "vmVersions": {\n      "avm": "v1.7.18",\n      "evm": "v0.8.15",\n      "platform": "v1.7.18",\n      "sqja3uK17MJxfC7AN8nGadBw9JK5BcrsNwNynsqP5Gih8M5Bm": "v0.0.7",\n      "srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy": "v0.2.9"\n    }\n  },\n  "id": 1\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Note that entry next to the VM ID we upgraded correctly says ",(0,a.jsx)(n.code,{children:"v0.2.9"}),". You have successfully\nupgraded the VM!"]}),"\n",(0,a.jsx)(n.p,{children:"Refer to the previous section on how to make sure node is healthy and connected before moving on to\nupgrading the next Subnet validator."}),"\n",(0,a.jsxs)(n.p,{children:["If you don't get the expected result, you can stop the ",(0,a.jsx)(n.code,{children:"Luxd"}),", examine and follow closely\nstep-by-step of the above. You are free to remove files under ",(0,a.jsx)(n.code,{children:"~/node/plugins"}),", however,\nyou should keep in mind that removing files is to remove an existing VM binary. You must put the\ncorrect VM plugin in place before you restart Luxd."]}),"\n",(0,a.jsx)(n.h2,{id:"network-upgrades",children:"Network Upgrades"}),"\n",(0,a.jsxs)(n.p,{children:["Sometimes you need to do a network upgrade to change the configured rules in the genesis under which\nthe Chain operates. In regular EVM, network upgrades are a pretty involved process that includes\ndeploying the new EVM binary, coordinating the timed upgrade and deploying changes to the nodes. But\nsince ",(0,a.jsx)(n.a,{href:"https://github.com/luxfi/subnet-evm/releases/tag/v0.2.8",children:"Subnet-EVM v0.2.8"}),", we introduced\nthe long awaited feature to perform network upgrades by just using a few lines of JSON. Upgrades can\nconsist of enabling/disabling particular precompiles, or changing their parameters. Currently\navailable precompiles allow you to:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Restrict Smart Contract Deployers"}),"\n",(0,a.jsx)(n.li,{children:"Restrict Who Can Submit Transactions"}),"\n",(0,a.jsx)(n.li,{children:"Mint Native Coins"}),"\n",(0,a.jsx)(n.li,{children:"Configure Dynamic Fees"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Please refer to ",(0,a.jsx)(n.a,{href:"/docs/build/subnet/upgrade/customize-a-subnet#network-upgrades-enabledisable-precompiles",children:"Customize a Subnet"})," for\na detailed discussion\nof possible precompile upgrade parameters."]}),"\n",(0,a.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsxs)(n.p,{children:["Vital part of Subnet maintenance is performing timely upgrades at all levels of the software stack\nrunning your Subnet. We hope this tutorial will give you enough information and context to allow you\nto do those upgrades with confidence and ease. If you have additional questions or any issues,\nplease reach out to us on ",(0,a.jsx)(n.a,{href:"https://chat.lux.network",children:"Discord"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},43540:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var a=t(48318);const o={},i=a.createContext(o);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);