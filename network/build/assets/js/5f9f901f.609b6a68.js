"use strict";(self.webpackChunk_luxdocs_network=self.webpackChunk_luxdocs_network||[]).push([[5065],{75778:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>o,frontMatter:()=>s,metadata:()=>l,toc:()=>x});var r=i(49214),a=i(43540);const s={tags:["Standards"],description:"This document describes how primitive types are encoded on the Lux platform.",sidebar_label:"Serialization",pagination_label:"Serialization Primitives"},t="Serialization Primitives",l={id:"reference/standards/serialization-primitives",title:"Serialization Primitives",description:"This document describes how primitive types are encoded on the Lux platform.",source:"@site/docs/reference/standards/serialization-primitives.md",sourceDirName:"reference/standards",slug:"/reference/standards/serialization-primitives",permalink:"/docs/reference/standards/serialization-primitives",draft:!1,unlisted:!1,editUrl:"https://github.com/luxfi/docs/edit/main/docs/reference/standards/serialization-primitives.md",tags:[{label:"Standards",permalink:"/docs/tags/standards"}],version:"current",frontMatter:{tags:["Standards"],description:"This document describes how primitive types are encoded on the Lux platform.",sidebar_label:"Serialization",pagination_label:"Serialization Primitives"},sidebar:"reference",previous:{title:"Cryptographic Primitives",permalink:"/docs/reference/standards/cryptographic-primitives"},next:{title:"Issuing API Calls",permalink:"/docs/reference/standards/guides/issuing-api-calls"}},d={},x=[{value:"Byte",id:"byte",level:2},{value:"Short",id:"short",level:2},{value:"Integer",id:"integer",level:2},{value:"Long Integers",id:"long-integers",level:2},{value:"IP Addresses",id:"ip-addresses",level:2},{value:"Fixed-Length Array",id:"fixed-length-array",level:2},{value:"Variable Length Array",id:"variable-length-array",level:2},{value:"String",id:"string",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"serialization-primitives",children:"Serialization Primitives"}),"\n",(0,r.jsx)(n.p,{children:"Lux uses a simple, uniform, and elegant representation for all internal data. This document\ndescribes how primitive types are encoded on the Lux platform. Transactions are encoded in\nterms of these basic primitive types."}),"\n",(0,r.jsx)(n.h2,{id:"byte",children:"Byte"}),"\n",(0,r.jsx)(n.p,{children:"Bytes are packed as-is into the message payload."}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Packing:\n    0x01\nResults in:\n    [0x01]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"short",children:"Short"}),"\n",(0,r.jsx)(n.p,{children:"Shorts are packed in BigEndian format into the message payload."}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Packing:\n    0x0102\nResults in:\n    [0x01, 0x02]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"integer",children:"Integer"}),"\n",(0,r.jsx)(n.p,{children:"Integers are 32-bit values packed in BigEndian format into the message payload."}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Packing:\n    0x01020304\nResults in:\n    [0x01, 0x02, 0x03, 0x04]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"long-integers",children:"Long Integers"}),"\n",(0,r.jsx)(n.p,{children:"Long integers are 64-bit values packed in BigEndian format into the message payload."}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Packing:\n    0x0102030405060708\nResults in:\n    [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"ip-addresses",children:"IP Addresses"}),"\n",(0,r.jsx)(n.p,{children:"IP addresses are represented as 16-byte IPv6 format, with the port appended into the message payload\nas a Short. IPv4 addresses are padded with 12 bytes of leading 0x00s."}),"\n",(0,r.jsx)(n.p,{children:"IPv4 example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'Packing:\n    "127.0.0.1:9650"\nResults in:\n    [\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x01,\n        0x25, 0xb2,\n    ]\n'})}),"\n",(0,r.jsx)(n.p,{children:"IPv6 example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'Packing:\n    "[2001:0db8:ac10:fe01::]:12345"\nResults in:\n    [\n        0x20, 0x01, 0x0d, 0xb8, 0xac, 0x10, 0xfe, 0x01,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x30, 0x39,\n    ]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"fixed-length-array",children:"Fixed-Length Array"}),"\n",(0,r.jsx)(n.p,{children:"Fixed-length arrays, whose length is known ahead of time and by context, are packed in order."}),"\n",(0,r.jsx)(n.p,{children:"Byte array example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Packing:\n    [0x01, 0x02]\nResults in:\n    [0x01, 0x02]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Integer array example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Packing:\n    [0x03040506]\nResults in:\n    [0x03, 0x04, 0x05, 0x06]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"variable-length-array",children:"Variable Length Array"}),"\n",(0,r.jsx)(n.p,{children:"The length of the array is prefixed in Integer format, followed by the packing of the array contents\nin Fixed Length Array format."}),"\n",(0,r.jsx)(n.p,{children:"Byte array example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Packing:\n    [0x01, 0x02]\nResults in:\n    [0x00, 0x00, 0x00, 0x02, 0x01, 0x02]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Int array example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Packing:\n    [0x03040506]\nResults in:\n    [0x00, 0x00, 0x00, 0x01, 0x03, 0x04, 0x05, 0x06]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"string",children:"String"}),"\n",(0,r.jsx)(n.p,{children:"A String is packed similarly to a variable-length byte array. However, the length prefix is a short\nrather than an int. Strings are encoded in UTF-8 format."}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'Packing:\n    "Lux"\nResults in:\n    [0x00, 0x04, 0x41, 0x76, 0x61, 0x78]\n'})})]})}function o(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},43540:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var r=i(48318);const a={},s=r.createContext(a);function t(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);