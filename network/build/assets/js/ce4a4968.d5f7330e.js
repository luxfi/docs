"use strict";(self.webpackChunk_luxdocs_network=self.webpackChunk_luxdocs_network||[]).push([[961],{45693:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var r=t(49214),o=t(43540);const s={tags:["Build","Dapps"],description:"This guide shows how to deploy and interact with smart contracts using foundry on a local Lux Network and the Testnet C-Chain.",sidebar_label:"Foundry",pagination_label:"Using Foundry with the Lux C-Chain",sidebar_position:2},a="Using Foundry with the Lux C-Chain",i={id:"build/dapp/smart-contracts/toolchains/foundry",title:"Using Foundry with the Lux C-Chain",description:"This guide shows how to deploy and interact with smart contracts using foundry on a local Lux Network and the Testnet C-Chain.",source:"@site/docs/build/dapp/smart-contracts/toolchains/foundry.md",sourceDirName:"build/dapp/smart-contracts/toolchains",slug:"/build/dapp/smart-contracts/toolchains/foundry",permalink:"/docs/build/dapp/smart-contracts/toolchains/foundry",draft:!1,unlisted:!1,editUrl:"https://github.com/luxfi/docs/edit/main/docs/build/dapp/smart-contracts/toolchains/foundry.md",tags:[{label:"Build",permalink:"/docs/tags/build"},{label:"Dapps",permalink:"/docs/tags/dapps"}],version:"current",sidebarPosition:2,frontMatter:{tags:["Build","Dapps"],description:"This guide shows how to deploy and interact with smart contracts using foundry on a local Lux Network and the Testnet C-Chain.",sidebar_label:"Foundry",pagination_label:"Using Foundry with the Lux C-Chain",sidebar_position:2},sidebar:"build-dapp",previous:{title:"Using thirdweb with the Lux C-Chain",permalink:"/docs/build/dapp/smart-contracts/toolchains/thirdweb"},next:{title:"Interact with a Solidity Smart Contract from a Go Application",permalink:"/docs/build/dapp/smart-contracts/abigen"}},c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Recommended Knowledge",id:"recommended-knowledge",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Luxd and Lux Netrunner",id:"luxd-and-lux-netrunner",level:3},{value:"Getting Started",id:"getting-started",level:2},{value:"Clone Lux Smart Contract Quick Start",id:"clone-lux-smart-contract-quick-start",level:3},{value:"Write Contracts",id:"write-contracts",level:2},{value:"Compile, Deploy, and Verify with Forge",id:"compile-deploy-and-verify-with-forge",level:2},{value:"Verifying After Deployment",id:"verifying-after-deployment",level:2},{value:"Using Cast to Interact with the Smart Contract",id:"using-cast-to-interact-with-the-smart-contract",level:2},{value:"Mainnet Workflow",id:"mainnet-workflow",level:2},{value:"Local Workflow",id:"local-workflow",level:2},{value:"Summary",id:"summary",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"using-foundry-with-the-lux-c-chain",children:"Using Foundry with the Lux C-Chain"}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"This guide shows how to deploy and interact with smart contracts using foundry\non a local Lux Network and the Testnet C-Chain."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/foundry-rs/foundry",children:"Foundry toolchain"})," is a smart contract\ndevelopment toolchain written in Rust. It manages your dependencies, compiles\nyour project, runs tests, deploys, and lets you interact with the chain from the\ncommand-line."]}),"\n",(0,r.jsx)(n.h2,{id:"recommended-knowledge",children:"Recommended Knowledge"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Basic understanding of ",(0,r.jsx)(n.a,{href:"https://docs.soliditylang.org",children:"Solidity"})," and Lux."]}),"\n",(0,r.jsxs)(n.li,{children:["You are familiar with ",(0,r.jsx)(n.a,{href:"https://github.com/luxfi/smart-contract-quickstart",children:"Lux Smart Contract Quickstart"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Basic understanding of the ",(0,r.jsx)(n.a,{href:"/docs/learn/lux/lux-platform",children:"Lux's architecture"})]}),"\n",(0,r.jsxs)(n.li,{children:["performed a cross-chain swap via this ",(0,r.jsx)(n.a,{href:"https://support.lux.network/en/articles/6169872-how-to-make-a-cross-chain-transfer-in-the-wallet",children:"this\ntutorial"}),"\nto get funds to your C-Chain address."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You have ",(0,r.jsx)(n.a,{href:"https://github.com/foundry-rs/foundry#installation",children:"installed\nFoundry"})," and run ",(0,r.jsx)(n.code,{children:"foundryup"}),". This\ninstallation includes the ",(0,r.jsx)(n.code,{children:"forge"})," and ",(0,r.jsx)(n.code,{children:"cast"})," binaries used in this\nwalk-through."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://nodejs.org/en",children:"NodeJS"})," version ",(0,r.jsx)(n.code,{children:"16.x"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"luxd-and-lux-netrunner",children:"Luxd and Lux Netrunner"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/luxfi/luxd",children:"Luxd"})," is a Lux node\nimplementation written in Go."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/tooling/netrunner",children:"Lux Netrunner"})," is a tool to quickly\ndeploy local test networks. Together, you can deploy local test networks and run\ntests on them."]}),"\n",(0,r.jsx)(n.p,{children:"Start a local five node Lux network:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"cd /path/to/netrunner\n# start a five node staking network\n./go run examples/local/fivenodenetwork/main.go\n"})}),"\n",(0,r.jsx)(n.p,{children:"A five node Lux network is running on your machine. Network will run until you Ctrl + C to exit."}),"\n",(0,r.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsxs)(n.p,{children:["This section will walk you through creating an ",(0,r.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-721",children:"ERC721"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"clone-lux-smart-contract-quick-start",children:"Clone Lux Smart Contract Quick Start"}),"\n",(0,r.jsxs)(n.p,{children:["Clone the ",(0,r.jsx)(n.a,{href:"https://github.com/luxfi/smart-contract-quickstart",children:"quickstart\nrepository"})," and\ninstall the necessary packages via ",(0,r.jsx)(n.code,{children:"yarn"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"git clone https://github.com/luxfi/smart-contract-quickstart.git\ncd smart-contract-quickstart\nyarn\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.p,{children:"The repository cloning method used is HTTPS, but SSH can be used too:"}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"git clone git@github.com:luxfi/smart-contract-quickstart.git"})}),(0,r.jsxs)(n.p,{children:["You can find more about SSH and how to use it\n",(0,r.jsx)(n.a,{href:"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh",children:"here"}),"."]})]}),"\n",(0,r.jsxs)(n.p,{children:["In order to deploy contracts, you need to have some LUX. You can get testnet\nLUX from the ",(0,r.jsx)(n.a,{href:"https://faucet.lux.network",children:"Lux Faucet"}),", which is an easy\nway to get to play around with Lux. After getting comfortable with your\ncode, you can run it on Mainnet after making the necessary changes to your\nworkflow."]}),"\n",(0,r.jsx)(n.h2,{id:"write-contracts",children:"Write Contracts"}),"\n",(0,r.jsxs)(n.p,{children:["We will use our example ERC721 smart contract,\n",(0,r.jsx)(n.a,{href:"https://github.com/luxfi/smart-contract-quickstart/blob/3fbba0ac28f6420e9be5d2635d5f23693f80127a/contracts/NFT.sol",children:(0,r.jsx)(n.code,{children:"NFT.sol"})}),"\nfound in ",(0,r.jsx)(n.code,{children:"./contracts"})," of our project."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'//SPDX-License-Identifier: MIT\n// contracts/ERC721.sol\n\npragma solidity >=0.6.2;\n\nimport "@openzeppelin/contracts/token/ERC721/ERC721.sol";\nimport "@openzeppelin/contracts/utils/Counters.sol";\n\ncontract NFT is ERC721 {\n  using Counters for Counters.Counter;\n  Counters.Counter private _tokenIds;\n\n  constructor() ERC721("GameItem", "ITM") {}\n\n  // commented out unused variable\n  // function awardItem(address player, string memory tokenURI)\n  function awardItem(address player)\n    public\n    returns (uint256)\n  {\n    _tokenIds.increment();\n\n    uint256 newItemId = _tokenIds.current();\n    _mint(player, newItemId);\n    // _setTokenURI(newItemId, tokenURI);\n\n    return newItemId;\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Let's examine this implementation of an NFT as a Game Item. We start by\nimporting to contracts from our node modules. We import OpenZeppelin's open\nsource implementation of the ",(0,r.jsx)(n.a,{href:"https://docs.openzeppelin.com/contracts/2.x/api/token/erc721",children:"ERC721\nstandard"})," which\nour NFT contract will inherit from. Our constructor takes the ",(0,r.jsx)(n.code,{children:"_name"})," and\n",(0,r.jsx)(n.code,{children:"_symbol"})," arguments for our NFT and passes them on to the constructor of the\nparent ERC721 implementation. Lastly we implement the ",(0,r.jsx)(n.code,{children:"awardItem"})," function which\nallows anyone to mint an NFT to a player's wallet address. This function\nincrements the ",(0,r.jsx)(n.code,{children:"currentTokenId"})," and makes use of the ",(0,r.jsx)(n.code,{children:"_mint"})," function of our\nparent contract."]}),"\n",(0,r.jsx)(n.h2,{id:"compile-deploy-and-verify-with-forge",children:"Compile, Deploy, and Verify with Forge"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://book.getfoundry.sh/reference/forge/forge-build.html",children:"Forge"})," is a\ncommand-line tool that ships with Foundry. Forge tests, builds, and deploys your\nsmart contracts."]}),"\n",(0,r.jsxs)(n.p,{children:["It requires some initial project configuration in the form of a\n",(0,r.jsx)(n.a,{href:"https://github.com/foundry-rs/foundry#configuration",children:"foundry.toml"})," which can be\ngenerated by running:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"forge init --no-git --no-commit --force\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"foundry.toml"})," by default points to the folders it added.\nWe will want to change this to make sure the\n",(0,r.jsx)(n.code,{children:"src"})," points to the ",(0,r.jsx)(n.code,{children:"contracts"})," directory.\nChange your ",(0,r.jsx)(n.code,{children:"foundry.toml"})," to look like the following:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"[profile.default]\nsrc = 'contracts'\nout = 'out'\nlibs = [\"node_modules\", \"lib\"]\nremappings = [\n    '@ensdomains/=node_modules/@ensdomains/',\n    '@openzeppelin/=node_modules/@openzeppelin/',\n    'hardhat/=node_modules/hardhat/',\n]\n\n# See more config options https://github.com/foundry-rs/foundry/tree/master/config\n"})}),"\n",(0,r.jsx)(n.p,{children:"To compile the NFT contract run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"forge build\n"})}),"\n",(0,r.jsxs)(n.p,{children:["By default, the contract artifacts will be in the ",(0,r.jsx)(n.code,{children:"out"})," directory, as specified in the ",(0,r.jsx)(n.code,{children:"foundry.toml"}),".\nTo deploy our compiled contract with Forge we have to set environment variables for the RPC\nendpoint and the private key we want to use to deploy."]}),"\n",(0,r.jsx)(n.p,{children:"Set your environment variables by running:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"export RPC_URL=<YOUR-RPC-ENDPOINT>\nexport PRIVATE_KEY=<YOUR-PRIVATE-KEY>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Since we are deploying to Testnet, our ",(0,r.jsx)(n.code,{children:"RPC_URL"})," export should be:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"export RPC_URL=https://api.lux-test.network/ext/bc/C/rpc\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If you would like to verify you contracts during the deployment process (fastest and easiest way),\nget a ",(0,r.jsx)(n.a,{href:"https://docs.snowtrace.io/getting-started/viewing-api-usage-statistics",children:"Snowtrace API Key"}),".\nAdd this as an environment variable:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"export ETHERSCAN_API_KEY=<YOUR-SNOWTRACE-API-KEY>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Once set, you can ",(0,r.jsx)(n.a,{href:"https://book.getfoundry.sh/reference/forge/forge-create.html",children:"deploy your NFT with\nForge"})," by running\nthe command below while adding the values for ",(0,r.jsx)(n.code,{children:"_name"})," and ",(0,r.jsx)(n.code,{children:"_symbol"}),", the\nrelevant ",(0,r.jsx)(n.a,{href:"https://github.com/luxfi/smart-contract-quickstart/blob/3ad93abf50fba65e3aab68f23382bcace73968be/contracts/NFT.sol#L13",children:"constructor\narguments"}),"\nof the NFT contract. You can verify the contracts with Snowtrace by adding ",(0,r.jsx)(n.code,{children:"--verify"})," before the ",(0,r.jsx)(n.code,{children:"--constructor-args"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"forge create NFT --rpc-url=$RPC_URL --private-key=$PRIVATE_KEY --verify --constructor-args GameItem ITM\n"})}),"\n",(0,r.jsx)(n.p,{children:"Upon successful deployment, you will see the deploying wallet's address, the\ncontract's address as well as the transaction hash printed to your terminal."}),"\n",(0,r.jsx)(n.p,{children:"Here's an example output from an NFT deployment and verification."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"[\u2814] Compiling...\nNo files changed, compilation skipped\nDeployer: 0x8db97c7cece249c2b98bdc0226cc4c2a57bf52fc\nDeployed to: 0x52c84043cd9c865236f11d9fc9f56aa003c1f922\nTransaction hash: 0xf35c40dbbdc9e4298698ad1cb9937195e5a5e74e557bab1970a5dfd42a32f533\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Upon successful verification, after your deployment you will see the contract verification status as\n",(0,r.jsx)(n.code,{children:"successfully verified"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:'Starting contract verification...\nWaiting for etherscan to detect contract deployment...\nStart verifying contract `0x8e982a4ef70430f8317b5652bd5c28f147fbf912` deployed on testnet\n\nSubmitting verification for [contracts/NFT.sol:NFT] "0x8e982a4Ef70430f8317B5652Bd5C28F147FBf912".\n\nSubmitting verification for [contracts/NFT.sol:NFT] "0x8e982a4Ef70430f8317B5652Bd5C28F147FBf912".\nSubmitted contract for verification:\n\tResponse: `OK`\n\tGUID: `cfkyqwvjjauafirepxt8qhks2zhptczzccqege9uefu9ma8wiz`\n\tURL:\n        https://testnet.snowtrace.io/address/0x8e982a4ef70430f8317b5652bd5c28f147fbf912\nContract verification status:\nResponse: `NOTOK`\nDetails: `Pending in queue`\nContract verification status:\nResponse: `OK`\nDetails: `Pass - Verified`\nContract successfully verified\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.em,{children:["Note: Please store your ",(0,r.jsx)(n.code,{children:"Deployed to"})," address for use in the next sections."]})}),"\n",(0,r.jsx)(n.h2,{id:"verifying-after-deployment",children:"Verifying After Deployment"}),"\n",(0,r.jsxs)(n.p,{children:["If you did not verify within the deployment process, you can still verify a deployed contract with\nfoundry, using ",(0,r.jsx)(n.a,{href:"https://book.getfoundry.sh/reference/forge/forge-verify-contract",children:(0,r.jsx)(n.code,{children:"forge verify-contract"})}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Note: The foundry.toml and environment variables will have to be\nset like they were in the previous section"})}),"\n",(0,r.jsx)(n.p,{children:"For example, if we were to verify the NFT contract we just\ndeployed in the previous section it would look this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:'forge verify-contract --chain-id 43113 --watch --constructor-args $(cast abi-encode "constructor(string,string)" "GameItem" "ITM") 0x8e982a4ef70430f8317b5652bd5c28f147fbf912 NFT\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Upon successful verification, you will see the contract verification status as ",(0,r.jsx)(n.code,{children:"successfully verified"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:'Starting contract verification...\nWaiting for etherscan to detect contract deployment...\nStart verifying contract `0x8e982a4ef70430f8317b5652bd5c28f147fbf912` deployed on testnet\n\nSubmitting verification for [contracts/NFT.sol:NFT] "0x8e982a4Ef70430f8317B5652Bd5C28F147FBf912".\n\nSubmitting verification for [contracts/NFT.sol:NFT] "0x8e982a4Ef70430f8317B5652Bd5C28F147FBf912".\nSubmitted contract for verification:\n\tResponse: `OK`\n\tGUID: `cfkyqwvjjauafirepxt8qhks2zhptczzccqege9uefu9ma8wiz`\n\tURL:\n        https://testnet.snowtrace.io/address/0x8e982a4ef70430f8317b5652bd5c28f147fbf912\nContract verification status:\nResponse: `NOTOK`\nDetails: `Pending in queue`\nContract verification status:\nResponse: `OK`\nDetails: `Pass - Verified`\nContract successfully verified\n'})}),"\n",(0,r.jsx)(n.h2,{id:"using-cast-to-interact-with-the-smart-contract",children:"Using Cast to Interact with the Smart Contract"}),"\n",(0,r.jsxs)(n.p,{children:["We can call functions on our NFT contract with\n",(0,r.jsx)(n.a,{href:"https://book.getfoundry.sh/reference/cast/cast-send.html",children:"Cast"}),", Foundry's\ncommand-line tool for interacting with smart contracts, sending transactions,\nand getting chain data. In this scenario, we will mint a Game Item to a player's\nwallet using the ",(0,r.jsxs)(n.a,{href:"https://github.com/luxfi/smart-contract-quickstart/blob/0f29cbb6375a1a452579213f688609c880d52c01/contracts/NFT.sol#L17",children:[(0,r.jsx)(n.code,{children:"awardItem"}),"\nfunction"]}),"\nin our smart contract."]}),"\n",(0,r.jsxs)(n.p,{children:["Mint an NFT from your contract by replacing ",(0,r.jsx)(n.code,{children:"<NFT-CONTRACT-ADDRESS>"})," with your\n",(0,r.jsx)(n.code,{children:"Deployed to"})," address and ",(0,r.jsx)(n.code,{children:"<NFT-RECIPIENT-ADDRESS>"})," with an address of your\nchoice."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Note: This section assumes that you have already set your RPC and private key env variables during deployment"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:'cast send --rpc-url=$RPC_URL  <NFT-CONTRACT-ADDRESS> "awardItem(address)" <NFT-RECIPIENT-ADDRESS> --private-key=$PRIVATE_KEY\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Upon success, the command line will display the ",(0,r.jsx)(n.a,{href:"https://testnet.snowtrace.io/tx/0x4651ae041a481a6eeb852e5300e9be48e66a1d2332733df22d8e75cf460b0c2c",children:"transaction data"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:'blockHash               0x1d9b0364fe002eeddd0e32be0c27d6797c63dffb51fe555ea446357759e6a6f8\nblockNumber             10714448\ncontractAddress\ncumulativeGasUsed       90837\neffectiveGasPrice       28000000000\ngasUsed                 90837\nlogs                    [{"address":"0x45857b942723fff8ee7acd2b1d6515d9965c16e5","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000845095a03a6686e24b90fed55e11f4ec808b1ab3","0x0000000000000000000000000000000000000000000000000000000000000001"],"data":"0x","blockHash":"0x1d9b0364fe002eeddd0e32be0c27d6797c63dffb51fe555ea446357759e6a6f8","blockNumber":"0xa37d50","transactionHash":"0x4651ae041a481a6eeb852e5300e9be48e66a1d2332733df22d8e75cf460b0c2c","transactionIndex":"0x0","logIndex":"0x0","removed":false}]\nlogsBloom               0xnroot\nstatus                  1\ntransactionHash         0x4651ae041a481a6eeb852e5300e9be48e66a1d2332733df22d8e75cf460b0c2c\ntransactionIndex        0\ntype                    2\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Well done! You just minted your first NFT from your contract. You can check the\nowner of ",(0,r.jsx)(n.code,{children:"tokenId"})," 1 by running the ",(0,r.jsx)(n.code,{children:"cast call"})," command below:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:'cast call --rpc-url=$RPC_URL --private-key=$PRIVATE_KEY <NFT-CONTRACT-ADDRESS> "ownerOf(uint256)" 1\n'})}),"\n",(0,r.jsx)(n.p,{children:"The address you provided above should be returned as the owner."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"0x000000000000000000000000845095a03a6686e24b90fed55e11f4ec808b1ab3\n"})}),"\n",(0,r.jsx)(n.h2,{id:"mainnet-workflow",children:"Mainnet Workflow"}),"\n",(0,r.jsx)(n.p,{children:"The Testnet workflow above can be adapted to Mainnet with the following\nmodifications to the environment variables:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"export RPC_URL=https://api.lux.network/ext/bc/C/rpc\nexport PRIVATE_KEY=<YOUR-PRIVATE-KEY>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"local-workflow",children:"Local Workflow"}),"\n",(0,r.jsx)(n.p,{children:"The Testnet workflow above can be adapted to a Local Network by doing following:"}),"\n",(0,r.jsxs)(n.p,{children:["In a new terminal navigate to your ",(0,r.jsx)(n.a,{href:"/docs/tooling/netrunner",children:"Lux Netrunner"})," directory."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"cd /path/to/Lux-Network-Runner\n"})}),"\n",(0,r.jsx)(n.p,{children:"Next, deploy a new Lux Network with five nodes (a Cluster) locally."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"go run examples/local/fivenodenetwork/main.go\n"})}),"\n",(0,r.jsx)(n.p,{children:"Next, modify the environment variables in your Foundry project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"export RPC_URL=http://localhost:9650/ext/bc/C/rpc\nexport PRIVATE_KEY=56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"The example PRIVATE_KEY variable above provides a pre-funded account on\nLux Netrunner and should be used for LOCAL DEVELOPMENT ONLY."})}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.p,{children:"Now you have the tools you need to launch a local Lux network, create a\nFoundry project, as well as create, compile, deploy and interact with Solidity\ncontracts."}),"\n",(0,r.jsxs)(n.p,{children:["Join our ",(0,r.jsx)(n.a,{href:"https://chat.lux.network",children:"Discord Server"})," to learn more and ask any questions you may have."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},43540:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(48318);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);