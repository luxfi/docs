"use strict";(self.webpackChunk_luxdocs_network=self.webpackChunk_luxdocs_network||[]).push([[1806],{76876:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var t=i(49214),a=i(43540);const s={tags:["Build","Dapps"],description:"This tutorial will help users to send transactions with dynamic fee settings to adjust their priority fee and max fee cap during high network activity using javascript.",sidebar_label:"Dynamic Gas Fees",pagination_label:"Sending Transactions with Dynamic Fees using JavaScript",sidebar_position:1},r="Sending Transactions with Dynamic Fees using JavaScript",o={id:"build/dapp/advanced/sending-transactions-with-dynamic-fees-using-javascript",title:"Sending Transactions with Dynamic Fees using JavaScript",description:"This tutorial will help users to send transactions with dynamic fee settings to adjust their priority fee and max fee cap during high network activity using javascript.",source:"@site/docs/build/dapp/advanced/sending-transactions-with-dynamic-fees-using-javascript.md",sourceDirName:"build/dapp/advanced",slug:"/build/dapp/advanced/sending-transactions-with-dynamic-fees-using-javascript",permalink:"/docs/build/dapp/advanced/sending-transactions-with-dynamic-fees-using-javascript",draft:!1,unlisted:!1,editUrl:"https://github.com/luxfi/docs/edit/main/docs/build/dapp/advanced/sending-transactions-with-dynamic-fees-using-javascript.md",tags:[{label:"Build",permalink:"/docs/tags/build"},{label:"Dapps",permalink:"/docs/tags/dapps"}],version:"current",sidebarPosition:1,frontMatter:{tags:["Build","Dapps"],description:"This tutorial will help users to send transactions with dynamic fee settings to adjust their priority fee and max fee cap during high network activity using javascript.",sidebar_label:"Dynamic Gas Fees",pagination_label:"Sending Transactions with Dynamic Fees using JavaScript",sidebar_position:1},sidebar:"build-dapp",previous:{title:"Adjusting Gas Price During High Network Activity",permalink:"/docs/build/dapp/advanced/adjusting-gas-price-during-high-network-activity"},next:{title:"Add Lux Network Programmatically",permalink:"/docs/build/dapp/advanced/add-lux-programmatically"}},c={},d=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installing Dependencies",id:"installing-dependencies",level:2},{value:"Setting up Environment and Project",id:"setting-up-environment-and-project",level:2},{value:"Importing Dependencies and Private Key",id:"importing-dependencies-and-private-key",level:2},{value:"Setting up HTTP Provider Connected with Testnet Network",id:"setting-up-http-provider-connected-with-testnet-network",level:2},{value:"Setting up C-Chain APIs for Estimating Base and Priority Fees",id:"setting-up-c-chain-apis-for-estimating-base-and-priority-fees",level:2},{value:"Setting up Wallet",id:"setting-up-wallet",level:2},{value:"Function for Estimating Max Fee and Max Priority Fee",id:"function-for-estimating-max-fee-and-max-priority-fee",level:2},{value:"Function to Create, Sign and Send Transaction",id:"function-to-create-sign-and-send-transaction",level:2},{value:"Calling the <code>sendLUX()</code> Function",id:"calling-the-sendlux-function",level:2},{value:"Reissuance of Stuck Transaction",id:"reissuance-of-stuck-transaction",level:2},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"sending-transactions-with-dynamic-fees-using-javascript",children:"Sending Transactions with Dynamic Fees using JavaScript"}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The objective of this document is to provide and explain sending transactions\nwith dynamic fees using JavaScript. Make sure you have followed\n",(0,t.jsx)(n.a,{href:"/docs/build/dapp/advanced/adjusting-gas-price-during-high-network-activity",children:"the tutorial on adjusting the dynamic fees using MetaMask"}),". There, we have\nexplained the key concepts related to dynamic fees and EIP1559 type of\ntransactions."]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Basic familiarity with ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript",children:"JavaScript"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Basic familiarity with ",(0,t.jsx)(n.a,{href:"https://nodejs.org/en",children:"Node.js"})," and ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/",children:"npm"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Basic familiarity with ",(0,t.jsx)(n.a,{href:"/docs/reference/luxd/c-chain/api",children:"the Lux C-Chain"})," network and\n",(0,t.jsx)(n.a,{href:"https://ethereum.org/en/developers/docs/evm/",children:"EVM compatibility"})]}),"\n",(0,t.jsxs)(n.li,{children:["Basic understanding of ",(0,t.jsx)(n.a,{href:"/docs/build/dapp/advanced/adjusting-gas-price-during-high-network-activity#good-to-know-keywords-and-concepts",children:"dynamic fee transactions"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"installing-dependencies",children:"Installing Dependencies"}),"\n",(0,t.jsx)(n.p,{children:"Open the terminal and install the following dependencies in a new folder."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Ethers"}),"\n",(0,t.jsx)(n.li,{children:"lux"}),"\n",(0,t.jsx)(n.li,{children:"dotenv"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",children:"npm install ethers lux dotenv\n"})}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-environment-and-project",children:"Setting up Environment and Project"}),"\n",(0,t.jsxs)(n.p,{children:["To send a transaction we need to sign it using our private key. But private key\nshould not be hard coded in the code, rather must be fetched through some\nenvironment variables. Make a ",(0,t.jsx)(n.code,{children:".env"})," file in the root folder with the following\ncontent."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-env",children:"PRIVATEKEY=<YOUR_PRIVATE_KEY>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now make a new file ",(0,t.jsx)(n.code,{children:"app.js"})," in the root folder, which will be our main and only\nfile with the ",(0,t.jsx)(n.code,{children:"sendLux()"})," function. Follow the rest of the tutorial by\nunderstanding and pasting the provided snippets sequentially in the ",(0,t.jsx)(n.code,{children:"app.js"}),"\nfile."]}),"\n",(0,t.jsx)(n.h2,{id:"importing-dependencies-and-private-key",children:"Importing Dependencies and Private Key"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const ethers = require("ethers");\nconst Lux = require("lux").Lux;\nrequire("dotenv").config();\n\nconst privateKey = process.env.PRIVATEKEY;\n'})}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-http-provider-connected-with-testnet-network",children:"Setting up HTTP Provider Connected with Testnet Network"}),"\n",(0,t.jsxs)(n.p,{children:["Using the HTTP provider, we will connect to one of the nodes on the Testnet\nnetwork. Using this provider we will send the signed transaction to the network.\nYou can also connect to Mainnet using the URL -\n",(0,t.jsx)(n.code,{children:"https://api.lux.network/ext/bc/C/rpc"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// For sending a signed transaction to the network\nconst nodeURL = "https://api.lux-test.network/ext/bc/C/rpc";\nconst HTTPSProvider = new ethers.providers.JsonRpcProvider(nodeURL);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-c-chain-apis-for-estimating-base-and-priority-fees",children:"Setting up C-Chain APIs for Estimating Base and Priority Fees"}),"\n",(0,t.jsx)(n.p,{children:"To estimate the max fee and max priority fee on the network, we will be using\nC-Chain APIs. We can use the C-Chain through a LuxJS instance connected\nto the network as shown below."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// For estimating max fee and priority fee using CChain APIs\nconst chainId = 43113;\nconst lux = new Lux(\n  "api.lux-test.network",\n  undefined,\n  "https",\n  chainId\n);\nconst cchain = lux.CChain();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-wallet",children:"Setting up Wallet"}),"\n",(0,t.jsx)(n.p,{children:"A wallet is required for signing transactions with your private key and thus making it valid."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// For signing an unsigned transaction\nconst wallet = new ethers.Wallet(privateKey);\nconst address = wallet.address;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"function-for-estimating-max-fee-and-max-priority-fee",children:"Function for Estimating Max Fee and Max Priority Fee"}),"\n",(0,t.jsxs)(n.p,{children:["The function ",(0,t.jsx)(n.code,{children:"calcFeeData()"})," estimates the max fee and max priority fee per gas\naccording to network activity using the C-Chain APIs. This function returns max\nfee and max priority fee per gas in units of ",(0,t.jsx)(n.code,{children:"nLUX"})," or ",(0,t.jsx)(n.code,{children:"gwei"})," (1 LUX = 10^9\ngwei)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Function to estimate max fee and max priority fee\nconst calcFeeData = async (\n  maxFeePerGas = undefined,\n  maxPriorityFeePerGas = undefined\n) => {\n  const baseFee = parseInt(await cchain.getBaseFee(), 16) / 1e9;\n  maxPriorityFeePerGas =\n    maxPriorityFeePerGas == undefined\n      ? parseInt(await cchain.getMaxPriorityFeePerGas(), 16) / 1e9\n      : maxPriorityFeePerGas;\n  maxFeePerGas =\n    maxFeePerGas == undefined ? baseFee + maxPriorityFeePerGas : maxFeePerGas;\n\n  if (maxFeePerGas < maxPriorityFeePerGas) {\n    throw "Error: Max fee per gas cannot be less than max priority fee per gas";\n  }\n\n  return {\n    maxFeePerGas: maxFeePerGas.toString(),\n    maxPriorityFeePerGas: maxPriorityFeePerGas.toString(),\n  };\n};\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Actual API returns base fee and priority fee in units of ",(0,t.jsx)(n.code,{children:"wei"})," which is\none-billionth of a billionth of ",(0,t.jsx)(n.code,{children:"LUX"})," (1 LUX = 10^18 wei)."]}),"\n",(0,t.jsx)(n.h2,{id:"function-to-create-sign-and-send-transaction",children:"Function to Create, Sign and Send Transaction"}),"\n",(0,t.jsxs)(n.p,{children:["The function ",(0,t.jsx)(n.code,{children:"sendLux()"})," takes 4 arguments -"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"amount"})," - Amount of LUX to send in the transaction"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"address"})," - Destination address to which we want to send LUX"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"maxFeePerGas"})," - Desired maximum fee per gas you want to pay in nLUX"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"maxPriorityFeePerGas"})," - Desired maximum priority fee per gas you want to pay in nLUX"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"nonce"})," - Used as a differentiator for more than 1 transaction with same signer"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The last 3 arguments are optional, and if ",(0,t.jsx)(n.code,{children:"undefined"})," is passed, then it will\nuse the ",(0,t.jsx)(n.code,{children:"calcFeeData()"})," function to estimate them. Each transaction with the\nsame data and parameters is differentiated by a nonce value. If there are more\nthan 1 transactions with the same nonce signed by the same address, then only 1\nof them with the highest effective priority fee will be accepted. ",(0,t.jsx)(n.code,{children:"nonce"}),"\nparameter should only be used when you are either re-issuing or cancelling a\nstuck transaction."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Function to send LUX\nconst sendLux = async (\n  amount,\n  to,\n  maxFeePerGas = undefined,\n  maxPriorityFeePerGas = undefined,\n  nonce = undefined\n) => {\n  if (nonce == undefined) {\n    nonce = await HTTPSProvider.getTransactionCount(address);\n  }\n\n  // If the max fee or max priority fee is not provided, then it will automatically calculate using CChain APIs\n  ({ maxFeePerGas, maxPriorityFeePerGas } = await calcFeeData(\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  ));\n\n  maxFeePerGas = ethers.utils.parseUnits(maxFeePerGas, "gwei");\n  maxPriorityFeePerGas = ethers.utils.parseUnits(maxPriorityFeePerGas, "gwei");\n\n  // Type 2 transaction is for EIP1559\n  const tx = {\n    type: 2,\n    nonce,\n    to,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    value: ethers.utils.parseEther(amount),\n    chainId,\n  };\n\n  tx.gasLimit = await HTTPSProvider.estimateGas(tx);\n\n  const signedTx = await wallet.signTransaction(tx);\n  const txHash = ethers.utils.keccak256(signedTx);\n\n  console.log("Sending signed transaction");\n\n  // Sending a signed transaction and waiting for its inclusion\n  await (await HTTPSProvider.sendTransaction(signedTx)).wait();\n\n  console.log(\n    `View transaction with nonce ${nonce}: https://testnet.snowtrace.io/tx/${txHash}`\n  );\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"This function calculates transaction hash from the signed transaction and logs\non the console, the URL for transaction status on the Snowtrace explorer."}),"\n",(0,t.jsxs)(n.h2,{id:"calling-the-sendlux-function",children:["Calling the ",(0,t.jsx)(n.code,{children:"sendLUX()"})," Function"]}),"\n",(0,t.jsx)(n.p,{children:"There are various ways to call this function. We may or may not pass the\noptional arguments like max fee and max priority fee. It is recommended to set\nthe max fee as the maximum price per gas that you are willing to pay for a\ntransaction, no matter how high or low the base fee will be, as at max you will\nonly be charged the provided max fee, along with a small priority fee above the\nbase fee."}),"\n",(0,t.jsx)(n.p,{children:"If you do not pass these arguments, then it will automatically estimate the max\nfee and priority fee from the network. For example, let's say, I want to pay 100\nnLUX per gas for a transaction and a small tip of 2 nLUX, then we will call\nthe following function."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// setting max fee as 100 and priority fee as 2\nsendLux("0.01", "0x856EA4B78947c3A5CD2256F85B2B147fEBDb7124", 100, 2);\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"This function should not be used without a max fee per gas. As you will have\nto pay the estimated price, even if it is higher than your budget."})}),"\n",(0,t.jsx)(n.p,{children:"There could be the following cases -"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Max Fee"}),(0,t.jsx)(n.th,{children:"Max Priority Fee"}),(0,t.jsx)(n.th,{children:"Comment"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"undefined"})}),(0,t.jsx)(n.td,{children:"2"}),(0,t.jsxs)(n.td,{children:["It will calculate the max fee by adding the provided priority fee with the estimated base fee. Take extra precaution here as the max fee will now be capped by ",(0,t.jsx)(n.code,{children:"baseFee + priorityFee"}),", which can consume all the provided priority fees."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"100"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"undefined"})}),(0,t.jsx)(n.td,{children:"It will estimate the priority fee and use the provided max fee. If the estimated priority fee is more than the provided max fee, then it throws an error."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"undefined"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"undefined"})}),(0,t.jsx)(n.td,{children:"It will estimate the base fee and priority fee from the network, and will add both the values to calculate the max fee per gas. Again, you have to pay whatever will be estimated."})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"You will get the following output on the successful submission of the signed\ntransactions. Using this URL you can view the status of your transaction on\nSnowtrace."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"View transaction with nonce 25: https://testnet.snowtrace.io/tx/0xd5b92b85beaf283fbaeeefb95c9a17a6b346a05b6f9687f2d6e421aa79243b35\n"})}),"\n",(0,t.jsx)(n.h2,{id:"reissuance-of-stuck-transaction",children:"Reissuance of Stuck Transaction"}),"\n",(0,t.jsx)(n.p,{children:"Sometimes during high network activity, all transactions couldn't make it to the\nlatest blocks for a long time, due to relatively lower effective tip than the\nother transactions in the pool. We can either re-issue the same transaction with\na higher priority fee or cancel the transaction. To re-issue the stuck\ntransaction, you can send a new one with same amount and data but higher\npriority fee and same nonce value as the stuck transaction. The transaction with\nlower effective tip will automatically be rejected (due to same nonce), and you\ndo not need to worry about it. You can also cancel the stuck transaction, by\nkeeping the amount to 0, with a higher priority fee and same nonce. Let's say,\nthe above transaction with a nonce value of 25 has stuck. You can then re-issue\na new transaction with same nonce, but higher priority fee this time."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// reissuing transaction with nonce 25\nsendLux("0.01", "0x856EA4B78947c3A5CD2256F85B2B147fEBDb7124", 100, 10, 25);\n\n// cancelling transaction with nonce 25\nsendLux("0", "0x856EA4B78947c3A5CD2256F85B2B147fEBDb7124", 100, 10, 25);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"You have learned about creating, signing, and sending transactions with dynamic\nfee parameters to the C-Chain of Lux network using JavaScript. It also\nexplained, how to re-issue or cancel a stuck transaction, by sending a\ntransaction with the same nonce. This tutorial points out the recommended way\nfor choosing max fee cap and max priority fee cap for transactions and can also\nwork as a general guide for all the EVM-based chains."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},43540:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var t=i(48318);const a={},s=t.createContext(a);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);