"use strict";(self.webpackChunk_luxdocs_network=self.webpackChunk_luxdocs_network||[]).push([[5911],{15250:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});var n=t(49214),i=t(43540);const o={tags:["Nodes"],description:"Reference for all available Subnet config options and flags.",sidebar_label:"Subnet Configs",pagination_label:"Subnet Configs",sidebar_position:2},l="Subnet Configs",r={id:"nodes/configure/subnet-configs",title:"Subnet Configs",description:"Reference for all available Subnet config options and flags.",source:"@site/docs/nodes/configure/subnet-configs.md",sourceDirName:"nodes/configure",slug:"/nodes/configure/subnet-configs",permalink:"/docs/nodes/configure/subnet-configs",draft:!1,unlisted:!1,editUrl:"https://github.com/luxfi/docs/edit/main/docs/nodes/configure/subnet-configs.md",tags:[{label:"Nodes",permalink:"/docs/tags/nodes"}],version:"current",sidebarPosition:2,frontMatter:{tags:["Nodes"],description:"Reference for all available Subnet config options and flags.",sidebar_label:"Subnet Configs",pagination_label:"Subnet Configs",sidebar_position:2},sidebar:"nodes",previous:{title:"Chain Configs",permalink:"/docs/nodes/configure/chain-config-flags"},next:{title:"What Is Staking?",permalink:"/docs/nodes/validate/what-is-staking"}},d={},a=[{value:"Parameters",id:"parameters",level:2},{value:"Private Subnet",id:"private-subnet",level:3},{value:"<code>validatorOnly</code> (bool)",id:"validatoronly-bool",level:4},{value:"<code>allowedNodes</code> (string list)",id:"allowednodes-string-list",level:4},{value:"<code>proposerMinBlockDelay</code> (duration)",id:"proposerminblockdelay-duration",level:4},{value:"Consensus Parameters",id:"consensus-parameters",level:3},{value:"Gossip Configs",id:"gossip-configs",level:3}];function c(e){const s={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"subnet-configs",children:"Subnet Configs"}),"\n",(0,n.jsx)(s.p,{children:"It is possible to provide parameters for a Subnet. Parameters here apply to all\nchains in the specified Subnet."}),"\n",(0,n.jsxs)(s.p,{children:["Luxd looks for files specified with ",(0,n.jsx)(s.code,{children:"{subnetID}.json"})," under\n",(0,n.jsx)(s.code,{children:"--subnet-config-dir"})," as documented\n",(0,n.jsx)(s.a,{href:"/docs/nodes/configure/luxd-config-flags#subnet-configs",children:"here"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"Here is an example of Subnet config file:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-json",children:'{\n  "validatorOnly": false,\n  "consensusParameters": {\n    "k": 25,\n    "alpha": 18\n  },\n  "appGossipNonValidatorSize": 10\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(s.h3,{id:"private-subnet",children:"Private Subnet"}),"\n",(0,n.jsxs)(s.h4,{id:"validatoronly-bool",children:[(0,n.jsx)(s.code,{children:"validatorOnly"})," (bool)"]}),"\n",(0,n.jsxs)(s.p,{children:["If ",(0,n.jsx)(s.code,{children:"true"})," this node does not expose Subnet blockchain contents to non-validators\nvia P2P messages. Defaults to ",(0,n.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"Lux Subnets are public by default. It means that every node can sync and\nlisten ongoing transactions/blocks in Subnets, even they're not validating the\nlistened Subnet."}),"\n",(0,n.jsxs)(s.p,{children:["Subnet validators can choose not to publish contents of blockchains via this\nconfiguration. If a node sets ",(0,n.jsx)(s.code,{children:"validatorOnly"})," to true, the node exchanges\nmessages only with this Subnet's validators. Other peers will not be able to\nlearn contents of this Subnet from this node."]}),"\n",(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsx)(s.p,{children:"This is a node-specific configuration. Every validator of this Subnet has to use\nthis configuration in order to create a full private Subnet."})}),"\n",(0,n.jsxs)(s.h4,{id:"allowednodes-string-list",children:[(0,n.jsx)(s.code,{children:"allowedNodes"})," (string list)"]}),"\n",(0,n.jsxs)(s.p,{children:["If ",(0,n.jsx)(s.code,{children:"validatorOnly=true"})," this allows explicitly specified NodeIDs to be allowed\nto sync the Subnet regardless of validator status. Defaults to be empty."]}),"\n",(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsx)(s.p,{children:"This is a node-specific configuration. Every validator of this Subnet has to use\nthis configuration in order to properly allow a node in the private Subnet."})}),"\n",(0,n.jsxs)(s.h4,{id:"proposerminblockdelay-duration",children:[(0,n.jsx)(s.code,{children:"proposerMinBlockDelay"})," (duration)"]}),"\n",(0,n.jsx)(s.p,{children:"The minimum delay performed when building snowman++ blocks. Default is set to 1 second."}),"\n",(0,n.jsxs)(s.p,{children:["As one of the ways to control network congestion, Snowman++ will only build a\nblock ",(0,n.jsx)(s.code,{children:"proposerMinBlockDelay"})," after the parent block's timestamp. Some\nhigh-performance custom VM may find this too strict. This flag allows tuning the\nfrequency at which blocks are built."]}),"\n",(0,n.jsx)(s.h3,{id:"consensus-parameters",children:"Consensus Parameters"}),"\n",(0,n.jsxs)(s.p,{children:["Subnet configs supports loading new consensus parameters. JSON keys are\ndifferent from their matching ",(0,n.jsx)(s.code,{children:"CLI"})," keys. These parameters must be grouped under\n",(0,n.jsx)(s.code,{children:"consensusParameters"})," key. The consensus parameters of a Subnet default to the\nsame values used for the Primary Network, which are given ",(0,n.jsx)(s.a,{href:"/docs/nodes/configure/luxd-config-flags#snow-parameters",children:"CLI Snow Parameters"}),"."]}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"CLI Key"}),(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"JSON Key"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--snow-sample-size"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"k"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--snow-quorum-size"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"alpha"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--snow-virtuous-commit-threshold"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.code,{children:"betaVirtuous"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--snow-rogue-commit-threshold"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.code,{children:"betaRogue"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--snow-concurrent-repolls"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"concurrentRepolls"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--snow-optimal-processing"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.code,{children:"optimalProcessing"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--snow-max-processing"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"maxOutstandingItems"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--snow-max-time-processing"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"maxItemProcessingTime"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--snow-batch-size"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.code,{children:"batchSize"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--snow-num-parents"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.code,{children:"parentSize"})})]})]})]}),"\n",(0,n.jsx)(s.h3,{id:"gossip-configs",children:"Gossip Configs"}),"\n",(0,n.jsxs)(s.p,{children:["It's possible to define different Gossip configurations for each Subnet without\nchanging values for Primary Network. For example in Primary Network transaction\nmempools are not gossiped to non-validators\n(",(0,n.jsx)(s.code,{children:"--consensus-app-gossip-non-validator-size"})," is ",(0,n.jsx)(s.code,{children:"0"}),"). You can change this for\nyour Subnet and share mempool with non-validators as well. JSON keys of these\nparameters are different from their matching ",(0,n.jsx)(s.code,{children:"CLI"})," keys. These parameters\ndefault to the same values used for the Primary Network. For more information\nsee ",(0,n.jsx)(s.a,{href:"/docs/nodes/configure/luxd-config-flags#gossiping",children:"CLI Gossip Configs"}),"."]}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"CLI Key"}),(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"JSON Key"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--consensus-accepted-frontier-gossip-validator-size"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"gossipAcceptedFrontierValidatorSize"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--consensus-accepted-frontier-gossip-non-validator-size"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"gossipAcceptedFrontierNonValidatorSize"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--consensus-accepted-frontier-gossip-peer-size"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"gossipAcceptedFrontierPeerSize"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--consensus-on-accept-gossip-validator-size"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"gossipOnAcceptValidatorSize"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--consensus-on-accept-gossip-non-validator-size"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"gossipOnAcceptNonValidatorSize"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--consensus-on-accept-gossip-peer-size"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"gossipOnAcceptPeerSize"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--consensus-app-gossip-validator-size"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"appGossipValidatorSize"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--consensus-app-gossip-non-validator-size"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"appGossipNonValidatorSize"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"--consensus-app-gossip-peer-size"}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"appGossipPeerSize"})]})]})]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},43540:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>r});var n=t(48318);const i={},o=n.createContext(i);function l(e){const s=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(o.Provider,{value:s},e.children)}}}]);