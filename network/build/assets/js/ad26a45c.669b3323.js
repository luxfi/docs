"use strict";(self.webpackChunk_luxdocs_network=self.webpackChunk_luxdocs_network||[]).push([[8883],{70572:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var i=t(49214),a=t(43540);const s={tags:["Standards"],description:"This document specifies the changes in Lux Banff, which was released in Luxd v1.10.0.",sidebar_label:"Banff Changes",pagination_label:"Banff Changes",sidebar_position:3},r="Banff Changes",o={id:"reference/standards/guides/banff-changes",title:"Banff Changes",description:"This document specifies the changes in Lux Banff, which was released in Luxd v1.10.0.",source:"@site/docs/reference/standards/guides/banff-changes.md",sourceDirName:"reference/standards/guides",slug:"/reference/standards/guides/banff-changes",permalink:"/docs/reference/standards/guides/banff-changes",draft:!1,unlisted:!1,editUrl:"https://github.com/luxfi/docs/edit/main/docs/reference/standards/guides/banff-changes.md",tags:[{label:"Standards",permalink:"/docs/tags/standards"}],version:"current",sidebarPosition:3,frontMatter:{tags:["Standards"],description:"This document specifies the changes in Lux Banff, which was released in Luxd v1.10.0.",sidebar_label:"Banff Changes",pagination_label:"Banff Changes",sidebar_position:3},sidebar:"reference",previous:{title:"X-Chain Migration Guide - Lux Cortina",permalink:"/docs/reference/standards/guides/x-chain-migration"},next:{title:"Flow of a Single Blockchain",permalink:"/docs/reference/standards/guides/blockchain-flow"}},l={},d=[{value:"Block Changes",id:"block-changes",level:2},{value:"Apricot",id:"apricot",level:3},{value:"Banff",id:"banff",level:3},{value:"New Transactions",id:"new-transactions",level:3},{value:"RemoveSubnetValidatorTx",id:"removesubnetvalidatortx",level:4},{value:"TransformSubnetTx",id:"transformsubnettx",level:4},{value:"AddPermissionlessValidatorTx",id:"addpermissionlessvalidatortx",level:4},{value:"AddPermissionlessDelegatorTx",id:"addpermissionlessdelegatortx",level:4},{value:"New TypeIDs",id:"new-typeids",level:4}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"banff-changes",children:"Banff Changes"}),"\n",(0,i.jsx)(n.p,{children:"This document specifies the changes in Lux \u201cBanff\u201d, which was released in Luxd v1.9.x."}),"\n",(0,i.jsx)(n.h2,{id:"block-changes",children:"Block Changes"}),"\n",(0,i.jsx)(n.h3,{id:"apricot",children:"Apricot"}),"\n",(0,i.jsx)(n.p,{children:"Apricot allows the following block types with the following content:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Standard Blocks"})," may contain multiple transactions of the following types:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"CreateChainTx"}),"\n",(0,i.jsx)(n.li,{children:"CreateSubnetTx"}),"\n",(0,i.jsx)(n.li,{children:"ImportTx"}),"\n",(0,i.jsx)(n.li,{children:"ExportTx"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Proposal Blocks"})," may contain a single transaction of the following types:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"AddValidatorTx"}),"\n",(0,i.jsx)(n.li,{children:"AddDelegatorTx"}),"\n",(0,i.jsx)(n.li,{children:"AddSubnetValidatorTx"}),"\n",(0,i.jsx)(n.li,{children:"RewardValidatorTx"}),"\n",(0,i.jsx)(n.li,{children:"AdvanceTimeTx"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Options Blocks"}),", that is ",(0,i.jsx)(n.em,{children:"Commit Block"})," and ",(0,i.jsx)(n.em,{children:"Abort Block"})," do not contain any transactions."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Each block has a header containing:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ParentID"}),"\n",(0,i.jsx)(n.li,{children:"Height"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"banff",children:"Banff"}),"\n",(0,i.jsx)(n.p,{children:"Banff allows the following block types with the following content:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Standard Blocks"})," may contain multiple transactions of the following types:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"CreateChainTx"}),"\n",(0,i.jsx)(n.li,{children:"CreateSubnetTx"}),"\n",(0,i.jsx)(n.li,{children:"ImportTx"}),"\n",(0,i.jsx)(n.li,{children:"ExportTx"}),"\n",(0,i.jsx)(n.li,{children:"AddValidatorTx"}),"\n",(0,i.jsx)(n.li,{children:"AddDelegatorTx"}),"\n",(0,i.jsx)(n.li,{children:"AddSubnetValidatorTx"}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.em,{children:"RemoveSubnetValidatorTx"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.em,{children:"TransformSubnetTx"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.em,{children:"AddPermissionlessValidatorTx"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.em,{children:"AddPermissionlessDelegatorTx"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Proposal Blocks"})," may contain a single transaction of the following types:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"RewardValidatorTx"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Options blocks"}),", that is ",(0,i.jsx)(n.em,{children:"Commit Block"})," and ",(0,i.jsx)(n.em,{children:"Abort Block"})," do not contain any transactions."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Note that each block has an header containing:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ParentID"}),"\n",(0,i.jsx)(n.li,{children:"Height"}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.em,{children:"Time"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"So the two main differences with respect to Apricot are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"AddValidatorTx"}),", ",(0,i.jsx)(n.em,{children:"AddDelegatorTx"}),", ",(0,i.jsx)(n.em,{children:"AddSubnetValidatorTx"})," are included into\nStandard Blocks rather than Proposal Blocks so that they don't need to be\nvoted on (that is followed by a Commit/Abort Block)."]}),"\n",(0,i.jsxs)(n.li,{children:["New Transaction types: ",(0,i.jsx)(n.em,{children:"RemoveSubnetValidatorTx"}),", ",(0,i.jsx)(n.em,{children:"TransformSubnetTx"}),",\n",(0,i.jsx)(n.em,{children:"AddPermissionlessValidatorTx"}),", and ",(0,i.jsx)(n.em,{children:"AddPermissionlessDelegatorTx"})," have been\nadded into Standard Blocks."]}),"\n",(0,i.jsx)(n.li,{children:"Block timestamp is explicitly serialized into block header, to allow chain time update."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"new-transactions",children:"New Transactions"}),"\n",(0,i.jsx)(n.h4,{id:"removesubnetvalidatortx",children:"RemoveSubnetValidatorTx"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type RemoveSubnetValidatorTx struct {\n\tBaseTx `serialize:"true"`\n\t// The node to remove from the subnet.\n\tNodeID ids.NodeID `serialize:"true" json:"nodeID"`\n\t// The subnet to remove the node from.\n\tSubnet ids.ID `serialize:"true" json:"subnet"`\n\t// Proves that the issuer has the right to remove the node from the subnet.\n\tSubnetAuth verify.Verifiable `serialize:"true" json:"subnetAuthorization"`\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"transformsubnettx",children:"TransformSubnetTx"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type TransformSubnetTx struct {\n\t// Metadata, inputs and outputs\n\tBaseTx `serialize:"true"`\n\t// ID of the Subnet to transform\n\t// Restrictions:\n\t// - Must not be the Primary Network ID\n\tSubnet ids.ID `serialize:"true" json:"subnetID"`\n\t// Asset to use when staking on the Subnet\n\t// Restrictions:\n\t// - Must not be the Empty ID\n\t// - Must not be the LUX ID\n\tAssetID ids.ID `serialize:"true" json:"assetID"`\n\t// Amount to initially specify as the current supply\n\t// Restrictions:\n\t// - Must be > 0\n\tInitialSupply uint64 `serialize:"true" json:"initialSupply"`\n\t// Amount to specify as the maximum token supply\n\t// Restrictions:\n\t// - Must be >= [InitialSupply]\n\tMaximumSupply uint64 `serialize:"true" json:"maximumSupply"`\n\t// MinConsumptionRate is the rate to allocate funds if the validator\'s stake\n\t// duration is 0\n\tMinConsumptionRate uint64 `serialize:"true" json:"minConsumptionRate"`\n\t// MaxConsumptionRate is the rate to allocate funds if the validator\'s stake\n\t// duration is equal to the minting period\n\t// Restrictions:\n\t// - Must be >= [MinConsumptionRate]\n\t// - Must be <= [reward.PercentDenominator]\n\tMaxConsumptionRate uint64 `serialize:"true" json:"maxConsumptionRate"`\n\t// MinValidatorStake is the minimum amount of funds required to become a\n\t// validator.\n\t// Restrictions:\n\t// - Must be > 0\n\t// - Must be <= [InitialSupply]\n\tMinValidatorStake uint64 `serialize:"true" json:"minValidatorStake"`\n\t// MaxValidatorStake is the maximum amount of funds a single validator can\n\t// be allocated, including delegated funds.\n\t// Restrictions:\n\t// - Must be >= [MinValidatorStake]\n\t// - Must be <= [MaximumSupply]\n\tMaxValidatorStake uint64 `serialize:"true" json:"maxValidatorStake"`\n\t// MinStakeDuration is the minimum number of seconds a staker can stake for.\n\t// Restrictions:\n\t// - Must be > 0\n\tMinStakeDuration uint32 `serialize:"true" json:"minStakeDuration"`\n\t// MaxStakeDuration is the maximum number of seconds a staker can stake for.\n\t// Restrictions:\n\t// - Must be >= [MinStakeDuration]\n\t// - Must be <= [GlobalMaxStakeDuration]\n\tMaxStakeDuration uint32 `serialize:"true" json:"maxStakeDuration"`\n\t// MinDelegationFee is the minimum percentage a validator must charge a\n\t// delegator for delegating.\n\t// Restrictions:\n\t// - Must be <= [reward.PercentDenominator]\n\tMinDelegationFee uint32 `serialize:"true" json:"minDelegationFee"`\n\t// MinDelegatorStake is the minimum amount of funds required to become a\n\t// delegator.\n\t// Restrictions:\n\t// - Must be > 0\n\tMinDelegatorStake uint64 `serialize:"true" json:"minDelegatorStake"`\n\t// MaxValidatorWeightFactor is the factor which calculates the maximum\n\t// amount of delegation a validator can receive.\n\t// Note: a value of 1 effectively disables delegation.\n\t// Restrictions:\n\t// - Must be > 0\n\tMaxValidatorWeightFactor byte `serialize:"true" json:"maxValidatorWeightFactor"`\n\t// UptimeRequirement is the minimum percentage a validator must be online\n\t// and responsive to receive a reward.\n\t// Restrictions:\n\t// - Must be <= [reward.PercentDenominator]\n\tUptimeRequirement uint32 `serialize:"true" json:"uptimeRequirement"`\n\t// Authorizes this transformation\n\tSubnetAuth verify.Verifiable `serialize:"true" json:"subnetAuthorization"`\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"addpermissionlessvalidatortx",children:"AddPermissionlessValidatorTx"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type AddPermissionlessValidatorTx struct {\n\t// Metadata, inputs and outputs\n\tBaseTx `serialize:"true"`\n\t// Describes the validator\n\tValidator validator.Validator `serialize:"true" json:"validator"`\n\t// ID of the subnet this validator is validating\n\tSubnet ids.ID `serialize:"true" json:"subnet"`\n\t// Where to send staked tokens when done validating\n\tStakeOuts []*lux.TransferableOutput `serialize:"true" json:"stake"`\n\t// Where to send validation rewards when done validating\n\tValidatorRewardsOwner fx.Owner `serialize:"true" json:"validationRewardsOwner"`\n\t// Where to send delegation rewards when done validating\n\tDelegatorRewardsOwner fx.Owner `serialize:"true" json:"delegationRewardsOwner"`\n\t// Fee this validator charges delegators as a percentage, times 10,000\n\t// For example, if this validator has DelegationShares=300,000 then they\n\t// take 30% of rewards from delegators\n\tDelegationShares uint32 `serialize:"true" json:"shares"`\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"addpermissionlessdelegatortx",children:"AddPermissionlessDelegatorTx"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type AddPermissionlessDelegatorTx struct {\n\t// Metadata, inputs and outputs\n\tBaseTx `serialize:"true"`\n\t// Describes the validator\n\tValidator validator.Validator `serialize:"true" json:"validator"`\n\t// ID of the subnet this validator is validating\n\tSubnet ids.ID `serialize:"true" json:"subnet"`\n\t// Where to send staked tokens when done validating\n\tStake []*lux.TransferableOutput `serialize:"true" json:"stake"`\n\t// Where to send staking rewards when done validating\n\tRewardsOwner fx.Owner `serialize:"true" json:"rewardsOwner"`\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"new-typeids",children:"New TypeIDs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"ApricotProposalBlock = 0\nApricotAbortBlock = 1\nApricotCommitBlock = 2\nApricotStandardBlock = 3\nApricotAtomicBlock = 4\n\nsecp256k1fx.TransferInput = 5\nsecp256k1fx.MintOutput = 6\nsecp256k1fx.TransferOutput = 7\nsecp256k1fx.MintOperation = 8\nsecp256k1fx.Credential = 9\nsecp256k1fx.Input = 10\nsecp256k1fx.OutputOwners = 11\n\nAddValidatorTx = 12\nAddSubnetValidatorTx = 13\nAddDelegatorTx = 14\nCreateChainTx = 15\nCreateSubnetTx = 16\nImportTx = 17\nExportTx = 18\nAdvanceTimeTx = 19\nRewardValidatorTx = 20\n\nstakeable.LockIn = 21\nstakeable.LockOut = 22\n\nRemoveSubnetValidatorTx = 23\nTransformSubnetTx = 24\nAddPermissionlessValidatorTx = 25\nAddPermissionlessDelegatorTx = 26\n\nEmptyProofOfPossession = 27\nBLSProofOfPossession   = 28\n\nBanffProposalBlock = 29\nBanffAbortBlock = 30\nBanffCommitBlock = 31\nBanffStandardBlock = 32\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},43540:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(48318);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);