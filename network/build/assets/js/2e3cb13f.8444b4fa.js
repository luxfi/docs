"use strict";(self.webpackChunk_luxdocs_network=self.webpackChunk_luxdocs_network||[]).push([[3970],{38204:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>h});var s=t(49214),a=t(43540);const i={tags:["Tooling","LuxJS"],description:"LuxJS is a JavaScript Library for interfacing with the Lux platform. It is built using TypeScript and intended to support both browser and Node.js. The LuxJS library allows one to issue commands to the Lux node APIs.",pagination_label:"Send an Asset on the X-Chain",sidebar_label:"Send X-Chain Asset",sidebar_position:5},o="Send an Asset on the X-Chain",r={id:"tooling/luxjs-guides/send-an-asset-on-the-x-chain",title:"Send an Asset on the X-Chain",description:"LuxJS is a JavaScript Library for interfacing with the Lux platform. It is built using TypeScript and intended to support both browser and Node.js. The LuxJS library allows one to issue commands to the Lux node APIs.",source:"@site/docs/tooling/luxjs-guides/send-an-asset-on-the-x-chain.md",sourceDirName:"tooling/luxjs-guides",slug:"/tooling/luxjs-guides/send-an-asset-on-the-x-chain",permalink:"/docs/tooling/luxjs-guides/send-an-asset-on-the-x-chain",draft:!1,unlisted:!1,editUrl:"https://github.com/luxfi/docs/edit/main/docs/tooling/luxjs-guides/send-an-asset-on-the-x-chain.md",tags:[{label:"Tooling",permalink:"/docs/tags/tooling"},{label:"LuxJS",permalink:"/docs/tags/lux-js"}],version:"current",sidebarPosition:5,frontMatter:{tags:["Tooling","LuxJS"],description:"LuxJS is a JavaScript Library for interfacing with the Lux platform. It is built using TypeScript and intended to support both browser and Node.js. The LuxJS library allows one to issue commands to the Lux node APIs.",pagination_label:"Send an Asset on the X-Chain",sidebar_label:"Send X-Chain Asset",sidebar_position:5},sidebar:"tooling",previous:{title:"Create an Asset on the X-Chain",permalink:"/docs/tooling/luxjs-guides/create-an-asset-on-the-x-chain"},next:{title:"Manage X-Chain Keys",permalink:"/docs/tooling/luxjs-guides/manage-x-chain-keys"}},d={},h=[{value:"Getting the UTXO Set",id:"getting-the-utxo-set",level:2},{value:"Spending the UTXOs",id:"spending-the-utxos",level:2},{value:"Get the Status of the Transaction",id:"get-the-status-of-the-transaction",level:2},{value:"Check the Results",id:"check-the-results",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"send-an-asset-on-the-x-chain",children:"Send an Asset on the X-Chain"}),"\n",(0,s.jsx)(n.p,{children:"This example sends an asset in the X-Chain to a single recipient. The first step\nin this process is to create an instance of Lux connected to our Lux\nPlatform endpoint of choice."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Lux, BinTools, Buffer, BN } from "lux"\n\nlet myNetworkID = 1 //default is 3, we want to override that for our local network\nlet myBlockchainID = "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM" // The X-Chain blockchainID on this network\nlet lux = new lux.Lux(\n  "localhost",\n  9650,\n  "http",\n  myNetworkID,\n  myBlockchainID\n)\nlet xchain = lux.XChain() //returns a reference to the X-Chain used by LuxJS\n'})}),"\n",(0,s.jsx)(n.p,{children:"We\u2019re also assuming that the keystore contains a list of addresses used in this transaction."}),"\n",(0,s.jsx)(n.h2,{id:"getting-the-utxo-set",children:"Getting the UTXO Set"}),"\n",(0,s.jsx)(n.p,{children:"The X-Chain stores all available balances in a data store called Unspent\nTransaction Outputs (UTXOs). A UTXO Set is the unique list of outputs produced\nby transactions, addresses that can spend those outputs, and other variables\nsuch as lockout times (a timestamp after which the output can be spent) and\nthresholds (how many signers are required to spend the output)."}),"\n",(0,s.jsx)(n.p,{children:"For the case of this example, we\u2019re going to create a simple transaction that\nspends an amount of available coins and sends it to a single address without any\nrestrictions. The management of the UTXOs will mostly be abstracted away."}),"\n",(0,s.jsx)(n.p,{children:"However, we do need to get the UTXO Set for the addresses we\u2019re managing."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"let myAddresses = xchain.keyChain().getAddresses() //returns an array of addresses the KeyChain manages\nlet addressStrings = xchain.keyChain().getAddressStrings() //returns an array of addresses the KeyChain manages as strings\nlet utxos = (await xchain.getUTXOs(myAddresses)).utxos\n"})}),"\n",(0,s.jsx)(n.h2,{id:"spending-the-utxos",children:"Spending the UTXOs"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"buildBaseTx()"})," helper function sends a single asset type. We have a\nparticular assetID whose coins we want to send to a recipient address. This is\nan imaginary asset for this example which we believe to have 400 coins. Let\u2019s\nverify that we have the funds available for the transaction."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'let assetid = "23wKfz3viWLmjWo2UZ7xWegjvnZFenGAVkouwQCeB9ubPXodG6" //avaSerialized string\nlet mybalance = utxos.getBalance(myAddresses, assetid) //returns 400 as a BN\n'})}),"\n",(0,s.jsx)(n.p,{children:"We have 400 coins! We\u2019re going to now send 100 of those coins to our friend\u2019s address."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'let sendAmount = new BN(100) //amounts are in BN format\nlet friendsAddress = "X-lux1k26jvfdzyukms95puxcceyzsa3lzwf5ftt0fjk" // address format is Bech32\n\n//The below returns a UnsignedTx\n//Parameters sent are (in order of appearance):\n//   * The UTXO Set\n//   * The amount being sent as a BN\n//   * An array of addresses to send the funds\n//   * An array of addresses sending the funds\n//   * An array of addresses any leftover funds are sent\n//   * The AssetID of the funds being sent\nlet unsignedTx = await xchain.buildBaseTx(\n  utxos,\n  sendAmount,\n  [friendsAddress],\n  addressStrings,\n  addressStrings,\n  assetid\n)\nlet signedTx = unsignedTx.sign(myKeychain)\nlet txid = await xchain.issueTx(signedTx)\n'})}),"\n",(0,s.jsx)(n.p,{children:"And the transaction is sent!"}),"\n",(0,s.jsx)(n.h2,{id:"get-the-status-of-the-transaction",children:"Get the Status of the Transaction"}),"\n",(0,s.jsx)(n.p,{children:"Now that we sent the transaction to the network, it takes a few seconds to\ndetermine if the transaction has gone through. We can get an updated status on\nthe transaction using the TxID through the X-Chain."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'// returns one of: "Accepted", "Processing", "Unknown", and "Rejected"\nlet status = await xchain.getTxStatus(txid)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The statuses can be one of ",(0,s.jsx)(n.code,{children:"Accepted"}),", ",(0,s.jsx)(n.code,{children:"Processing"}),", ",(0,s.jsx)(n.code,{children:"Unknown"}),", and ",(0,s.jsx)(n.code,{children:"Rejected"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'"Accepted" indicates that the transaction has been accepted as valid by the network and executed'}),"\n",(0,s.jsx)(n.li,{children:'"Processing" indicates that the transaction is being voted on.'}),"\n",(0,s.jsx)(n.li,{children:'"Unknown" indicates that node knows nothing about the transaction, indicating\nthe node doesn\u2019t have it'}),"\n",(0,s.jsx)(n.li,{children:'"Rejected" indicates the node knows about the transaction, but it conflicted with an accepted transaction'}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"check-the-results",children:"Check the Results"}),"\n",(0,s.jsxs)(n.p,{children:["The transaction finally came back as ",(0,s.jsx)(n.code,{children:"Accepted"}),", now let\u2019s update the UTXOSet\nand verify that the transaction balance is as we expected."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Note: In a real network the balance isn\u2019t guaranteed to match this scenario.\nTransaction fees or additional spends may vary the balance. For the purpose of\nthis example, we assume neither of those cases."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'let updatedUTXOs = await xchain.getUTXOs()\nlet newBalance = updatedUTXOs.getBalance(myAddresses, assetid)\nif (newBalance.toNumber() != mybalance.sub(sendAmount).toNumber()) {\n  throw Error("heyyy these should equal!")\n}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},43540:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(48318);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);