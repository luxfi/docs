"use strict";(self.webpackChunk_luxdocs_network=self.webpackChunk_luxdocs_network||[]).push([[9786],{67257:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var s=i(49214),t=i(43540);const a={tags:["Build","Subnets"],description:"How to customize a Subnet by utilizing Genesis, Precompile, and Blockchain Configs.",sidebar_label:"Customize a Subnet",pagination_label:"Customize your EVM-Powered Subnet",sidebar_position:1},o="Customize Your EVM-Powered Subnet",c={id:"build/subnet/upgrade/customize-a-subnet",title:"Customize Your EVM-Powered Subnet",description:"How to customize a Subnet by utilizing Genesis, Precompile, and Blockchain Configs.",source:"@site/docs/build/subnet/upgrade/customize-a-subnet.md",sourceDirName:"build/subnet/upgrade",slug:"/build/subnet/upgrade/customize-a-subnet",permalink:"/docs/build/subnet/upgrade/customize-a-subnet",draft:!1,unlisted:!1,editUrl:"https://github.com/luxfi/docs/edit/main/docs/build/subnet/upgrade/customize-a-subnet.md",tags:[{label:"Build",permalink:"/docs/tags/build"},{label:"Subnets",permalink:"/docs/tags/subnets"}],version:"current",sidebarPosition:1,frontMatter:{tags:["Build","Subnets"],description:"How to customize a Subnet by utilizing Genesis, Precompile, and Blockchain Configs.",sidebar_label:"Customize a Subnet",pagination_label:"Customize your EVM-Powered Subnet",sidebar_position:1},sidebar:"build-subnet",previous:{title:"Key Considerations When Upgrading a Subnet",permalink:"/docs/build/subnet/upgrade/considerations-subnet-upgrade"},next:{title:"Upgrade a Subnet's Virtual Machine",permalink:"/docs/build/subnet/upgrade/upgrade-subnet-vm"}},r={},l=[{value:"Subnet Configs",id:"subnet-configs",level:2},{value:"Genesis",id:"genesis",level:2},{value:"Chain Config",id:"chain-config",level:3},{value:"Hard Forks",id:"hard-forks",level:4},{value:"Fee Config",id:"fee-config",level:4},{value:"Custom Fee Recipients",id:"custom-fee-recipients",level:4},{value:"Alloc",id:"alloc",level:3},{value:"Header",id:"header",level:3},{value:"Genesis Examples",id:"genesis-examples",level:3},{value:"Setting the Genesis Allocation",id:"setting-the-genesis-allocation",level:3},{value:"Setting a Custom Fee Recipient",id:"setting-a-custom-fee-recipient",level:3},{value:"Fee Recipient Address",id:"fee-recipient-address",level:4},{value:"Precompiles",id:"precompiles",level:2},{value:"AllowList Interface",id:"allowlist-interface",level:3},{value:"Restricting Smart Contract Deployers",id:"restricting-smart-contract-deployers",level:3},{value:"Initial Contract Allow List Configuration",id:"initial-contract-allow-list-configuration",level:4},{value:"Restricting Who Can Submit Transactions",id:"restricting-who-can-submit-transactions",level:3},{value:"Initial TX Allow List Configuration",id:"initial-tx-allow-list-configuration",level:4},{value:"Minting Native Coins",id:"minting-native-coins",level:3},{value:"Initial Native Minter Configuration",id:"initial-native-minter-configuration",level:4},{value:"Configuring Dynamic Fees",id:"configuring-dynamic-fees",level:3},{value:"Initial Fee Config Configuration",id:"initial-fee-config-configuration",level:4},{value:"Changing Fee Reward Mechanisms",id:"changing-fee-reward-mechanisms",level:3},{value:"Initial Configuration",id:"initial-configuration",level:4},{value:"Contract Examples",id:"contract-examples",level:2},{value:"Network Upgrades: Enable/Disable Precompiles",id:"network-upgrades-enabledisable-precompiles",level:2},{value:"Example",id:"example",level:3},{value:"Initial Precompile Configurations",id:"initial-precompile-configurations",level:3},{value:"Luxd Chain Configs",id:"luxd-chain-configs",level:2},{value:"Priority Regossip",id:"priority-regossip",level:3},{value:"Fee Recipient",id:"fee-recipient",level:3},{value:"Network Upgrades: State Upgrades",id:"network-upgrades-state-upgrades",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"customize-your-evm-powered-subnet",children:"Customize Your EVM-Powered Subnet"}),"\n",(0,s.jsxs)(n.p,{children:["All Subnets can be customized by utilizing ",(0,s.jsx)(n.a,{href:"#subnet-configs",children:(0,s.jsx)(n.code,{children:"Subnet Configs"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["A Subnet can have one or more blockchains. For example, the Primary Network, which is a Subnet, a\nspecial one nonetheless, has 3 blockchains. Each chain can be further customized using chain specific\nconfiguration file. See ",(0,s.jsx)(n.a,{href:"/docs/nodes/configure/chain-config-flags",children:"here"})," for detailed explanation."]}),"\n",(0,s.jsxs)(n.p,{children:["A blockchain created by or forked from ",(0,s.jsx)(n.a,{href:"https://github.com/luxfi/subnet-evm",children:"Subnet-EVM"})," can be\ncustomized by utilizing one or more of the following methods:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#genesis",children:"Genesis"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#precompiles",children:"Precompile"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#network-upgrades-enabledisable-precompiles",children:"Upgrade Configs"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#luxd-chain-configs",children:"Chain Configs"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"subnet-configs",children:"Subnet Configs"}),"\n",(0,s.jsx)(n.p,{children:"A Subnet can customized by setting parameters for the following:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/nodes/configure/subnet-configs#validatoronly-bool",children:"Validator-only communication to create a private Subnet"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/nodes/configure/subnet-configs#consensus-parameters",children:"Consensus"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/nodes/configure/subnet-configs#gossip-configs",children:"Gossip"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"/docs/nodes/configure/subnet-configs",children:"here"})," for more info."]}),"\n",(0,s.jsx)(n.h2,{id:"genesis",children:"Genesis"}),"\n",(0,s.jsx)(n.p,{children:"Each blockchain has some genesis state when it\u2019s created. Each Virtual Machine defines the format and\nsemantics of its genesis data."}),"\n",(0,s.jsx)(n.p,{children:"The default genesis Subnet-EVM provided below has some well defined parameters:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "config": {\n    "chainId": 43214,\n    "homesteadBlock": 0,\n    "eip150Block": 0,\n    "eip150Hash": "0x2086799aeebeae135c246c65021c82b4e15a2c451340993aacfd2751886514f0",\n    "eip155Block": 0,\n    "eip158Block": 0,\n    "byzantiumBlock": 0,\n    "constantinopleBlock": 0,\n    "petersburgBlock": 0,\n    "istanbulBlock": 0,\n    "muirGlacierBlock": 0,\n    "subnetEVMTimestamp": 0,\n    "feeConfig": {\n      "gasLimit": 15000000,\n      "minBaseFee": 25000000000,\n      "targetGas": 15000000,\n      "baseFeeChangeDenominator": 36,\n      "minBlockGasCost": 0,\n      "maxBlockGasCost": 1000000,\n      "targetBlockRate": 2,\n      "blockGasCostStep": 200000\n    },\n    "allowFeeRecipients": false\n  },\n  "alloc": {\n    "8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC": {\n      "balance": "0x295BE96E64066972000000"\n    }\n  },\n  "nonce": "0x0",\n  "timestamp": "0x0",\n  "extraData": "0x00",\n  "gasLimit": "0xe4e1c0",\n  "difficulty": "0x0",\n  "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",\n  "coinbase": "0x0000000000000000000000000000000000000000",\n  "number": "0x0",\n  "gasUsed": "0x0",\n  "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"chain-config",children:"Chain Config"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"chainID"}),": Denotes the ChainID of to be created chain. Must be picked carefully since a conflict with\nother chains can cause issues. One suggestion is to check with ",(0,s.jsx)(n.a,{href:"https://chainlist.org/",children:"chainlist.org"}),"\nto avoid ID collision, reserve and publish your ChainID properly."]}),"\n",(0,s.jsxs)(n.p,{children:["You can use ",(0,s.jsx)(n.code,{children:"eth_getChainConfig"})," RPC call to get the current chain config. See\n",(0,s.jsx)(n.a,{href:"/reference/subnet-evm/api#ethgetchainconfig",children:"here"})," for more info."]}),"\n",(0,s.jsx)(n.h4,{id:"hard-forks",children:"Hard Forks"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"homesteadBlock"}),", ",(0,s.jsx)(n.code,{children:"eip150Block"}),", ",(0,s.jsx)(n.code,{children:"eip150Hash"}),", ",(0,s.jsx)(n.code,{children:"eip155Block"}),", ",(0,s.jsx)(n.code,{children:"byzantiumBlock"}),", ",(0,s.jsx)(n.code,{children:"constantinopleBlock"}),",\n",(0,s.jsx)(n.code,{children:"petersburgBlock"}),", ",(0,s.jsx)(n.code,{children:"istanbulBlock"}),", ",(0,s.jsx)(n.code,{children:"muirGlacierBlock"}),", ",(0,s.jsx)(n.code,{children:"subnetEVMTimestamp"})," are hard fork activation\ntimes. Changing these may cause issues, so treat them carefully."]}),"\n",(0,s.jsx)(n.h4,{id:"fee-config",children:"Fee Config"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gasLimit"}),": Sets the max amount of gas consumed per block. This restriction puts a cap on the\namount of computation that can be done in a single block, which in turn sets a limit on the\nmaximum gas usage allowed for a single transaction.\nFor reference, C-Chain value is set to ",(0,s.jsx)(n.code,{children:"15,000,000"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"targetBlockRate"}),": Sets the target rate of block production in seconds. A target of 2 will target\nproducing a block every 2 seconds. If the network starts producing blocks at a faster rate, it\nindicates that more blocks than anticipated are being issued to the network, resulting in an\nincrease in base fees.\nFor C-chain this value is set to ",(0,s.jsx)(n.code,{children:"2"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"minBaseFee"}),": Sets a lower bound on the EIP-1559 base fee of a block. Since the block's base fee sets\nthe minimum gas price for any transaction included in that block, this effectively sets a minimum gas\nprice for any transaction."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"targetGas"}),": Specifies the targeted amount of gas (including block gas cost) to consume within a\nrolling 10-seconds window. When the dynamic fee algorithm observes that network activity is\nabove/below the ",(0,s.jsx)(n.code,{children:"targetGas"}),", it increases/decreases the base fee proportionally to how far above/below\nthe target actual network activity is. If the network starts producing blocks with gas cost higher than\nthis, base fees are increased accordingly."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"baseFeeChangeDenominator"}),": Divides the difference between actual and target utilization to determine\nhow much to increase/decrease the base fee. A larger denominator indicates a slower changing, stickier\nbase fee, while a lower denominator allows the base fee to adjust more quickly.\nFor reference, the C-chain value is set to ",(0,s.jsx)(n.code,{children:"36"}),". This value sets the\nbase fee to increase or decrease by a factor of ",(0,s.jsx)(n.code,{children:"1/36"})," of the parent block's\nbase fee."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"minBlockGasCost"}),": Sets the minimum amount of gas to charge for the production of a block.\nThis value is set to ",(0,s.jsx)(n.code,{children:"0"})," in C-Chain."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"maxBlockGasCost"}),": Sets the maximum amount of gas to charge for the production of a block."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"blockGasCostStep"}),": Determines how much to increase/decrease the block gas cost depending on the\namount of time elapsed since the previous block."]}),"\n",(0,s.jsx)(n.p,{children:"If the block is produced at the target rate, the block gas cost will stay the same as the block gas\ncost for the parent block."}),"\n",(0,s.jsx)(n.p,{children:"If it is produced faster/slower, the block gas cost will be increased/decreased by the step value for\neach second faster/slower than the target block rate accordingly."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["If the ",(0,s.jsx)(n.code,{children:"blockGasCostStep"})," is set to a very large number, it effectively requires block production to\ngo no faster than the ",(0,s.jsx)(n.code,{children:"targetBlockRate"}),". For example, if a block is produced two seconds faster than\nthe target block rate, the block gas cost will increase by ",(0,s.jsx)(n.code,{children:"2 * blockGasCostStep"}),"."]})}),"\n",(0,s.jsx)(n.h4,{id:"custom-fee-recipients",children:"Custom Fee Recipients"}),"\n",(0,s.jsxs)(n.p,{children:["See section ",(0,s.jsx)(n.a,{href:"#setting-a-custom-fee-recipient",children:"Setting a Custom Fee Recipient"})]}),"\n",(0,s.jsx)(n.h3,{id:"alloc",children:"Alloc"}),"\n",(0,s.jsxs)(n.p,{children:["See section ",(0,s.jsx)(n.a,{href:"#setting-the-genesis-allocation",children:"Setting the Genesis Allocation"})]}),"\n",(0,s.jsx)(n.h3,{id:"header",children:"Header"}),"\n",(0,s.jsxs)(n.p,{children:["The fields ",(0,s.jsx)(n.code,{children:"nonce"}),", ",(0,s.jsx)(n.code,{children:"timestamp"}),", ",(0,s.jsx)(n.code,{children:"extraData"}),", ",(0,s.jsx)(n.code,{children:"gasLimit"}),", ",(0,s.jsx)(n.code,{children:"difficulty"}),", ",(0,s.jsx)(n.code,{children:"mixHash"}),", ",(0,s.jsx)(n.code,{children:"coinbase"}),",\n",(0,s.jsx)(n.code,{children:"number"}),", ",(0,s.jsx)(n.code,{children:"gasUsed"}),", ",(0,s.jsx)(n.code,{children:"parentHash"})," defines the genesis block header. The field ",(0,s.jsx)(n.code,{children:"gasLimit"})," should be\nset to match the ",(0,s.jsx)(n.code,{children:"gasLimit"})," set in the ",(0,s.jsx)(n.code,{children:"feeConfig"}),". You do not need to change any of the other genesis\nheader fields."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"nonce"}),", ",(0,s.jsx)(n.code,{children:"mixHash"})," and ",(0,s.jsx)(n.code,{children:"difficulty"})," are remnant parameters from Proof of Work systems.\nFor Lux, these don't play any relevant role, so you should just leave them as their\ndefault values:"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"nonce"}),": The result of the mining process iteration is this value. It can be any value in\nthe genesis block. Default value is ",(0,s.jsx)(n.code,{children:"0x0"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"mixHash"}),": The combination of ",(0,s.jsx)(n.code,{children:"nonce"})," and ",(0,s.jsx)(n.code,{children:"mixHash"})," allows to verify that the Block has really been\ncryptographically mined, thus, from this aspect, is valid. Default value is ",(0,s.jsx)(n.code,{children:"0x0000000000000000000000000000000000000000000000000000000000000000"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"difficulty"}),": The difficulty level applied during the nonce discovering process of this block.\nDefault value is ",(0,s.jsx)(n.code,{children:"0x0"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"timestamp"}),": The timestamp of the creation of the genesis block. This is commonly set to ",(0,s.jsx)(n.code,{children:"0x0"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"extraData"}),": Optional extra data that can be included in the genesis block. This is commonly set to ",(0,s.jsx)(n.code,{children:"0x"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gasLimit"}),": The total amount of gas that can be used in a single block. It should be set to\nthe same value as in the ",(0,s.jsx)(n.a,{href:"#fee-config",children:"fee config"}),". The value ",(0,s.jsx)(n.code,{children:"e4e1c0"})," is\nhexadecimal and is equal to ",(0,s.jsx)(n.code,{children:"15,000,000"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"coinbase"}),": Refers to the address of the block producers. This also means it represents the\nrecipient of the block reward. It is usually set\nto ",(0,s.jsx)(n.code,{children:"0x0000000000000000000000000000000000000000"})," for the genesis block. To allow fee recipients in\nSubnet-EVM, refer to ",(0,s.jsx)(n.a,{href:"#setting-a-custom-fee-recipient",children:"this section."})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"parentHash"}),": This is the Keccak 256-bit hash of the entire parent block\u2019s header. It is\nusually set to\n",(0,s.jsx)(n.code,{children:"0x0000000000000000000000000000000000000000000000000000000000000000"})," for the\ngenesis block."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gasUsed"}),": This is the amount of gas used by the genesis block. It is usually set to ",(0,s.jsx)(n.code,{children:"0x0"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"number"}),": This is the number of the genesis block. This required to be ",(0,s.jsx)(n.code,{children:"0x0"})," for the genesis.\nOtherwise it will error."]}),"\n",(0,s.jsx)(n.h3,{id:"genesis-examples",children:"Genesis Examples"}),"\n",(0,s.jsxs)(n.p,{children:["Another example of a genesis file can be found in the\n",(0,s.jsx)(n.a,{href:"https://github.com/luxfi/public-chain-assets/blob/1951594346dcc91682bdd8929bcf8c1bf6a04c33/chains/11111/genesis.json",children:"networks folder"}),".\nNote: please remove ",(0,s.jsx)(n.code,{children:"airdropHash"})," and ",(0,s.jsx)(n.code,{children:"airdropAmount"})," fields if you want to start with it."]}),"\n",(0,s.jsx)(n.p,{children:"Here are a few examples on how a genesis file is used:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/luxfi/subnet-evm/blob/master/scripts/run.sh#L99",children:"scripts/run.sh"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"setting-the-genesis-allocation",children:"Setting the Genesis Allocation"}),"\n",(0,s.jsx)(n.p,{children:"Alloc defines addresses and their initial balances. This should be changed accordingly for each chain.\nIf you don't provide any genesis allocation, you won't be able to interact with your new chain (all\ntransactions require a fee to be paid from the sender's balance)."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"alloc"})," field expects key-value pairs. Keys of each entry must be a valid ",(0,s.jsx)(n.code,{children:"address"}),". The ",(0,s.jsx)(n.code,{children:"balance"}),"\nfield in the value can be either a ",(0,s.jsx)(n.code,{children:"hexadecimal"})," or ",(0,s.jsx)(n.code,{children:"number"})," to indicate initial balance of the address.\nThe default value contains ",(0,s.jsx)(n.code,{children:"8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"})," with ",(0,s.jsx)(n.code,{children:"50000000000000000000000000"}),"\nbalance in it. Default:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'  "alloc": {\n    "8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC": {\n      "balance": "0x295BE96E64066972000000"\n    }\n  }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["To specify a different genesis allocation, populate the ",(0,s.jsx)(n.code,{children:"alloc"})," field in the genesis JSON as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'  "alloc": {\n    "8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC": {\n      "balance": "0x52B7D2DCC80CD2E4000000"\n    },\n    "Ab5801a7D398351b8bE11C439e05C5B3259aeC9B": {\n      "balance": "0xa796504b1cb5a7c0000"\n    }\n  },\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The keys in the allocation are ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Hexadecimal",children:"hex"})," addresses\n",(0,s.jsxs)(n.strong,{children:["without the canonical ",(0,s.jsx)(n.code,{children:"0x"})," prefix"]}),". The balances are denominated in Wei\n(",(0,s.jsx)(n.a,{href:"https://eth-converter.com/",children:"10^18 Wei = 1 Whole Unit of Native Token"}),") and expressed as hex strings\n",(0,s.jsxs)(n.strong,{children:["with the canonical ",(0,s.jsx)(n.code,{children:"0x"})," prefix"]}),". You can use ",(0,s.jsx)(n.a,{href:"https://www.rapidtables.com/convert/number/hex-to-decimal.html",children:"this converter"}),"\nto translate between decimal and hex numbers."]}),"\n",(0,s.jsx)(n.p,{children:"The above example yields the following genesis allocations (denominated in whole units of the native\ntoken, that is 1 LUX/1 ZOO):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC: 100000000 (0x52B7D2DCC80CD2E4000000=100000000000000000000000000 Wei)\n0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B: 49463 (0xa796504b1cb5a7c0000=49463000000000000000000 Wei)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"setting-a-custom-fee-recipient",children:"Setting a Custom Fee Recipient"}),"\n",(0,s.jsxs)(n.p,{children:["By default, all fees are burned (sent to the black hole address with ",(0,s.jsx)(n.code,{children:'"allowFeeRecipients": false'}),").\nHowever, it is possible to enable block producers to set a fee recipient (who will get compensated\nfor blocks they produce)."]}),"\n",(0,s.jsxs)(n.p,{children:["To enable this feature, you'll need to add the following to your\ngenesis file (under the ",(0,s.jsx)(n.code,{children:'"config"'})," key):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "config": {\n    "allowFeeRecipients": true\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"fee-recipient-address",children:"Fee Recipient Address"}),"\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.code,{children:"allowFeeRecipients"})," enabled, your validators can specify their addresses to collect fees. They\nneed to update their EVM ",(0,s.jsx)(n.a,{href:"#luxd-chain-configs",children:"chain config"})," with the following to specify where\nthe fee should be sent to."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "feeRecipient": "<YOUR 0x-ADDRESS>"\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"allowFeeRecipients"}),' feature is enabled on the Subnet, but a validator doesn\'t specify a\n"feeRecipient", the fees will be burned in blocks it produces.']})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Note: this mechanism can be also activated as a precompile."}),"\n",(0,s.jsxs)(n.em,{children:["See ",(0,s.jsx)(n.a,{href:"#changing-fee-reward-mechanisms",children:"Changing Fee Reward Mechanisms"})," section for more details."]})]}),"\n",(0,s.jsx)(n.h2,{id:"precompiles",children:"Precompiles"}),"\n",(0,s.jsxs)(n.p,{children:["Subnet-EVM can provide custom functionalities with precompiled contracts. These precompiled\ncontracts can be activated through ",(0,s.jsx)(n.code,{children:"ChainConfig"})," (in genesis or as an upgrade)."]}),"\n",(0,s.jsx)(n.h3,{id:"allowlist-interface",children:"AllowList Interface"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"AllowList"})," interface is used by precompiles to check if a given address is allowed to use a\nprecompiled contract. ",(0,s.jsx)(n.code,{children:"AllowList"})," consist of two main roles, ",(0,s.jsx)(n.code,{children:"Admin"})," and ",(0,s.jsx)(n.code,{children:"Enabled"}),". ",(0,s.jsx)(n.code,{children:"Admin"})," can\nadd/remove other ",(0,s.jsx)(n.code,{children:"Admin"})," and ",(0,s.jsx)(n.code,{children:"Enabled"})," addresses. ",(0,s.jsx)(n.code,{children:"Enabled"})," addresses can use the precompiled\ncontract, but cannot modify other roles."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"AllowList"})," adds ",(0,s.jsx)(n.code,{children:"adminAddresses"})," and ",(0,s.jsx)(n.code,{children:"enabledAddresses"})," fields to precompile contract configurations.\nFor instance fee manager precompile contract configuration looks like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "feeManagerConfig": {\n    "blockTimestamp": 0,\n    "adminAddresses": [<list of addresses>],\n    "enabledAddresses": [<list of addresses>]\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"AllowList"})," configuration affects only the related precompile. For instance, the admin address in\n",(0,s.jsx)(n.code,{children:"feeManagerConfig"})," does not affect admin addresses in other activated precompiles."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"AllowList"})," solidity interface is defined as follows, and can be found in ",(0,s.jsx)(n.a,{href:"https://github.com/luxfi/subnet-evm/blob/5faabfeaa021a64c2616380ed2d6ec0a96c8f96d/contract-examples/contracts/IAllowList.sol",children:"IAllowList.sol"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:"//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAllowList {\n  // Set [addr] to have the admin role over the precompile\n  function setAdmin(address addr) external;\n\n  // Set [addr] to be enabled on the precompile contract.\n  function setEnabled(address addr) external;\n\n  // Set [addr] to have no role the precompile contract.\n  function setNone(address addr) external;\n\n  // Read the status of [addr].\n  function readAllowList(address addr) external view returns (uint256 role);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"readAllowList(addr)"})," will return a uint256 with a value of 0, 1, or 2, corresponding to the roles\n",(0,s.jsx)(n.code,{children:"None"}),", ",(0,s.jsx)(n.code,{children:"Enabled"}),", and ",(0,s.jsx)(n.code,{children:"Admin"})," respectively."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.em,{children:["Note: ",(0,s.jsx)(n.code,{children:"AllowList"})," is not an actual contract but just an interface. It's not callable by itself."]}),"\n",(0,s.jsx)(n.em,{children:"This is used by other precompiles. Check other precompile sections to see how this works."})]}),"\n",(0,s.jsx)(n.h3,{id:"restricting-smart-contract-deployers",children:"Restricting Smart Contract Deployers"}),"\n",(0,s.jsxs)(n.p,{children:["If you'd like to restrict who has the ability to deploy contracts on your\nSubnet, you can provide an ",(0,s.jsx)(n.code,{children:"AllowList"})," configuration in your genesis or upgrade file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "contractDeployerAllowListConfig": {\n    "blockTimestamp": 0,\n    "adminAddresses": ["0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"]\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, ",(0,s.jsx)(n.code,{children:"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"})," is named as the\n",(0,s.jsx)(n.code,{children:"Admin"})," of the ",(0,s.jsx)(n.code,{children:"ContractDeployerAllowList"}),". This enables it to add other ",(0,s.jsx)(n.code,{children:"Admin"})," or to add\n",(0,s.jsx)(n.code,{children:"Enabled"})," addresses. Both ",(0,s.jsx)(n.code,{children:"Admin"})," and ",(0,s.jsx)(n.code,{children:"Enabled"})," can deploy contracts. To provide\na great UX with factory contracts, the ",(0,s.jsx)(n.code,{children:"tx.Origin"})," is checked for being a valid\ndeployer instead of the caller of ",(0,s.jsx)(n.code,{children:"CREATE"}),". This means that factory contracts will still be\nable to create new contracts as long as the sender of the original transaction is an allow\nlisted deployer."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Stateful Precompile"})," contract powering the ",(0,s.jsx)(n.code,{children:"ContractDeployerAllowList"})," adheres to the\n",(0,s.jsx)(n.a,{href:"#allowlist-interface",children:"AllowList Solidity interface"})," at ",(0,s.jsx)(n.code,{children:"0x0200000000000000000000000000000000000000"}),"\n(you can load this interface and interact directly in Remix):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["If you attempt to add a ",(0,s.jsx)(n.code,{children:"Enabled"})," and you are not an ",(0,s.jsx)(n.code,{children:"Admin"}),", you will see\nsomething like:\n",(0,s.jsx)(n.img,{alt:"admin fail",src:i(58252).A+"",width:"1240",height:"542"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["If you attempt to deploy a contract but you are not an ",(0,s.jsx)(n.code,{children:"Admin"})," not\na ",(0,s.jsx)(n.code,{children:"Enabled"}),", you will see something like:\n",(0,s.jsx)(n.img,{alt:"deploy fail",src:i(44826).A+"",width:"1246",height:"562"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["If you call ",(0,s.jsx)(n.code,{children:"readAllowList(addr)"})," then you can read the current role of ",(0,s.jsx)(n.code,{children:"addr"}),", which will return\na uint256 with a value of 0, 1, or 2, corresponding to the roles ",(0,s.jsx)(n.code,{children:"None"}),", ",(0,s.jsx)(n.code,{children:"Enabled"}),", and ",(0,s.jsx)(n.code,{children:"Admin"})," respectively."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"If you remove all of the admins from the allow list, it will no longer be possible to update the\nallow list without modifying the Subnet-EVM to schedule a network upgrade."})}),"\n",(0,s.jsx)(n.h4,{id:"initial-contract-allow-list-configuration",children:"Initial Contract Allow List Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["It's possible to enable this precompile with an initial configuration to activate its effect on\nactivation timestamp. This provides a way to enable the precompile without an admin address to manage\nthe deployer list. With this, you can define a list of addresses that are allowed to deploy contracts.\nSince there will be no admin address to manage the deployer list, it can only be modified through a\nnetwork upgrade. To use initial configuration, you need to specify addresses in ",(0,s.jsx)(n.code,{children:"enabledAddresses"}),"\nfield in your genesis or upgrade file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "contractDeployerAllowListConfig": {\n    "blockTimestamp": 0,\n    "enabledAddresses": ["0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"]\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This will allow only ",(0,s.jsx)(n.code,{children:"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"})," to deploy contracts. For further\ninformation about precompile initial configurations see ",(0,s.jsx)(n.a,{href:"#initial-precompile-configurations",children:"Initial Precompile Configurations"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"restricting-who-can-submit-transactions",children:"Restricting Who Can Submit Transactions"}),"\n",(0,s.jsxs)(n.p,{children:["Similar to restricting contract deployers, this precompile restricts which addresses may submit\ntransactions on chain. Like the previous section, you can activate the precompile by including an\n",(0,s.jsx)(n.code,{children:"AllowList"})," configuration in your genesis file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "config": {\n    "txAllowListConfig": {\n      "blockTimestamp": 0,\n      "adminAddresses": ["0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"]\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, ",(0,s.jsx)(n.code,{children:"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"})," is named as the\n",(0,s.jsx)(n.code,{children:"Admin"})," of the ",(0,s.jsx)(n.code,{children:"TransactionAllowList"}),". This enables them to add other ",(0,s.jsx)(n.code,{children:"Admins"})," or to add\n",(0,s.jsx)(n.code,{children:"Allowed"}),". Both ",(0,s.jsx)(n.code,{children:"Admins"})," and ",(0,s.jsx)(n.code,{children:"Enabled"})," can submit transactions to the chain."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Stateful Precompile"})," contract powering the ",(0,s.jsx)(n.code,{children:"TxAllowList"})," adheres to the\n",(0,s.jsx)(n.a,{href:"#allowlist-interface",children:"AllowList Solidity interface"})," at ",(0,s.jsx)(n.code,{children:"0x0200000000000000000000000000000000000002"}),"\n(you can load this interface and interact directly in Remix):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["If you attempt to add an ",(0,s.jsx)(n.code,{children:"Enabled"})," and you are not an ",(0,s.jsx)(n.code,{children:"Admin"}),", you will see\nsomething like:\n",(0,s.jsx)(n.img,{alt:"admin fail",src:i(58252).A+"",width:"1240",height:"542"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["If you attempt to submit a transaction but you are not an ",(0,s.jsx)(n.code,{children:"Admin"})," or not\n",(0,s.jsx)(n.code,{children:"Enabled"}),", you will see something like: ",(0,s.jsx)(n.code,{children:"cannot issue transaction from non-allow listed address"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["If you call ",(0,s.jsx)(n.code,{children:"readAllowList(addr)"})," then you can read the current role of ",(0,s.jsx)(n.code,{children:"addr"}),", which will return\na ",(0,s.jsx)(n.code,{children:"uint256"})," with a value of 0, 1, or 2, corresponding to the roles ",(0,s.jsx)(n.code,{children:"None"}),", ",(0,s.jsx)(n.code,{children:"Allowed"}),", and ",(0,s.jsx)(n.code,{children:"Admin"})," respectively."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"If you remove all of the admins from the allow list, it will no longer be possible to update the\nallow list without modifying the Subnet-EVM to schedule a network upgrade."})}),"\n",(0,s.jsx)(n.h4,{id:"initial-tx-allow-list-configuration",children:"Initial TX Allow List Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["It's possible to enable this precompile with an initial configuration to activate its effect on\nactivation timestamp. This provides a way to enable the precompile without an admin address to manage\nthe TX allow list. With this, you can define a list of addresses that are allowed to submit\ntransactions. Since there will be no admin address to manage the TX list, it can only be modified\nthrough a network upgrade. To use initial configuration, you need to specify addresses in\n",(0,s.jsx)(n.code,{children:"enabledAddresses"})," field in your genesis or upgrade file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "txAllowListConfig": {\n    "blockTimestamp": 0,\n    "enabledAddresses": ["0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"]\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This will allow only ",(0,s.jsx)(n.code,{children:"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"})," to submit transactions. For further\ninformation about precompile initial configurations see ",(0,s.jsx)(n.a,{href:"#initial-precompile-configurations",children:"Initial Precompile Configurations"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"minting-native-coins",children:"Minting Native Coins"}),"\n",(0,s.jsxs)(n.p,{children:["You can mint native(gas) coins with a precompiled contract. In order to activate this feature, you\ncan provide ",(0,s.jsx)(n.code,{children:"nativeMinterConfig"})," in genesis:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "config": {\n    "contractNativeMinterConfig": {\n      "blockTimestamp": 0,\n      "adminAddresses": ["0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"]\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"adminAddresses"})," denotes admin accounts who can add other ",(0,s.jsx)(n.code,{children:"Admin"})," or ",(0,s.jsx)(n.code,{children:"Enabled"})," accounts. ",(0,s.jsx)(n.code,{children:"Admin"})," and\n",(0,s.jsx)(n.code,{children:"Enabled"})," are both eligible to mint native coins for other addresses. ",(0,s.jsx)(n.code,{children:"ContractNativeMinter"})," uses\nsame methods as in ",(0,s.jsx)(n.code,{children:"ContractDeployerAllowList"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Stateful Precompile"})," contract powering the ",(0,s.jsx)(n.code,{children:"ContractNativeMinter"})," adheres to the following\nSolidity interface at ",(0,s.jsx)(n.code,{children:"0x0200000000000000000000000000000000000001"})," (you can load this interface and\ninteract directly in Remix):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:'// (c) 2022-2023, Lux Partners, Inc. All rights reserved.\n// See the file LICENSE for licensing terms.\n\npragma solidity ^0.8.0;\nimport "./IAllowList.sol";\n\ninterface INativeMinter is IAllowList {\n  // Mint [amount] number of native coins and send to [addr]\n  function mintNativeCoin(address addr, uint256 amount) external;\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"mintNativeCoin"})," takes an address and amount of native coins to be minted. The amount denotes the\namount in minimum denomination of native coins (10^18). For example, if you want to mint 1 native\ncoin (in LUX), you need to pass 1 * 10^18 as the amount."]}),"\n",(0,s.jsxs)(n.p,{children:["Note that this uses ",(0,s.jsx)(n.code,{children:"IAllowList"})," interface directly, meaning that it uses the same ",(0,s.jsx)(n.code,{children:"AllowList"}),"\ninterface functions like ",(0,s.jsx)(n.code,{children:"readAllowList"})," and ",(0,s.jsx)(n.code,{children:"setAdmin"}),", ",(0,s.jsx)(n.code,{children:"setEnabled"}),", ",(0,s.jsx)(n.code,{children:"setNone"}),". For more information\nsee ",(0,s.jsx)(n.a,{href:"#allowlist-interface",children:"AllowList Solidity interface"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"EVM does not prevent overflows when storing the address balance. Overflows in\nbalance opcodes are handled by setting the\nbalance to maximum. However the same won't apply for API calls. If you try to mint more than the\nmaximum balance, API calls will return the overflowed hex-balance. This can break external\ntooling. Make sure the total supply of native coins is always less than 2^256-1."})}),"\n",(0,s.jsx)(n.h4,{id:"initial-native-minter-configuration",children:"Initial Native Minter Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["It's possible to enable this precompile with an initial configuration to activate its effect on\nactivation timestamp. This provides a way to enable the precompile without an admin address to mint\nnative coins. With this, you can define a list of addresses that will receive an initial mint of the\nnative coin when this precompile activates. This can be useful for networks that require a one-time\nmint without specifying any admin addresses. To use initial configuration, you need to specify a map\nof addresses with their corresponding mint amounts in ",(0,s.jsx)(n.code,{children:"initialMint"})," field in your genesis or upgrade\nfile:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "contractNativeMinterConfig": {\n    "blockTimestamp": 0,\n    "initialMint": {\n      "0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC": "1000000000000000000",\n      "0x10037Fb06Ec4aB8c870a92AE3f00cD58e5D484b3": "0xde0b6b3a7640000"\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:['In the amount field you can specify either decimal or hex string. This will mint 1000000000000000000\n(equivalent of 1 Native Coin denominated as 10^18) to both addresses. Note that these are both in\nstring format. "0xde0b6b3a7640000" hex is equivalent to 1000000000000000000. For further information\nabout precompile initial configurations see ',(0,s.jsx)(n.a,{href:"#initial-precompile-configurations",children:"Initial Precompile Configurations"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"configuring-dynamic-fees",children:"Configuring Dynamic Fees"}),"\n",(0,s.jsxs)(n.p,{children:["You can configure the parameters of the dynamic fee algorithm on chain using the ",(0,s.jsx)(n.code,{children:"FeeConfigManager"}),".\nIn order to activate this feature, you will need to provide the ",(0,s.jsx)(n.code,{children:"FeeConfigManager"})," in the genesis:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "config": {\n    "feeManagerConfig": {\n      "blockTimestamp": 0,\n      "adminAddresses": ["0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"]\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The precompile implements the ",(0,s.jsx)(n.code,{children:"FeeManager"})," interface which includes the same ",(0,s.jsx)(n.code,{children:"AllowList"})," interface\nused by ContractNativeMinter, TxAllowList, etc. For an example of the ",(0,s.jsx)(n.code,{children:"AllowList"})," interface, see the\n",(0,s.jsx)(n.a,{href:"#allowlist-interface",children:"TxAllowList"})," above."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Stateful Precompile"})," contract powering the ",(0,s.jsx)(n.code,{children:"FeeConfigManager"})," adheres to the following Solidity\ninterface at ",(0,s.jsx)(n.code,{children:"0x0200000000000000000000000000000000000003"})," (you can load this interface and interact\ndirectly in Remix). It can be also found in\n",(0,s.jsx)(n.a,{href:"https://github.com/luxfi/subnet-evm/blob/5faabfeaa021a64c2616380ed2d6ec0a96c8f96d/contract-examples/contracts/IFeeManager.sol",children:"IFeeManager.sol"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:'//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport "./IAllowList.sol";\n\ninterface IFeeManager is IAllowList {\n  // Set fee config fields to contract storage\n  function setFeeConfig(\n    uint256 gasLimit,\n    uint256 targetBlockRate,\n    uint256 minBaseFee,\n    uint256 targetGas,\n    uint256 baseFeeChangeDenominator,\n    uint256 minBlockGasCost,\n    uint256 maxBlockGasCost,\n    uint256 blockGasCostStep\n  ) external;\n\n  // Get fee config from the contract storage\n  function getFeeConfig()\n    external\n    view\n    returns (\n      uint256 gasLimit,\n      uint256 targetBlockRate,\n      uint256 minBaseFee,\n      uint256 targetGas,\n      uint256 baseFeeChangeDenominator,\n      uint256 minBlockGasCost,\n      uint256 maxBlockGasCost,\n      uint256 blockGasCostStep\n    );\n\n  // Get the last block number changed the fee config from the contract storage\n  function getFeeConfigLastChangedAt()\n    external\n    view\n    returns (uint256 blockNumber);\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["FeeConfigManager precompile uses ",(0,s.jsx)(n.code,{children:"IAllowList"})," interface directly, meaning that it uses the same\n",(0,s.jsx)(n.code,{children:"AllowList"})," interface functions like ",(0,s.jsx)(n.code,{children:"readAllowList"})," and ",(0,s.jsx)(n.code,{children:"setAdmin"}),", ",(0,s.jsx)(n.code,{children:"setEnabled"}),", ",(0,s.jsx)(n.code,{children:"setNone"}),". For\nmore information see ",(0,s.jsx)(n.a,{href:"#allowlist-interface",children:"AllowList Solidity interface"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["In addition to the ",(0,s.jsx)(n.code,{children:"AllowList"})," interface, the FeeConfigManager adds the following capabilities:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"getFeeConfig"})," - retrieves the current dynamic fee config"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"getFeeConfigLastChangedAt"})," - retrieves the timestamp of the last block where the fee config was updated"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"setFeeConfig"})," - sets the dynamic fee config on chain (see ",(0,s.jsx)(n.a,{href:"#fee-config",children:"here"})," for details on the\nfee config parameters)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["You can also get the fee configuration at a block with the ",(0,s.jsx)(n.code,{children:"eth_feeConfig"})," RPC method. For more\ninformation see ",(0,s.jsx)(n.a,{href:"/reference/subnet-evm/api#eth_feeconfig",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"initial-fee-config-configuration",children:"Initial Fee Config Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["It's possible to enable this precompile with an initial configuration to activate its effect on\nactivation timestamp. This provides a way to define your fee structure to take effect at the\nactivation. To use the initial configuration, you need to specify the fee config in\n",(0,s.jsx)(n.code,{children:"initialFeeConfig"})," field in your genesis or upgrade file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "feeManagerConfig": {\n    "blockTimestamp": 0,\n    "initialFeeConfig": {\n      "gasLimit": 20000000,\n      "targetBlockRate": 2,\n      "minBaseFee": 1000000000,\n      "targetGas": 100000000,\n      "baseFeeChangeDenominator": 48,\n      "minBlockGasCost": 0,\n      "maxBlockGasCost": 10000000,\n      "blockGasCostStep": 500000\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This will set the fee config to the values specified in the ",(0,s.jsx)(n.code,{children:"initialFeeConfig"})," field. For further\ninformation about precompile initial configurations see ",(0,s.jsx)(n.a,{href:"#initial-precompile-configurations",children:"Initial Precompile Configurations"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"changing-fee-reward-mechanisms",children:"Changing Fee Reward Mechanisms"}),"\n",(0,s.jsxs)(n.p,{children:["Fee reward mechanism can be configured with this stateful precompile contract called as\n",(0,s.jsx)(n.code,{children:"RewardManager"}),". Configuration can include burning fees, sending fees to a predefined address, or\nenabling fees to be collected by block producers. This precompile can be configured as follows in\nthe genesis file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "config": {\n    "rewardManagerConfig": {\n      "blockTimestamp": 0,\n      "adminAddresses": ["0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"]\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"adminAddresses"})," denotes admin accounts who can add other ",(0,s.jsx)(n.code,{children:"Admin"})," or ",(0,s.jsx)(n.code,{children:"Enabled"})," accounts. ",(0,s.jsx)(n.code,{children:"Admin"})," and\n",(0,s.jsx)(n.code,{children:"Enabled"})," are both eligible to change the current fee mechanism."]}),"\n",(0,s.jsxs)(n.p,{children:["The precompile implements the ",(0,s.jsx)(n.code,{children:"RewardManager"})," interface which includes the ",(0,s.jsx)(n.code,{children:"AllowList"})," interface.\nFor an example of the ",(0,s.jsx)(n.code,{children:"AllowList"})," interface, see the ",(0,s.jsx)(n.a,{href:"#allowlist-interface",children:"TxAllowList"})," above."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Stateful Precompile"})," contract powering the ",(0,s.jsx)(n.code,{children:"RewardManager"})," adheres to the following Solidity\ninterface at ",(0,s.jsx)(n.code,{children:"0x0200000000000000000000000000000000000004"})," (you can load this interface and interact\ndirectly in Remix). It can be also found in\n",(0,s.jsx)(n.a,{href:"https://github.com/luxfi/subnet-evm/blob/5faabfeaa021a64c2616380ed2d6ec0a96c8f96d/contract-examples/contracts/IRewardManager.sol",children:"IRewardManager.sol"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:'//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport "./IAllowList.sol";\n\ninterface IRewardManager is IAllowList {\n  // setRewardAddress sets the reward address to the given address\n  function setRewardAddress(address addr) external;\n\n  // allowFeeRecipients allows block builders to claim fees\n  function allowFeeRecipients() external;\n\n  // disableRewards disables block rewards and starts burning fees\n  function disableRewards() external;\n\n  // currentRewardAddress returns the current reward address\n  function currentRewardAddress() external view returns (address rewardAddress);\n\n  // areFeeRecipientsAllowed returns true if fee recipients are allowed\n  function areFeeRecipientsAllowed() external view returns (bool isAllowed);\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"RewardManager"})," precompile uses ",(0,s.jsx)(n.code,{children:"IAllowList"})," interface directly, meaning that it uses the same\n",(0,s.jsx)(n.code,{children:"AllowList"})," interface functions like ",(0,s.jsx)(n.code,{children:"readAllowList"})," and ",(0,s.jsx)(n.code,{children:"setAdmin"}),", ",(0,s.jsx)(n.code,{children:"setEnabled"}),", ",(0,s.jsx)(n.code,{children:"setNone"}),". For\nmore information see ",(0,s.jsx)(n.a,{href:"#allowlist-interface",children:"AllowList Solidity interface"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["In addition to the ",(0,s.jsx)(n.code,{children:"AllowList"})," interface, the ",(0,s.jsx)(n.code,{children:"RewardManager"})," adds the following capabilities:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"setRewardAddress"})," - sets the address to which fees are sent. This address can be a contract or a\nuser address. The address becomes the required coinbase address for the blocks that this mechanism\nis enabled on. Meaning that it will receive the fees collected from the transactions in the block.\nReceiving fees will not call any contract functions or fallback functions. It will simply increase\nthe balance of the address by the amount of fees."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"allowFeeRecipients"})," - enables block producers to claim fees. This will allow block producers to\nclaim fees by specifying their own addresses in their chain configs. See ",(0,s.jsx)(n.a,{href:"#fee-recipient",children:"here"}),"\nfor more information on how to specify the fee recipient address in the chain config."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"disableRewards"})," - disables block rewards and starts burning fees."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"currentRewardAddress"})," - returns the current reward address. This is the address to which fees are\nsent. It can include black hole address (",(0,s.jsx)(n.code,{children:"0x010...0"}),") which means that fees are burned. It can also\ninclude a predefined hash (",(0,s.jsx)(n.code,{children:"0x0000000000000000000000000000000000000000"}),") denoting custom fee\nrecipients are allowed. It's advised to use the ",(0,s.jsx)(n.code,{children:"areFeeRecipientsAllowed"})," function to check if\ncustom fee recipients are allowed first."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"areFeeRecipientsAllowed"})," - returns true if custom fee recipients are allowed."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["These 3 mechanisms (burning, sending to a predefined address, and enabling fees to be collected by\nblock producers) cannot be enabled at the same time. Enabling one mechanism will take over the\nprevious mechanism. For example, if you enable ",(0,s.jsx)(n.code,{children:"allowFeeRecipients"})," and then enable\n",(0,s.jsx)(n.code,{children:"disableRewards"}),", the ",(0,s.jsx)(n.code,{children:"disableRewards"})," will take over and fees will be burned."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Note: Reward addresses or fee recipient addresses are not required to be an admin or enabled account."})}),"\n",(0,s.jsx)(n.h4,{id:"initial-configuration",children:"Initial Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["It's possible to enable this precompile with an initial configuration to activate its effect on\nactivation timestamp. This provides a way to enable the precompile without an admin address to\nchange the fee reward mechanism. This can be useful for networks that require a one-time reward\nmechanism change without specifying any admin addresses. Without this initial configuration, the\nprecompile will inherit the ",(0,s.jsx)(n.code,{children:"feeRecipients"})," mechanism activated at genesis. Meaning that if\n",(0,s.jsx)(n.code,{children:"allowFeeRecipients"})," is set to true in the genesis file, the precompile will be enabled with the\n",(0,s.jsx)(n.code,{children:"allowFeeRecipients"})," mechanism. Otherwise it will keep burning fees. To use the initial\nconfiguration, you need to specify the initial reward mechanism in ",(0,s.jsx)(n.code,{children:"initialRewardConfig"})," field in\nyour genesis or upgrade file."]}),"\n",(0,s.jsxs)(n.p,{children:["In order to allow custom fee recipients, you need to specify the ",(0,s.jsx)(n.code,{children:"allowFeeRecipients"})," field in the ",(0,s.jsx)(n.code,{children:"initialRewardConfig"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "rewardManagerConfig": {\n    "blockTimestamp": 0,\n    "initialRewardConfig": {\n      "allowFeeRecipients": true\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In order to set an address to receive all transaction rewards, you need to specify the\n",(0,s.jsx)(n.code,{children:"rewardAddress"})," field in the ",(0,s.jsx)(n.code,{children:"initialRewardConfig"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "rewardManagerConfig": {\n    "blockTimestamp": 0,\n    "initialRewardConfig": {\n      "rewardAddress": "0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In order to disable rewards and start burning fees, you need to leave all fields in the\n",(0,s.jsx)(n.code,{children:"initialRewardConfig"})," empty:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "rewardManagerConfig": {\n    "blockTimestamp": 0,\n    "initialRewardConfig": {}\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["However this is different than the default behavior of the precompile. If you don't specify the\n",(0,s.jsx)(n.code,{children:"initialRewardConfig"})," field, the precompile will inherit the ",(0,s.jsx)(n.code,{children:"feeRecipients"})," mechanism activated at\ngenesis. Meaning that if ",(0,s.jsx)(n.code,{children:"allowFeeRecipients"})," is set to true in the genesis file, the precompile\nwill be enabled with the ",(0,s.jsx)(n.code,{children:"allowFeeRecipients"})," mechanism. Otherwise it will keep burning fees.\nExample\nconfiguration for this case:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "rewardManagerConfig": {\n    "blockTimestamp": 0,\n    "adminAddresses": ["0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"]\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"allowFeeRecipients"})," and ",(0,s.jsx)(n.code,{children:"rewardAddress"})," are both specified in the ",(0,s.jsx)(n.code,{children:"initialRewardConfig"})," field\nthen an error will be returned and precompile won't be activated. For further information about\nprecompile initial configurations see ",(0,s.jsx)(n.a,{href:"#initial-precompile-configurations",children:"Initial Precompile\nConfigurations"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"contract-examples",children:"Contract Examples"}),"\n",(0,s.jsxs)(n.p,{children:["Subnet-EVM contains example contracts for precompiles under ",(0,s.jsx)(n.code,{children:"/contracts"}),". It's a hardhat\nproject with tests and tasks. For more information see\n",(0,s.jsx)(n.a,{href:"https://github.com/luxfi/subnet-evm/tree/master/contracts#subnet-evm-contracts",children:"contract examples README"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"network-upgrades-enabledisable-precompiles",children:"Network Upgrades: Enable/Disable Precompiles"}),"\n",(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsx)(n.p,{children:"Performing a network upgrade requires coordinating the upgrade network-wide. A network upgrade\nchanges the rule set used to process and verify blocks, such that any node that upgrades incorrectly\nor fails to upgrade by the time that upgrade goes into effect may become out of sync with the rest\nof the network."}),(0,s.jsx)(n.p,{children:"Any mistakes in configuring network upgrades or coordinating them on validators may cause the network\nto halt and recovering may be difficult."})]}),"\n",(0,s.jsx)(n.p,{children:"In addition to specifying the configuration for each of the above precompiles in the genesis chain\nconfig, they can be individually enabled or disabled at a given timestamp as a network upgrade.\nDisabling a precompile disables calling the precompile and destructs its storage so it can be enabled\nat a later timestamp with a new configuration if desired."}),"\n",(0,s.jsxs)(n.p,{children:["These upgrades must be specified in a file named ",(0,s.jsx)(n.code,{children:"upgrade.json"})," placed in the same directory where\n",(0,s.jsx)(n.a,{href:"#luxd-chain-configs",children:(0,s.jsx)(n.code,{children:"config.json"})})," resides: ",(0,s.jsx)(n.code,{children:"{chain-config-dir}/{blockchainID}/upgrade.json"}),".\nFor example, ",(0,s.jsx)(n.code,{children:"ZOO Subnet"})," upgrade should be placed in\n",(0,s.jsx)(n.code,{children:"~/.luxd/configs/chains/2ebCneCbwthjQ1rYT41nhd7M76Hc6YmosMAQrTFhBq8qeqh6tt/upgrade.json"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The content of the ",(0,s.jsx)(n.code,{children:"upgrade.json"})," should be formatted according to the following:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "precompileUpgrades": [\n    {\n      "[PRECOMPILE_NAME]": {\n        "blockTimestamp": "[ACTIVATION_TIMESTAMP]", // unix timestamp precompile should activate at\n        "[PARAMETER]": "[VALUE]" // precompile specific configuration options, eg. "adminAddresses"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["An invalid ",(0,s.jsx)(n.code,{children:"blockTimestamp"})," in an upgrade file results the update failing.\nThe ",(0,s.jsx)(n.code,{children:"blockTimestamp"})," value should be set to a valid Unix timestamp value which is\nin the ",(0,s.jsx)(n.em,{children:"future"})," relative to the ",(0,s.jsx)(n.em,{children:"head of the chain"}),".\nIf the node encounters a ",(0,s.jsx)(n.code,{children:"blockTimestamp"})," which is in the past, it will fail on startup."]})}),"\n",(0,s.jsx)(n.p,{children:"To disable a precompile, the following format should be used:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "precompileUpgrades": [\n    {\n      "<precompileName>": {\n        "blockTimestamp": "[DEACTIVATION_TIMESTAMP]", // unix timestamp the precompile should deactivate at\n        "disable": true\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Each item in ",(0,s.jsx)(n.code,{children:"precompileUpgrades"})," must specify exactly one precompile to enable or disable and the\nblock timestamps must be in increasing order. Once an upgrade has been activated (a block after the\nspecified timestamp has been accepted), it must always be present in ",(0,s.jsx)(n.code,{children:"upgrade.json"})," exactly as it\nwas configured at the time of activation (otherwise the node will refuse to start)."]}),"\n",(0,s.jsx)(n.p,{children:"Enabling and disabling a precompile is a network upgrade and should always be done with caution."}),"\n",(0,s.jsxs)(n.admonition,{type:"danger",children:[(0,s.jsxs)(n.p,{children:["For safety, you should always treat ",(0,s.jsx)(n.code,{children:"precompileUpgrades"})," as append-only."]}),(0,s.jsx)(n.p,{children:"As a last resort measure, it is possible to abort or reconfigure a precompile upgrade that has not\nbeen activated since the chain is still processing blocks using the prior rule set."})]}),"\n",(0,s.jsxs)(n.p,{children:["If aborting an upgrade becomes necessary, you can remove the precompile upgrade from ",(0,s.jsx)(n.code,{children:"upgrade.json"}),"\nfrom the end of the list of upgrades. As long as the blockchain has not accepted a block with a\ntimestamp past that upgrade's timestamp, it will abort the upgrade for that node."]}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "precompileUpgrades": [\n    {\n      "feeManagerConfig": {\n        "blockTimestamp": 1668950000,\n        "adminAddresses": ["0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"]\n      }\n    },\n    {\n      "txAllowListConfig": {\n        "blockTimestamp": 1668960000,\n        "adminAddresses": ["0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"]\n      }\n    },\n    {\n      "feeManagerConfig": {\n        "blockTimestamp": 1668970000,\n        "disable": true\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This example enables the ",(0,s.jsx)(n.code,{children:"feeManagerConfig"})," at the first block with timestamp >= ",(0,s.jsx)(n.code,{children:"1668950000"}),", enables\n",(0,s.jsx)(n.code,{children:"txAllowListConfig"})," at the first block with timestamp >= ",(0,s.jsx)(n.code,{children:"1668960000"}),", and disables ",(0,s.jsx)(n.code,{children:"feeManagerConfig"}),"\nat the first block with timestamp >= ",(0,s.jsx)(n.code,{children:"1668970000"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When a precompile disable takes effect (that is, after its ",(0,s.jsx)(n.code,{children:"blockTimestamp"})," has passed), its storage\nwill be wiped. If you want to reenable it, you will need to treat it as a new configuration."]}),"\n",(0,s.jsxs)(n.p,{children:["After you have created the ",(0,s.jsx)(n.code,{children:"upgrade.json"})," and placed it in the chain config directory, you need to\nrestart the node for the upgrade file to be loaded (again, make sure you don't restart all Subnet\nvalidators at once!). On node restart, it will print out the configuration of the chain, where you\ncan double-check that the upgrade has loaded correctly. In our example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:'INFO [08-15|15:09:36.772] <2ebCneCbwthjQ1rYT41nhd7M76Hc6YmosMAQrTFhBq8qeqh6tt Chain>\ngithub.com/luxfi/subnet-evm/eth/backend.go:155: Initialised chain configuration\nconfig=\u201c{ChainID: 11111 Homestead: 0 EIP150: 0 EIP155: 0 EIP158: 0 Byzantium: 0\nConstantinople: 0 Petersburg: 0 Istanbul: 0, Muir Glacier: 0, Subnet EVM: 0, FeeConfig:\n{\\\u201cgasLimit\\\u201c:20000000,\\\u201ctargetBlockRate\\\u201c:2,\\\u201cminBaseFee\\\u201c:1000000000,\\\u201ctargetGas\\\n\u201c:100000000,\\\u201cbaseFeeChangeDenominator\\\u201c:48,\\\u201cminBlockGasCost\\\u201c:0,\\\u201cmaxBlockGasCost\\\n\u201c:10000000,\\\u201cblockGasCostStep\\\u201c:500000}, AllowFeeRecipients: false, NetworkUpgrades: {\\\n\u201csubnetEVMTimestamp\\\u201c:0}, PrecompileUpgrade: {}, UpgradeConfig: {\\"precompileUpgrades\\":[{\\"feeManagerConfig\\":{\\"adminAddresses\\":[\\"0x8db97c7cece249c2b98bdc0226cc4c2a57bf52fc\\"],\\"enabledAddresses\\":null,\\"blockTimestamp\\":1668950000}},{\\"txAllowListConfig\\":{\\"adminAddresses\\":[\\"0x8db97c7cece249c2b98bdc0226cc4c2a57bf52fc\\"],\\"enabledAddresses\\":null,\\"blockTimestamp\\":1668960000}},{\\"feeManagerConfig\\":{\\"adminAddresses\\":null,\\"enabledAddresses\\":null,\\"blockTimestamp\\":1668970000,\\"disable\\":true}}]}, Engine: Dummy Consensus Engine}"\u201d\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Notice that ",(0,s.jsx)(n.code,{children:"precompileUpgrades"})," entry correctly reflects the changes. You can also check the\nactivated precompiles at a timestamp with the\n",(0,s.jsx)(n.a,{href:"/reference/subnet-evm/api#eth_getactiveprecompilesat",children:(0,s.jsx)(n.code,{children:"eth_getActivePrecompilesAt"})}),"\nRPC method. The ",(0,s.jsx)(n.a,{href:"/reference/subnet-evm/api#eth_getchainconfig",children:(0,s.jsx)(n.code,{children:"eth_getChainConfig"})}),"\nRPC method will also return the configured upgrades in the response."]}),"\n",(0,s.jsx)(n.p,{children:"That's it, your Subnet is all set and the desired upgrades will be activated at the indicated timestamp!"}),"\n",(0,s.jsx)(n.h3,{id:"initial-precompile-configurations",children:"Initial Precompile Configurations"}),"\n",(0,s.jsxs)(n.p,{children:["Precompiles can be managed by some privileged addresses to change their configurations and activate\ntheir effects. For example, the ",(0,s.jsx)(n.code,{children:"feeManagerConfig"})," precompile can have ",(0,s.jsx)(n.code,{children:"adminAddresses"})," which can\nchange the fee structure of the network."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "precompileUpgrades": [\n    {\n      "feeManagerConfig": {\n        "blockTimestamp": 1668950000,\n        "adminAddresses": ["0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"]\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, only the address ",(0,s.jsx)(n.code,{children:"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"})," is allowed to change\nthe fee structure of the network. The admin address has to call the precompile in order to activate\nits effect; that is it needs to send a transaction with a new fee config to perform the update.\nThis is a very powerful feature, but it also gives a large amount of power to the admin address. If\nthe address ",(0,s.jsx)(n.code,{children:"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"})," is compromised, the network is compromised."]}),"\n",(0,s.jsxs)(n.p,{children:["With the initial configurations, precompiles can immediately activate their effect on the activation\ntimestamp. With this way admin addresses can be omitted from the precompile configuration. For example,\nthe ",(0,s.jsx)(n.code,{children:"feeManagerConfig"})," precompile can have ",(0,s.jsx)(n.code,{children:"initialFeeConfig"})," to setup the fee configuration on the\nactivation:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "precompileUpgrades": [\n    {\n      "feeManagerConfig": {\n        "blockTimestamp": 1668950000,\n        "initialFeeConfig": {\n          "gasLimit": 20000000,\n          "targetBlockRate": 2,\n          "minBaseFee": 1000000000,\n          "targetGas": 100000000,\n          "baseFeeChangeDenominator": 48,\n          "minBlockGasCost": 0,\n          "maxBlockGasCost": 10000000,\n          "blockGasCostStep": 500000\n        }\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Notice that there is no ",(0,s.jsx)(n.code,{children:"adminAddresses"})," field in the configuration. This means that there will be\nno admin addresses to manage the fee structure with this precompile. The precompile will simply\nupdate the fee configuration to the specified fee config when it activates on the ",(0,s.jsx)(n.code,{children:"blockTimestamp"})," ",(0,s.jsx)(n.code,{children:"1668950000"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["It's still possible to add ",(0,s.jsx)(n.code,{children:"adminAddresses"})," or ",(0,s.jsx)(n.code,{children:"enabledAddresses"})," along with these initial\nconfigurations. In this case, the precompile will be activated with the initial configuration, and\nadmin/enabled addresses can access to the precompiled contract normally."]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"If you want to change the precompile initial configuration, you will need to first disable it then\nactivate the precompile again with the new configuration."})}),"\n",(0,s.jsxs)(n.p,{children:["See every precompile initial configuration in their relevant ",(0,s.jsx)(n.code,{children:"Initial Configuration"})," sections under ",(0,s.jsx)(n.a,{href:"#precompiles",children:"Precompiles"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"luxd-chain-configs",children:"Luxd Chain Configs"}),"\n",(0,s.jsxs)(n.p,{children:["As described in ",(0,s.jsx)(n.a,{href:"/docs/nodes/configure/chain-config-flags#subnet-chain-configs",children:"this doc"}),", each blockchain\nof Subnets can have its own custom configuration. If a Subnet's ChainID is\n",(0,s.jsx)(n.code,{children:"2ebCneCbwthjQ1rYT41nhd7M76Hc6YmosMAQrTFhBq8qeqh6tt"}),", the config file for this chain is located at\n",(0,s.jsx)(n.code,{children:"{chain-config-dir}/2ebCneCbwthjQ1rYT41nhd7M76Hc6YmosMAQrTFhBq8qeqh6tt/config.json"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["For blockchains created by or forked from Subnet-EVM, most\n",(0,s.jsx)(n.a,{href:"/docs/nodes/configure/chain-config-flags#c-chain-configs",children:"C-Chain configs"})," are applicable except\n",(0,s.jsx)(n.a,{href:"/docs/nodes/configure/chain-config-flags#enabling-specific-apis",children:"Lux Specific APIs"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"priority-regossip",children:"Priority Regossip"}),"\n",(0,s.jsxs)(n.p,{children:['A transaction is "regossiped" when the node does not find the transaction in\na block after ',(0,s.jsx)(n.code,{children:"priority-regossip-frequency"})," (defaults to ",(0,s.jsx)(n.code,{children:"1m"}),"). By default, up to 16 transactions\n(max 1 per address) are regossiped to validators per minute."]}),"\n",(0,s.jsxs)(n.p,{children:['Operators can use "priority regossip" to more aggressively "regossip" transactions for a set of\nimportant addresses (like bridge relayers). To do so, you\'ll need to update your\n',(0,s.jsx)(n.a,{href:"/docs/nodes/configure/chain-config-flags#subnet-chain-configs",children:"chain config"})," with the following:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "priority-regossip-addresses": ["<YOUR 0x-ADDRESS>"]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"By default, up to 32 transactions from priority addresses (max 16 per address) are regossipped to\nvalidators per second. You can override these defaults with the following config:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "priority-regossip-frequency": "1s",\n  "priority-regossip-max-txs": 32,\n  "priority-regossip-addresses": ["<YOUR 0x-ADDRESS>"],\n  "priority-regossip-txs-per-address": 16\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"fee-recipient",children:"Fee Recipient"}),"\n",(0,s.jsxs)(n.p,{children:["This works together with ",(0,s.jsx)(n.a,{href:"#setting-a-custom-fee-recipient",children:(0,s.jsx)(n.code,{children:"allowFeeRecipients"})})," and ",(0,s.jsx)(n.a,{href:"#changing-fee-reward-mechanisms",children:"RewardManager\nprecompile"})," to specify where the fees should be sent to."]}),"\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.code,{children:"allowFeeRecipients"})," enabled, validators can specify their addresses to collect fees."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "feeRecipient": "<YOUR 0x-ADDRESS>"\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"allowFeeRecipients"})," or ",(0,s.jsx)(n.code,{children:"RewardManager"}),' precompile is enabled on the Subnet, but a validator\ndoesn\'t specify a "feeRecipient", the fees will be burned in blocks it produces.']})}),"\n",(0,s.jsx)(n.h2,{id:"network-upgrades-state-upgrades",children:"Network Upgrades: State Upgrades"}),"\n",(0,s.jsx)(n.p,{children:"Subnet-EVM allows the network operators to specify a modification to state that will take place\nat the beginning of the first block with a timestamp greater than or equal to the one specified\nin the configuration."}),"\n",(0,s.jsx)(n.p,{children:"This provides a last resort path to updating non-upgradeable contracts via a network upgrade\n(for example, to fix issues when you are running your own blockchain)."}),"\n",(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsxs)(n.p,{children:["This should only be used as a last resort alternative to forking ",(0,s.jsx)(n.code,{children:"subnet-evm"})," and specifying\nthe network upgrade in code."]}),(0,s.jsx)(n.p,{children:"Using a network upgrade to modify state is not part of normal operations of the\nEVM. You should ensure the modifications do not invalidate any of the assumptions of\ndeployed contracts or cause incompatibilities with downstream infrastructure such as\nblock explorers."})]}),"\n",(0,s.jsxs)(n.p,{children:["The timestamps for upgrades in ",(0,s.jsx)(n.code,{children:"stateUpgrades"})," must be in increasing order.\n",(0,s.jsx)(n.code,{children:"stateUpgrades"})," can be specified along with ",(0,s.jsx)(n.code,{children:"precompileUpgrades"})," or by itself."]}),"\n",(0,s.jsx)(n.p,{children:"The following three state modifications are supported:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"balanceChange"}),": adds a specified amount to the balance of a given account. This amount can be\nspecified as hex or decimal and must be positive."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"storage"}),": modifies the specified storage slots to the specified values. Keys and values must\nbe 32 bytes specified in hex, with a ",(0,s.jsx)(n.code,{children:"0x"})," prefix."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"code"}),": modifies the code stored in the specified account. The\ncode must ",(0,s.jsx)(n.em,{children:"only"})," be the runtime portion of a code. The code must start with a ",(0,s.jsx)(n.code,{children:"0x"})," prefix."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["If modifying the code, ",(0,s.jsx)(n.em,{children:"only"})," the runtime portion of the bytecode should be provided in\n",(0,s.jsx)(n.code,{children:"upgrades.json"}),". Do not use the bytecode that would be used for deploying a new contract, as this\nincludes the constructor code as well. Refer to your compiler's documentation for information\non how to find the runtime portion of the contract you wish to modify."]})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"upgrades.json"})," file shown below describes a network upgrade that will make the following\nstate modifications at the first block after (or at) ",(0,s.jsx)(n.code,{children:"March 8, 2023 1:30:00 AM GMT"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Sets the code for the account at ",(0,s.jsx)(n.code,{children:"0x71562b71999873DB5b286dF957af199Ec94617F7"}),","]}),"\n",(0,s.jsxs)(n.li,{children:["And adds ",(0,s.jsx)(n.code,{children:"100"})," wei to the balance of the account at ",(0,s.jsx)(n.code,{children:"0xb794f5ea0ba39494ce839613fffba74279579268"}),","]}),"\n",(0,s.jsxs)(n.li,{children:["Sets the storage slot ",(0,s.jsx)(n.code,{children:"0x1234"})," to the value ",(0,s.jsx)(n.code,{children:"0x6666"})," for the account at ",(0,s.jsx)(n.code,{children:"0xb794f5ea0ba39494ce839613fffba74279579268"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "stateUpgrades": [\n    {\n      "blockTimestamp": 1678239000,\n      "accounts": {\n        "0x71562b71999873DB5b286dF957af199Ec94617F7": {\n          "code": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c80632e64cec114602d575b600080fd5b60336047565b604051603e91906067565b60405180910390f35b60008054905090565b6000819050919050565b6061816050565b82525050565b6000602082019050607a6000830184605a565b9291505056fea26469706673582212209421042a1fdabcfa2486fb80942da62c28e61fc8362a3f348c4a96a92bccc63c64736f6c63430008120033"\n        },\n        "0xb794f5ea0ba39494ce839613fffba74279579268": {\n          "balanceChange": "0x64",\n          "storage": {\n            "0x0000000000000000000000000000000000000000000000000000000000001234": "0x0000000000000000000000000000000000000000000000000000000000006666"\n          }\n        }\n      }\n    }\n  ]\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},58252:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/admin_fail-7a24c240bf9cad2181ce13791cf96574.png"},44826:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/deploy_fail-0e20c7f3219af06d3be7899768476c04.png"},43540:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var s=i(48318);const t={},a=s.createContext(t);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);