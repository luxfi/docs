"use strict";(self.webpackChunk_luxdocs_network=self.webpackChunk_luxdocs_network||[]).push([[1773],{56698:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var l=n(49214),s=n(43540),o=n(28237),r=n(13262);const a={tags:["Build","Virtual Machines"],description:"In this tutorial, we will go over the different ways we can write test cases for our stateful precompile.",sidebar_label:"Writing Test Cases",pagination_label:"Writing Test Cases",sidebar_position:4},i="Writing Test Cases",c={id:"build/vm/evm/defining-tests",title:"Writing Test Cases",description:"In this tutorial, we will go over the different ways we can write test cases for our stateful precompile.",source:"@site/docs/build/vm/evm/defining-tests.md",sourceDirName:"build/vm/evm",slug:"/build/vm/evm/defining-tests",permalink:"/docs/build/vm/evm/defining-tests",draft:!1,unlisted:!1,editUrl:"https://github.com/luxfi/docs/edit/main/docs/build/vm/evm/defining-tests.md",tags:[{label:"Build",permalink:"/docs/tags/build"},{label:"Virtual Machines",permalink:"/docs/tags/virtual-machines"}],version:"current",sidebarPosition:4,frontMatter:{tags:["Build","Virtual Machines"],description:"In this tutorial, we will go over the different ways we can write test cases for our stateful precompile.",sidebar_label:"Writing Test Cases",pagination_label:"Writing Test Cases",sidebar_position:4},sidebar:"build-vm",previous:{title:"Defining Your Precompile",permalink:"/docs/build/vm/evm/defining-precompile"},next:{title:"Executing Your Test Cases",permalink:"/docs/build/vm/evm/executing-tests"}},d={},u=[{value:"Adding Config Tests",id:"adding-config-tests",level:2},{value:"Adding Contract Tests",id:"adding-contract-tests",level:2},{value:"Adding VM Tests (Optional)",id:"adding-vm-tests-optional",level:2},{value:"Adding Solidity Test Contracts",id:"adding-solidity-test-contracts",level:2},{value:"Adding DS-Test Case",id:"adding-ds-test-case",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.h1,{id:"writing-test-cases",children:"Writing Test Cases"}),"\n","\n",(0,l.jsx)(t.p,{children:"In this section, we will go over the different ways we can write test cases for our stateful precompile."}),"\n",(0,l.jsx)(t.h2,{id:"adding-config-tests",children:"Adding Config Tests"}),"\n",(0,l.jsxs)(t.p,{children:["Precompile generation tool generates skeletons for unit tests as well. Generated config tests will\nbe under ",(0,l.jsx)(t.a,{href:"https://github.com/luxfi/subnet-evm/blob/helloworld-official-tutorial-v2/precompile/contracts/helloworld/config_test.go",children:(0,l.jsx)(t.code,{children:"./precompile/contracts/helloworld/config_test.go"})}),"\nfor Subnet-EVM and ",(0,l.jsx)(t.a,{href:"https://github.com/luxfi/precompile-evm/blob/hello-world-example/helloworld/config_test.go",children:(0,l.jsx)(t.code,{children:"./helloworld/config_test.go"})}),"\nfor Precompile-EVM.\nThere are mainly two functions we need\nto test: ",(0,l.jsx)(t.code,{children:"Verify"})," and ",(0,l.jsx)(t.code,{children:"Equal"}),". ",(0,l.jsx)(t.code,{children:"Verify"})," checks if the precompile is configured correctly. ",(0,l.jsx)(t.code,{children:"Equal"}),"\nchecks if the precompile is equal to another precompile. Generated ",(0,l.jsx)(t.code,{children:"Verify"})," tests contain a valid case.\nYou can add more invalid cases depending on your implementation. ",(0,l.jsx)(t.code,{children:"Equal"})," tests generate some\ninvalid cases to test different timestamps, types, and AllowList cases.\nYou can check each ",(0,l.jsx)(t.code,{children:"config_test.go"})," files for other precompiles\nunder the Subnet-EVM's ",(0,l.jsx)(t.a,{href:"https://github.com/luxfi/subnet-evm/blob/helloworld-official-tutorial-v2/precompile/contracts/",children:(0,l.jsx)(t.code,{children:"./precompile/contracts"})}),"\ndirectory for more examples."]}),"\n",(0,l.jsx)(t.h2,{id:"adding-contract-tests",children:"Adding Contract Tests"}),"\n",(0,l.jsxs)(t.p,{children:["The tool also generates contract tests to make sure our precompile is working correctly. Generated\ntests include cases to test allow list capabilities, gas costs, and calling functions in read-only mode.\nYou can check other ",(0,l.jsx)(t.code,{children:"contract_test.go"})," files in the ",(0,l.jsx)(t.code,{children:"/precompile/contracts"}),". Hello World contract\ntests will be under ",(0,l.jsx)(t.a,{href:"https://github.com/luxfi/subnet-evm/blob/helloworld-official-tutorial-v2/precompile/contracts/helloworld/contract_test.go",children:(0,l.jsx)(t.code,{children:"./precompile/contracts/helloworld/contract_test.go"})}),"\nfor Subnet-EVM and\n",(0,l.jsx)(t.a,{href:"https://github.com/luxfi/precompile-evm/blob/hello-world-example/helloworld/contract_test.go",children:(0,l.jsx)(t.code,{children:"./helloworld/contract_test.go"})}),"\nfor Precompile-EVM.\nWe will also add more test to cover functionalities of ",(0,l.jsx)(t.code,{children:"sayHello()"})," and ",(0,l.jsx)(t.code,{children:"setGreeting()"}),".\nContract tests are defined in a standard structure that each test\ncan customize to their needs. The test structure is as follows:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-go",children:"// PrecompileTest is a test case for a precompile\ntype PrecompileTest struct {\n\t// Caller is the address of the precompile caller\n\tCaller common.Address\n\t// Input the raw input bytes to the precompile\n\tInput []byte\n\t// InputFn is a function that returns the raw input bytes to the precompile\n\t// If specified, Input will be ignored.\n\tInputFn func(t *testing.T) []byte\n\t// SuppliedGas is the amount of gas supplied to the precompile\n\tSuppliedGas uint64\n\t// ReadOnly is whether the precompile should be called in read only\n\t// mode. If true, the precompile should not modify the state.\n\tReadOnly bool\n\t// Config is the config to use for the precompile\n\t// It should be the same precompile config that is used in the\n\t// precompile's configurator.\n\t// If nil, Configure will not be called.\n\tConfig precompileconfig.Config\n\t// BeforeHook is called before the precompile is called.\n\tBeforeHook func(t *testing.T, state contract.StateDB)\n\t// AfterHook is called after the precompile is called.\n\tAfterHook func(t *testing.T, state contract.StateDB)\n\t// ExpectedRes is the expected raw byte result returned by the precompile\n\tExpectedRes []byte\n\t// ExpectedErr is the expected error returned by the precompile\n\tExpectedErr string\n\t// BlockNumber is the block number to use for the precompile's block context\n\tBlockNumber int64\n}\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Each test can populate the fields of the ",(0,l.jsx)(t.code,{children:"PrecompileTest"})," struct to customize the test.\nThis test uses an AllowList helper function\n",(0,l.jsx)(t.code,{children:"allowlist.RunPrecompileWithAllowListTests(t, Module, state.NewTestStateDB, tests)"}),"\nwhich can run all specified tests plus AllowList test suites. If you don't plan to use AllowList,\nyou can directly run them as follows:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-go",children:"\tfor name, test := range tests {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\ttest.Run(t, module, newStateDB(t))\n\t\t})\n\t}\n"})}),"\n",(0,l.jsx)(t.h2,{id:"adding-vm-tests-optional",children:"Adding VM Tests (Optional)"}),"\n",(0,l.jsx)(t.p,{children:"This is only applicable for direct Subnet-EVM forks as test files are not directly exported in\nGolang. If you use Precompile-EVM you can skip this step."}),"\n",(0,l.jsxs)(t.p,{children:["VM tests are tests that run the precompile by calling it through the Subnet-EVM. These are the most\ncomprehensive tests that we can run. If your precompile modifies how the Subnet-EVM works, for example\nchanging blockchain rules, you should add a VM test. For example, you can take a look at the\nTestRewardManagerPrecompileSetRewardAddress function in ",(0,l.jsx)(t.a,{href:"https://github.com/luxfi/subnet-evm/blob/helloworld-official-tutorial-v2/plugin/evm/vm_test.go#L2675",children:"here"}),".\nFor this Hello World example, we don't modify any Subnet-EVM rules, so we don't need to add any VM tests."]}),"\n",(0,l.jsx)(t.h2,{id:"adding-solidity-test-contracts",children:"Adding Solidity Test Contracts"}),"\n",(0,l.jsxs)(t.p,{children:["Let's add our test contract to ",(0,l.jsx)(t.code,{children:"./contracts/contracts"}),". This smart contract lets us interact\nwith our precompile! We cast the ",(0,l.jsx)(t.code,{children:"HelloWorld"})," precompile address to the ",(0,l.jsx)(t.code,{children:"IHelloWorld"}),"interface. In\ndoing so, ",(0,l.jsx)(t.code,{children:"helloWorld"})," is now a contract of type ",(0,l.jsx)(t.code,{children:"IHelloWorld"})," and when we call any functions on\nthat contract, we will be redirected to the HelloWorld precompile address. The below code snippet\ncan be copied and pasted into a new file called ",(0,l.jsx)(t.code,{children:"ExampleHelloWorld.sol"}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-sol",children:'//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport "./IHelloWorld.sol";\n// ExampleHelloWorld shows how the HelloWorld precompile can be used in a smart contract.\ncontract ExampleHelloWorld {\n  address constant HELLO_WORLD_ADDRESS =\n    0x0300000000000000000000000000000000000000;\n  IHelloWorld helloWorld = IHelloWorld(HELLO_WORLD_ADDRESS);\n  function sayHello() public view returns (string memory) {\n    return helloWorld.sayHello();\n  }\n  function setGreeting(string calldata greeting) public {\n    helloWorld.setGreeting(greeting);\n  }\n}\n'})}),"\n",(0,l.jsx)(t.admonition,{type:"warning",children:(0,l.jsx)(t.p,{children:"Hello World Precompile is a different contract than ExampleHelloWorld and has a different address.\nSince the precompile uses AllowList for a permissioned access,\nany call to the precompile including from ExampleHelloWorld will be denied unless\nthe caller is added to the AllowList."})}),"\n",(0,l.jsx)(t.p,{children:"Please note that this contract is simply a wrapper and is calling the precompile functions.\nThe reason why we add another example smart contract is to have a simpler stateless tests."}),"\n",(0,l.jsxs)(t.p,{children:["For the test contract we write our test in ",(0,l.jsx)(t.code,{children:"./contracts/test/ExampleHelloWorldTest.sol"}),"."]}),"\n",(0,l.jsxs)(o.A,{groupId:"evm-tabs",children:[(0,l.jsx)(r.A,{value:"subnet-evm-tab",label:"Subnet-EVM",default:!0,children:(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-sol",children:'//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport "../ExampleHelloWorld.sol";\nimport "../interfaces/IHelloWorld.sol";\nimport "./AllowListTest.sol";\ncontract ExampleHelloWorldTest is AllowListTest {\n  IHelloWorld helloWorld = IHelloWorld(HELLO_WORLD_ADDRESS);\n  function step_getDefaultHelloWorld() public {\n    ExampleHelloWorld example = new ExampleHelloWorld();\n    address exampleAddress = address(example);\n    assertRole(helloWorld.readAllowList(exampleAddress), AllowList.Role.None);\n    assertEq(example.sayHello(), "Hello World!");\n  }\n  function step_doesNotSetGreetingBeforeEnabled() public {\n    ExampleHelloWorld example = new ExampleHelloWorld();\n    address exampleAddress = address(example);\n    assertRole(helloWorld.readAllowList(exampleAddress), AllowList.Role.None);\n    try example.setGreeting("testing") {\n      assertTrue(false, "setGreeting should fail");\n    } catch {}\n  }\n  function step_setAndGetGreeting() public {\n    ExampleHelloWorld example = new ExampleHelloWorld();\n    address exampleAddress = address(example);\n    assertRole(helloWorld.readAllowList(exampleAddress), AllowList.Role.None);\n    helloWorld.setEnabled(exampleAddress);\n    assertRole(\n      helloWorld.readAllowList(exampleAddress),\n      AllowList.Role.Enabled\n    );\n    string memory greeting = "testgreeting";\n    example.setGreeting(greeting);\n    assertEq(example.sayHello(), greeting);\n  }\n}\n'})})}),(0,l.jsxs)(r.A,{value:"precompile-evm-tab",label:"Precompile-EVM",children:[(0,l.jsxs)(t.p,{children:["For Precompile-EVM, you should import ",(0,l.jsx)(t.code,{children:"AllowListTest"})," with ",(0,l.jsx)(t.code,{children:"@luxfi/subnet-evm-contracts"})," NPM package:"]}),(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-sol",children:'//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport "../ExampleHelloWorld.sol";\nimport "../interfaces/IHelloWorld.sol";\nimport "@luxfi/subnet-evm-contracts/contracts/test/AllowListTest.sol";\ncontract ExampleHelloWorldTest is AllowListTest {\n  IHelloWorld helloWorld = IHelloWorld(HELLO_WORLD_ADDRESS);\n  function step_getDefaultHelloWorld() public {\n    ExampleHelloWorld example = new ExampleHelloWorld();\n    address exampleAddress = address(example);\n    assertRole(helloWorld.readAllowList(exampleAddress), AllowList.Role.None);\n    assertEq(example.sayHello(), "Hello World!");\n  }\n  function step_doesNotSetGreetingBeforeEnabled() public {\n    ExampleHelloWorld example = new ExampleHelloWorld();\n    address exampleAddress = address(example);\n    assertRole(helloWorld.readAllowList(exampleAddress), AllowList.Role.None);\n    try example.setGreeting("testing") {\n      assertTrue(false, "setGreeting should fail");\n    } catch {}\n  }\n  function step_setAndGetGreeting() public {\n    ExampleHelloWorld example = new ExampleHelloWorld();\n    address exampleAddress = address(example);\n    assertRole(helloWorld.readAllowList(exampleAddress), AllowList.Role.None);\n    helloWorld.setEnabled(exampleAddress);\n    assertRole(\n      helloWorld.readAllowList(exampleAddress),\n      AllowList.Role.Enabled\n    );\n    string memory greeting = "testgreeting";\n    example.setGreeting(greeting);\n    assertEq(example.sayHello(), greeting);\n  }\n}\n'})})]})]}),"\n",(0,l.jsx)(t.h2,{id:"adding-ds-test-case",children:"Adding DS-Test Case"}),"\n",(0,l.jsxs)(t.p,{children:["We can now trigger this test contract via ",(0,l.jsx)(t.code,{children:"hardhat"})," tests. The test script uses Subnet-EVM's ",(0,l.jsx)(t.code,{children:"test"}),"\nframework test in ",(0,l.jsx)(t.code,{children:"./contracts/test"}),".\nYou can find more information about the test framework ",(0,l.jsx)(t.a,{href:"https://github.com/luxfi/subnet-evm/blob/helloworld-official-tutorial-v2/contracts/test/utils.ts",children:"here"}),"."]}),"\n",(0,l.jsxs)(o.A,{groupId:"evm-tabs",children:[(0,l.jsxs)(r.A,{value:"subnet-evm-tab",label:"Subnet-EVM",default:!0,children:[(0,l.jsx)(t.p,{children:"The test script looks like this:"}),(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-ts",children:'// (c) 2019-2022, Lux Partners, Inc. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nimport { ethers } from "hardhat";\nimport { test } from "./utils";\n\n// make sure this is always an admin for hello world precompile\nconst ADMIN_ADDRESS = "0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC";\nconst HELLO_WORLD_ADDRESS = "0x0300000000000000000000000000000000000000";\n\ndescribe("ExampleHelloWorldTest", function () {\n  this.timeout("30s");\n\n  beforeEach("Setup DS-Test contract", async function () {\n    const signer = await ethers.getSigner(ADMIN_ADDRESS);\n    const helloWorldPromise = ethers.getContractAt(\n      "IHelloWorld",\n      HELLO_WORLD_ADDRESS,\n      signer\n    );\n\n    return ethers\n      .getContractFactory("ExampleHelloWorldTest", { signer })\n      .then((factory) => factory.deploy())\n      .then((contract) => {\n        this.testContract = contract;\n        return contract.deployed().then(() => contract);\n      })\n      .then(() => Promise.all([helloWorldPromise]))\n      .then(([helloWorld]) => helloWorld.setAdmin(this.testContract.address))\n      .then((tx) => tx.wait());\n  });\n\n  test("should gets default hello world", ["step_getDefaultHelloWorld"]);\n\n  test(\n    "should not set greeting before enabled",\n    "step_doesNotSetGreetingBeforeEnabled"\n  );\n\n  test(\n    "should set and get greeting with enabled account",\n    "step_setAndGetGreeting"\n  );\n});\n'})})]}),(0,l.jsxs)(r.A,{value:"precompile-evm-tab",label:"Precompile-EVM",children:[(0,l.jsx)(t.p,{children:"The test script looks like this:"}),(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-ts",children:'// (c) 2019-2022, Lux Partners, Inc. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nimport { ethers } from "hardhat";\nimport { test } from "@luxfi/subnet-evm-contracts";\n\n// make sure this is always an admin for hello world precompile\nconst ADMIN_ADDRESS = "0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC";\nconst HELLO_WORLD_ADDRESS = "0x0300000000000000000000000000000000000000";\n\ndescribe("ExampleHelloWorldTest", function () {\n  this.timeout("30s");\n\n  beforeEach("Setup DS-Test contract", async function () {\n    const signer = await ethers.getSigner(ADMIN_ADDRESS);\n    const helloWorldPromise = ethers.getContractAt(\n      "IHelloWorld",\n      HELLO_WORLD_ADDRESS,\n      signer\n    );\n\n    return ethers\n      .getContractFactory("ExampleHelloWorldTest", { signer })\n      .then((factory) => factory.deploy())\n      .then((contract) => {\n        this.testContract = contract;\n        return contract.deployed().then(() => contract);\n      })\n      .then(() => Promise.all([helloWorldPromise]))\n      .then(([helloWorld]) => helloWorld.setAdmin(this.testContract.address))\n      .then((tx) => tx.wait());\n  });\n\n  test("should gets default hello world", ["step_getDefaultHelloWorld"]);\n\n  test(\n    "should not set greeting before enabled",\n    "step_doesNotSetGreetingBeforeEnabled"\n  );\n\n  test(\n    "should set and get greeting with enabled account",\n    "step_setAndGetGreeting"\n  );\n});\n'})})]})]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},13262:(e,t,n)=>{n.d(t,{A:()=>r});n(48318);var l=n(23372);const s={tabItem:"tabItem_QyJb"};var o=n(49214);function r(e){let{children:t,hidden:n,className:r}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,l.A)(s.tabItem,r),hidden:n,children:t})}},28237:(e,t,n)=>{n.d(t,{A:()=>y});var l=n(48318),s=n(23372),o=n(70604),r=n(66325),a=n(849),i=n(54313),c=n(77638),d=n(75590);function u(e){return l.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,l.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:l,default:s}}=e;return{value:t,label:n,attributes:l,default:s}}))}(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const s=(0,r.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i.aZ)(o),(0,l.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(s.location.search);t.set(o,e),s.replace({...s.location,search:t.toString()})}),[o,s])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,o=h(e),[r,i]=(0,l.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const l=n.find((e=>e.default))??n[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:t,tabValues:o}))),[c,u]=m({queryString:n,groupId:s}),[f,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,o]=(0,d.Dv)(n);return[s,(0,l.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:s}),x=(()=>{const e=c??f;return p({value:e,tabValues:o})?e:null})();(0,a.A)((()=>{x&&i(x)}),[x]);return{selectedValue:r,selectValue:(0,l.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),g(e)}),[u,g,o]),tabValues:o}}var g=n(16883);const x={tabList:"tabList_hAgJ",tabItem:"tabItem_inov"};var b=n(49214);function w(e){let{className:t,block:n,selectedValue:l,selectValue:r,tabValues:a}=e;const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),d=e=>{const t=e.currentTarget,n=i.indexOf(t),s=a[n].value;s!==l&&(c(t),r(s))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;t=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;t=i[n]??i[i.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},t),children:a.map((e=>{let{value:t,label:n,attributes:o}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,ref:e=>i.push(e),onKeyDown:u,onClick:d,...o,className:(0,s.A)("tabs__item",x.tabItem,o?.className,{"tabs__item--active":l===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:s}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===s));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:o.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function E(e){const t=f(e);return(0,b.jsxs)("div",{className:(0,s.A)("tabs-container",x.tabList),children:[(0,b.jsx)(w,{...t,...e}),(0,b.jsx)(v,{...t,...e})]})}function y(e){const t=(0,g.A)();return(0,b.jsx)(E,{...e,children:u(e.children)},String(t))}},43540:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var l=n(48318);const s={},o=l.createContext(s);function r(e){const t=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),l.createElement(o.Provider,{value:t},e.children)}}}]);