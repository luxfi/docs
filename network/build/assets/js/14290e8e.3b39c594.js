"use strict";(self.webpackChunk_luxdocs_network=self.webpackChunk_luxdocs_network||[]).push([[6159],{43112:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var s=t(49214),i=t(43540);const a={tags:["Lux Warp Messaging","Cross-Subnet Communication"],description:"AWM allows seamless communication between different subnetworks on Lux, enabling developers to establish custom communication protocols.",keywords:["docs","documentation","lux","lux warp messaging","awm","cross-subnet communication","cross-chain"],sidebar_label:"Lux Warp Messaging"},o="Lux Warp Messaging",r={id:"learn/lux/awm",title:"Lux Warp Messaging",description:"AWM allows seamless communication between different subnetworks on Lux, enabling developers to establish custom communication protocols.",source:"@site/docs/learn/lux/awm.md",sourceDirName:"learn/lux",slug:"/learn/lux/awm",permalink:"/docs/learn/lux/awm",draft:!1,unlisted:!1,editUrl:"https://github.com/luxfi/docs/edit/main/docs/learn/lux/awm.md",tags:[{label:"Lux Warp Messaging",permalink:"/docs/tags/lux-warp-messaging"},{label:"Cross-Subnet Communication",permalink:"/docs/tags/cross-subnet-communication"}],version:"current",frontMatter:{tags:["Lux Warp Messaging","Cross-Subnet Communication"],description:"AWM allows seamless communication between different subnetworks on Lux, enabling developers to establish custom communication protocols.",keywords:["docs","documentation","lux","lux warp messaging","awm","cross-subnet communication","cross-chain"],sidebar_label:"Lux Warp Messaging"},sidebar:"learn",previous:{title:"Virtual Machines",permalink:"/docs/learn/lux/virtual-machines"},next:{title:"Disclaimer",permalink:"/docs/disclaimer"}},l={},c=[{value:"Use Cases",id:"use-cases",level:2},{value:"Elements of Cross-Subnet Communication",id:"elements-of-cross-subnet-communication",level:2},{value:"Signing Messages on the Origin Subnet",id:"signing-messages-on-the-origin-subnet",level:3},{value:"Signature Aggregation on the Origin Subnet",id:"signature-aggregation-on-the-origin-subnet",level:3},{value:"Delivery of Messages to the Destination Subnet",id:"delivery-of-messages-to-the-destination-subnet",level:3},{value:"Verification of Messages in the Destination Subnet",id:"verification-of-messages-in-the-destination-subnet",level:3},{value:"Reference Implementation",id:"reference-implementation",level:2}];function u(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"lux-warp-messaging",children:"Lux Warp Messaging"}),"\n",(0,s.jsxs)(n.p,{children:["Lux Warp Messaging (AWM) enables native cross-Subnet communication and allows\n",(0,s.jsx)(n.a,{href:"/docs/learn/lux/subnets-overview#virtual-machines",children:"Virtual Machine (VM)"})," developers to implement arbitrary\ncommunication protocols\nbetween any two Subnets."]}),"\n",(0,s.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,s.jsx)(n.p,{children:"Use cases for AWM may include but is not limited to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Oracle Networks: Connecting a Subnet to an oracle network is a costly process. AWM makes it easy\nfor oracle networks to broadcast their data from their origin chain to other Subnets."}),"\n",(0,s.jsx)(n.li,{children:"Token transfers between Subnets"}),"\n",(0,s.jsx)(n.li,{children:"State Sharding between multiple Subnets"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"elements-of-cross-subnet-communication",children:"Elements of Cross-Subnet Communication"}),"\n",(0,s.jsx)(n.p,{children:"The communication consists of the following four steps:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"image showing four steps of cross-Subnet communication: Signing, aggregation, Delivery and Verification",src:t(1673).A+"",width:"861",height:"205"})}),"\n",(0,s.jsx)(n.h3,{id:"signing-messages-on-the-origin-subnet",children:"Signing Messages on the Origin Subnet"}),"\n",(0,s.jsxs)(n.p,{children:["AWM is a low-level messaging protocol. Any type of data encoded in an array of bytes can be included\nin the message sent to another Subnet. AWM uses the ",(0,s.jsx)(n.a,{href:"https://crypto.stanford.edu/~dabo/pubs/papers/BLSmultisig.html",children:"BLS signature\nscheme"}),", which allows message\nrecipients to verify the authenticity of these messages. Therefore, every validator on the Lux\nnetwork holds a BLS key pair, consisting of a private key for signing messages and a public key that\nothers can use to verify the signature."]}),"\n",(0,s.jsx)(n.h3,{id:"signature-aggregation-on-the-origin-subnet",children:"Signature Aggregation on the Origin Subnet"}),"\n",(0,s.jsx)(n.p,{children:"If the validator set of a Subnet is very large, this would result in the Subnet's validators sending\nmany signatures between them. One of the powerful features of BLS is the ability to aggregate many\nsignatures of different signers in a single multi-signature. Therefore, validators of one Subnet can\nnow individually sign a message and these signatures are then aggregated into a short\nmulti-signature that can be quickly verified."}),"\n",(0,s.jsx)(n.h3,{id:"delivery-of-messages-to-the-destination-subnet",children:"Delivery of Messages to the Destination Subnet"}),"\n",(0,s.jsx)(n.p,{children:"The messages do not pass through a central protocol or trusted entity, and there is no record of\nmessages sent between Subnets on the primary network. This avoids a bottleneck in Subnet-to-Subnet\ncommunication, and non-public Subnets can communicate privately."}),"\n",(0,s.jsx)(n.p,{children:"It is up to the Subnets and their users to determine how they want to transport data from the\nvalidators of the origin Subnet to the validators of the destination Subnet and what guarantees they\nwant to provide for the transport."}),"\n",(0,s.jsx)(n.h3,{id:"verification-of-messages-in-the-destination-subnet",children:"Verification of Messages in the Destination Subnet"}),"\n",(0,s.jsx)(n.p,{children:"When a Subnet wants to process another Subnet's message, it will look up both BLS Public Keys and\nstake of the origin Subnet. The authenticity of the message can be verified using these public keys\nand the signature."}),"\n",(0,s.jsx)(n.p,{children:"The combined weight of the validators that must be part of the BLS multi-signature to be considered\nvalid can be set according to the individual requirements of each Subnet-to-Subnet communication.\nSubnet A may accept messages from Subnet B that are signed by at least 70% of stake. Messages from\nSubnet C are only accepted if they have been signed by validators that account for 90% of the stake."}),"\n",(0,s.jsx)(n.p,{children:"Since both the public keys and stake weights of all validators are recorded on the\nprimary network's P-chain, they are readily accessible to any virtual machine run by the validators.\nTherefore, the Subnets do not need to communicate with each other about changes in their respective\nsets of validators, but can simply rely on the latest information on the P-Chain. Therefore, AWM\nintroduces no additional trust assumption other than that the validators of the origin Subnet are\nparticipating honestly."}),"\n",(0,s.jsx)(n.h2,{id:"reference-implementation",children:"Reference Implementation"}),"\n",(0,s.jsxs)(n.p,{children:["A Proof-of-Concept VM called ",(0,s.jsx)(n.a,{href:"https://github.com/luxfi/xsvm",children:"XSVM"})," was created to demonstrate the\npower of AWM. XSVM enables simple AWM transfers between any two Subnets if run out-of-the-box."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},1673:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/cross-subnet-communication-a23e95e6ffa89cde1c11d562824ee29f.png"},43540:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(48318);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);