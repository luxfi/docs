"use strict";(self.webpackChunk_luxdocs_network=self.webpackChunk_luxdocs_network||[]).push([[7180],{93758:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var s=t(49214),o=t(43540);const i={tags:["Build","Subnets"],description:"This tutorial demonstrates how to deploy a permissioned Subnet on Testnet.",sidebar_label:"On Testnet",pagination_label:"Deploy a Permissioned Subnet on Testnet",sidebar_position:1},a="Deploy a Permissioned Subnet on Testnet",r={id:"build/subnet/deploy/testnet-subnet",title:"Deploy a Permissioned Subnet on Testnet",description:"This tutorial demonstrates how to deploy a permissioned Subnet on Testnet.",source:"@site/docs/build/subnet/deploy/testnet-subnet.md",sourceDirName:"build/subnet/deploy",slug:"/build/subnet/deploy/testnet-subnet",permalink:"/docs/build/subnet/deploy/testnet-subnet",draft:!1,unlisted:!1,editUrl:"https://github.com/luxfi/docs/edit/main/docs/build/subnet/deploy/testnet-subnet.md",tags:[{label:"Build",permalink:"/docs/tags/build"},{label:"Subnets",permalink:"/docs/tags/subnets"}],version:"current",sidebarPosition:1,frontMatter:{tags:["Build","Subnets"],description:"This tutorial demonstrates how to deploy a permissioned Subnet on Testnet.",sidebar_label:"On Testnet",pagination_label:"Deploy a Permissioned Subnet on Testnet",sidebar_position:1},sidebar:"build-subnet",previous:{title:"Customize your EVM-Powered Subnet",permalink:"/docs/build/subnet/deploy/local-subnet"},next:{title:"Deploy a Permissioned Subnet on Mainnet",permalink:"/docs/build/subnet/deploy/mainnet-subnet"}},d={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Virtual Machine",id:"virtual-machine",level:2},{value:"Testnet",id:"testnet",level:2},{value:"Lux-CLI",id:"lux-cli",level:2},{value:"Private Key",id:"private-key",level:3},{value:"Funding the Key",id:"funding-the-key",level:4},{value:"Create an EVM Subnet",id:"create-an-evm-subnet",level:2},{value:"Deploy the Subnet",id:"deploy-the-subnet",level:2},{value:"Request to Join a Subnet as a Validator",id:"request-to-join-a-subnet-as-a-validator",level:2},{value:"Add a Validator",id:"add-a-validator",level:2},{value:"Subnet Export",id:"subnet-export",level:2},{value:"Subnet Import",id:"subnet-import",level:2},{value:"Appendix",id:"appendix",level:2},{value:"Connect with Core",id:"connect-with-core",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"deploy-a-permissioned-subnet-on-testnet",children:"Deploy a Permissioned Subnet on Testnet"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This document describes how to use the new Lux-CLI to deploy a Subnet on ",(0,s.jsx)(n.code,{children:"Testnet"}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["After trying out a Subnet on a local box by following ",(0,s.jsx)(n.a,{href:"/docs/build/subnet/deploy/local-subnet",children:"this tutorial"}),",\nnext step is to try it out on ",(0,s.jsx)(n.code,{children:"Testnet"})," Testnet."]}),"\n",(0,s.jsxs)(n.p,{children:["In this article, it's shown how to do the following on ",(0,s.jsx)(n.code,{children:"Testnet"})," Testnet."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Create a Subnet."}),"\n",(0,s.jsx)(n.li,{children:"Deploy a virtual machine based on Subnet-EVM."}),"\n",(0,s.jsx)(n.li,{children:"Join a node to the newly created Subnet."}),"\n",(0,s.jsx)(n.li,{children:"Add a node as a validator to the Subnet."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"All IDs in this article are for illustration purposes. They can be different in your own\nrun-through of this tutorial."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["1+ nodes running and fully bootstrapped on ",(0,s.jsx)(n.code,{children:"Testnet"})," Testnet. Check out the section\n",(0,s.jsx)(n.a,{href:"/docs/nodes/",children:"Nodes"})," on how to run a node and become a validator."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/luxfi/cli",children:(0,s.jsx)(n.code,{children:"Lux-CLI"})})," installed"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"virtual-machine",children:"Virtual Machine"}),"\n",(0,s.jsxs)(n.p,{children:["Lux can run multiple blockchains. Each blockchain is an instance of a\n",(0,s.jsx)(n.a,{href:"/docs/learn/lux/subnets-overview#virtual-machines",children:"Virtual Machine"}),", much like an object in\nan object-oriented language is an instance of a class.\nThat's, the VM defines the behavior of the blockchain."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/luxfi/subnet-evm",children:"Subnet-EVM"})," is the VM that defines the Subnet Contract\nChains. Subnet-EVM is a simplified version of ",(0,s.jsx)(n.a,{href:"https://github.com/luxfi/coreth",children:"Lux C-Chain"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This chain implements the Ethereum Virtual Machine and supports Solidity smart contracts as well as\nmost other Ethereum client features."}),"\n",(0,s.jsx)(n.h2,{id:"testnet",children:"Testnet"}),"\n",(0,s.jsxs)(n.p,{children:["For this tutorial, it's recommended that you follow\n",(0,s.jsx)(n.a,{href:"/docs/nodes/run/node-manually#connect-to-testnet",children:"Run a Lux Node Manually"}),"\nand this step below particularly to start your node on ",(0,s.jsx)(n.code,{children:"Testnet"}),":"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["To connect to the Testnet instead of the main net, use argument ",(0,s.jsx)(n.code,{children:"--network-id=Testnet"})]})}),"\n",(0,s.jsxs)(n.p,{children:["Also it's worth pointing out that\n",(0,s.jsx)(n.a,{href:"/docs/nodes/validate/what-is-staking#testnet",children:"it only needs 1 LUX to become a validator on the Testnet"}),"\nand you can get the test token from the ",(0,s.jsx)(n.a,{href:"https://faucet.lux.network/",children:"faucet"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["To get the NodeID of this ",(0,s.jsx)(n.code,{children:"Testnet"})," node, call the following curl command to ",(0,s.jsx)(n.a,{href:"/docs/reference/luxd/info-api#infogetnodeid",children:"info.getNodeID"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:'curl -X POST --data \'{\n    "jsonrpc":"2.0",\n    "id"     :1,\n    "method" :"info.getNodeID"\n}\' -H \'content-type:application/json;\' 127.0.0.1:9650/ext/info\n'})}),"\n",(0,s.jsx)(n.p,{children:"The response should look something like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "jsonrpc": "2.0",\n  "result": {\n    "nodeID": "NodeID-5mb46qkSBj81k9g9e4VFjGGSbaaSLFRzD"\n  },\n  "id": 1\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["That portion that says, ",(0,s.jsx)(n.code,{children:"NodeID-5mb46qkSBj81k9g9e4VFjGGSbaaSLFRzD"})," is the NodeID, the entire thing.\nThe user is going to need this ID in the later section when calling ",(0,s.jsx)(n.a,{href:"#add-a-validator",children:"addValidator"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["With more data on ",(0,s.jsx)(n.code,{children:"Testnet"}),", it may take a while to bootstrap ",(0,s.jsx)(n.code,{children:"Testnet"})," Testnet from scratch.\nYou can use ",(0,s.jsx)(n.a,{href:"/docs/nodes/configure/chain-config-flags#state-sync-enabled-boolean",children:"State-Sync"}),"\nto shorten the time for bootstrapping."]})}),"\n",(0,s.jsx)(n.h2,{id:"lux-cli",children:"Lux-CLI"}),"\n",(0,s.jsxs)(n.p,{children:["If not yet installed, install ",(0,s.jsx)(n.code,{children:"Lux-CLI"})," following the tutorial at ",(0,s.jsx)(n.a,{href:"/docs/tooling/cli-guides/install-cli",children:"Lux-CLI installation"})]}),"\n",(0,s.jsx)(n.h3,{id:"private-key",children:"Private Key"}),"\n",(0,s.jsx)(n.p,{children:"All commands which issue a transaction require either a private key loaded into the tool, or\na connected ledger device."}),"\n",(0,s.jsxs)(n.p,{children:["This tutorial focuses on stored key usage and leave ledger operation details for the ",(0,s.jsx)(n.code,{children:"Mainnet"}),"\ndeploy one, as ",(0,s.jsx)(n.code,{children:"Mainnet"})," operations requires ledger usage, while for ",(0,s.jsx)(n.code,{children:"Testnet"})," it's optional."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Lux-CLI"})," supports the following key operations:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"create"}),"\n",(0,s.jsx)(n.li,{children:"delete"}),"\n",(0,s.jsx)(n.li,{children:"export"}),"\n",(0,s.jsx)(n.li,{children:"list"}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["You should only use the private key created for this tutorial for testing operations on ",(0,s.jsx)(n.code,{children:"Testnet"})," or\nother testnets. Don't use this key on ",(0,s.jsx)(n.code,{children:"Mainnet"}),". CLI is going to store the key on your file\nsystem. Whoever gets access to that key is going to have access to all funds secured by that\nprivate key. To deploy to ",(0,s.jsx)(n.code,{children:"Mainnet"}),", follow ",(0,s.jsx)(n.a,{href:"/docs/build/subnet/deploy/mainnet-subnet",children:"this tutorial"}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["Run ",(0,s.jsx)(n.code,{children:"create"})," if you don't have any private key available yet. You can create multiple named keys.\nEach command requiring a key is going to therefore require the appropriate key name you want to use."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"lux key create mytestkey\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This is going to generate a new key named ",(0,s.jsx)(n.code,{children:"mytestkey"}),". The command is going to then also print addresses\nassociated with the key:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Generating new key...\nKey created\n+-----------+-------------------------------+-------------------------------------------------+---------------+\n| KEY NAME  |             CHAIN             |                     ADDRESS                     |    NETWORK    |\n+-----------+-------------------------------+-------------------------------------------------+---------------+\n| mytestkey | C-Chain (Ethereum hex format) | 0x86BB07a534ADF43786ECA5Dd34A97e3F96927e4F      | All           |\n+           +-------------------------------+-------------------------------------------------+---------------+\n|           | P-Chain (Bech32 format)       | P-custom1a3azftqvygc4tlqsdvd82wks2u7nx85rg7v8ta | Local Network |\n+           +                               +-------------------------------------------------+---------------+\n|           |                               | P-testnet1a3azftqvygc4tlqsdvd82wks2u7nx85rhk6zqh   | Testnet          |\n+-----------+-------------------------------+-------------------------------------------------+---------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You may use the C-Chain address (",(0,s.jsx)(n.code,{children:"0x86BB07a534ADF43786ECA5Dd34A97e3F96927e4F"}),") to\nfund your key from the ",(0,s.jsx)(n.a,{href:"https://faucet.lux.network/",children:"faucet"}),". The command also prints P-Chain\naddresses for both the default local network and ",(0,s.jsx)(n.code,{children:"Testnet"}),". The latter\n(",(0,s.jsx)(n.code,{children:"P-testnet1a3azftqvygc4tlqsdvd82wks2u7nx85rhk6zqh"}),") is the one needed for this tutorial."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"delete"})," command of course deletes a private key:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"lux key delete mytestkey\n"})}),"\n",(0,s.jsx)(n.p,{children:"Be careful though to always have a key available for commands involving transactions."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"export"})," command is going to ",(0,s.jsx)(n.strong,{children:"print your private key"})," in hex format to stdout."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"lux key export mytestkey\n21940fbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb5f0b\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"this key is intentionally modified"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["You can also ",(0,s.jsx)(n.strong,{children:"import"})," a key by using the ",(0,s.jsx)(n.code,{children:"--file"})," flag with a path argument and also providing a\nname to it:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"lux key create othertest --file /tmp/test.pk\nLoading user key...\nKey loaded\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Finally, the ",(0,s.jsx)(n.code,{children:"list"})," command is going to list all your keys in your system and their associated addresses\n(CLI stores the keys in a special directory on your file system, tampering with the directory is\ngoing to result in malfunction of the tool)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"lux key list\n+-----------+-------------------------------+-------------------------------------------------+---------------+\n| KEY NAME  |             CHAIN             |                     ADDRESS                     |    NETWORK    |\n+-----------+-------------------------------+-------------------------------------------------+---------------+\n| othertest | C-Chain (Ethereum hex format) | 0x36c83263e33f9e87BB98D3fEb54a01E35a3Fa735      | All           |\n+           +-------------------------------+-------------------------------------------------+---------------+\n|           | P-Chain (Bech32 format)       | P-custom1n5n4h99j3nx8hdrv50v8ll7aldm383nap6rh42 | Local Network |\n+           +                               +-------------------------------------------------+---------------+\n|           |                               | P-testnet1n5n4h99j3nx8hdrv50v8ll7aldm383na7j4j7q   | Testnet          |\n+-----------+-------------------------------+-------------------------------------------------+---------------+\n| mytestkey | C-Chain (Ethereum hex format) | 0x86BB07a534ADF43786ECA5Dd34A97e3F96927e4F      | All           |\n+           +-------------------------------+-------------------------------------------------+---------------+\n|           | P-Chain (Bech32 format)       | P-custom1a3azftqvygc4tlqsdvd82wks2u7nx85rg7v8ta | Local Network |\n+           +                               +-------------------------------------------------+---------------+\n|           |                               | P-testnet1a3azftqvygc4tlqsdvd82wks2u7nx85rhk6zqh   | Testnet          |\n+-----------+-------------------------------+-------------------------------------------------+---------------+\n"})}),"\n",(0,s.jsx)(n.h4,{id:"funding-the-key",children:"Funding the Key"}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsxs)(n.p,{children:["Do these steps only to follow this tutorial for ",(0,s.jsx)(n.code,{children:"Testnet"})," addresses. To access the wallet for ",(0,s.jsx)(n.code,{children:"Mainnet"}),",\nthe use of a ledger device is strongly recommended."]})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["A newly created key has no funds on it. Send funds via transfer to its correspondent addresses\nif you already have funds on a different address, or get it from the faucet at\n",(0,s.jsx)(n.a,{href:"https://faucet.lux.network/",children:(0,s.jsx)(n.code,{children:"https://faucet.lux.network"})})," using your ",(0,s.jsx)(n.strong,{children:"C-Chain address"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Export"})," your key via the ",(0,s.jsx)(n.code,{children:"lux key export"})," command. The output is your private key,\nwhich will help you ",(0,s.jsx)(n.a,{href:"https://support.lux.network/en/articles/6821877-core-extension-how-can-i-import-an-account",children:"import"}),"\nyour account into the Core extension."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Connect Core extension to ",(0,s.jsx)(n.a,{href:"https://core.app/",children:"Core web"}),", and move the test funds from C-Chain to the P-Chain\nby clicking Stake, then Cross-Chain Transfer (find more details on\n",(0,s.jsx)(n.a,{href:"https://support.lux.network/en/articles/8133713-core-web-how-do-i-make-cross-chain-transfers-in-core-stake",children:"this tutorial"}),")."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["After following these 3 steps, your test key should now have a balance on the P-Chain on ",(0,s.jsx)(n.code,{children:"Testnet"})," Testnet."]}),"\n",(0,s.jsx)(n.h2,{id:"create-an-evm-subnet",children:"Create an EVM Subnet"}),"\n",(0,s.jsxs)(n.p,{children:["Creating a Subnet with ",(0,s.jsx)(n.code,{children:"Lux-CLI"})," for ",(0,s.jsx)(n.code,{children:"Testnet"})," works the same way as with a\n",(0,s.jsx)(n.a,{href:"/docs/build/subnet/deploy/local-subnet#create-a-custom-subnet-configuration",children:"local network"}),". In fact,\nthe ",(0,s.jsx)(n.code,{children:"create"})," commands only creates a specification of your Subnet on the local file system.\nAfterwards the\nSubnet needs to be ",(0,s.jsx)(n.em,{children:"deployed"}),". This allows to reuse configs, by creating the config with the\n",(0,s.jsx)(n.code,{children:"create"})," command, then first deploying to a local network and successively to ",(0,s.jsx)(n.code,{children:"Testnet"})," - and\neventually to ",(0,s.jsx)(n.code,{children:"Mainnet"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["To create an EVM Subnet, run the ",(0,s.jsx)(n.code,{children:"subnet create"})," command with a name of your choice:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"lux subnet create testsubnet\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This is going to start a series of prompts to customize your EVM Subnet to your needs. Most prompts have\nsome validation to reduce issues due to invalid input. The first prompt asks for the type of the\nvirtual machine (see ",(0,s.jsx)(n.a,{href:"#virtual-machine",children:"Virtual Machine"}),")."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Use the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190\n? Choose your VM:\n  \u25b8 SubnetEVM\n    Custom\n"})}),"\n",(0,s.jsxs)(n.p,{children:["As you want to create an EVM Subnet, just accept the default ",(0,s.jsx)(n.code,{children:"Subnet-EVM"}),".\nNext, CLI asks for the ChainID. You should provide your own ID. Check\n",(0,s.jsx)(n.a,{href:"https://chainlist.org/",children:"chainlist.org"})," to see if the value you'd like is already in use."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\u2714 Subnet-EVM\ncreating subnet testsubnet\nEnter your subnet's ChainId. It can be any positive integer.\nChainId: 3333\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now, provide a symbol of your choice for the token of this EVM:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Select a symbol for your subnet's native token\nToken symbol: TST\n"})}),"\n",(0,s.jsx)(n.p,{children:"At this point, CLI prompts the user for the fee structure of the Subnet, so that he can tune the fees\nto the needs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Use the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190\n? How would you like to set fees:\n  \u25b8 Low disk use    / Low Throughput    1.5 mil gas/s (C-Chain's setting)\n    Medium disk use / Medium Throughput 2 mil   gas/s\n    High disk use   / High Throughput   5 mil   gas/s\n    Customize fee config\n    Go back to previous step\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can navigate with the arrow keys to select the suitable setting. Use\n",(0,s.jsx)(n.code,{children:"Low disk use / Low Throughput 1.5 mil gas/s"})," for this tutorial."]}),"\n",(0,s.jsx)(n.p,{children:"The next question is about the airdrop:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\u2714 Low disk use    / Low Throughput    1.5 mil gas/s\nUse the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190\n? How would you like to distribute funds:\n  \u25b8 Airdrop 1 million tokens to the default address (do not use in production)\n    Customize your airdrop\n    Go back to previous step\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can accept the default -again, NOT for production-, or customize your airdrop. In the latter\ncase the wizard would continue. Assume the default here."}),"\n",(0,s.jsxs)(n.p,{children:["The final question is asking for precompiles. Precompiles are powerful customizations of your EVM.\nRead about them at ",(0,s.jsx)(n.a,{href:"/docs/build/subnet/upgrade/customize-a-subnet#precompiles",children:"precompiles"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\u2714 Airdrop 1 million tokens to the default address (do not use in production)\nUse the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190\n? Advanced: Would you like to add a custom precompile to modify the EVM?:\n  \u25b8 No\n    Yes\n    Go back to previous step\n"})}),"\n",(0,s.jsx)(n.p,{children:"For this tutorial, assume the simple case of no additional precompile. This finalizes the\nprompt sequence and the command exits:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\u2714 No\nSuccessfully created genesis\n"})}),"\n",(0,s.jsx)(n.p,{children:"It's possible to end the process with Ctrl-C at any time."}),"\n",(0,s.jsx)(n.p,{children:"At this point, CLI creates the specification of the new Subnet on disk, but isn't deployed yet."}),"\n",(0,s.jsxs)(n.p,{children:["Print the specification to disk by running the ",(0,s.jsx)(n.code,{children:"describe"})," command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"lux subnet describe testsubnet\n _____       _        _ _\n|  __ \\     | |      (_) |\n| |  | | ___| |_ __ _ _| |___\n| |  | |/ _ \\ __/ _  | | / __|\n| |__| |  __/ || (_| | | \\__ \\\n|_____/ \\___|\\__\\__,_|_|_|___/\n+----------------------------+----------------------------------------------------+\n|         PARAMETER          |                       VALUE                        |\n+----------------------------+----------------------------------------------------+\n| Subnet Name                | testsubnet                                         |\n+----------------------------+----------------------------------------------------+\n| ChainID                    | 3333                                               |\n+----------------------------+----------------------------------------------------+\n| Token Name                 | TST                                               |\n+----------------------------+----------------------------------------------------+\n| VM ID                      | tGBrM2SXkAdNsqzb3SaFZZWMNdzjjFEUKteheTa4dhUwnfQyu  |\n+----------------------------+----------------------------------------------------+\n| Testnet SubnetID              | XTK7AM2Pw5A4cCtQ3rTugqbeLCU9mVixML3YwwLYUJ4WXN2Kt  |\n+----------------------------+----------------------------------------------------+\n| Testnet BlockchainID          | 5ce2WhnyeMELzg9UtfpCDGNwRa2AzMzRhBWfTqmFuiXPWE4TR  |\n+----------------------------+----------------------------------------------------+\n| Local Network SubnetID     | 2CZP2ndbQnZxTzGuZjPrJAm5b4s2K2Bcjh8NqWoymi8NZMLYQk |\n+----------------------------+----------------------------------------------------+\n| Local Network BlockchainID | oaCmwvn8FDuv8QjeTozGpHeczk1Kv2651j2jhm6sR1nraGwVW  |\n+----------------------------+----------------------------------------------------+\n\n  _____              _____             __ _\n / ____|            / ____|           / _(_)\n| |  __  __ _ ___  | |     ___  _ __ | |_ _  __ _\n| | |_ |/ _  / __| | |    / _ \\| '_ \\|  _| |/ _  |\n| |__| | (_| \\__ \\ | |___| (_) | | | | | | | (_| |\n \\_____|\\__,_|___/  \\_____\\___/|_| |_|_| |_|\\__, |\n                                             __/ |\n                                            |___/\n+--------------------------+-------------+\n|      GAS PARAMETER       |    VALUE    |\n+--------------------------+-------------+\n| GasLimit                 |     15000000 |\n+--------------------------+-------------+\n| MinBaseFee               | 25000000000 |\n+--------------------------+-------------+\n| TargetGas (per 10s)      |    20000000 |\n+--------------------------+-------------+\n| BaseFeeChangeDenominator |          36 |\n+--------------------------+-------------+\n| MinBlockGasCost          |           0 |\n+--------------------------+-------------+\n| MaxBlockGasCost          |     1000000 |\n+--------------------------+-------------+\n| TargetBlockRate          |           2 |\n+--------------------------+-------------+\n| BlockGasCostStep         |      200000 |\n+--------------------------+-------------+\n\n          _         _\n    /\\   (_)       | |\n   /  \\   _ _ __ __| |_ __ ___  _ __\n  / /\\ \\ | | '__/ _  | '__/ _ \\| '_ \\\n / ____ \\| | | | (_| | | | (_) | |_) |\n/_/    \\_\\_|_|  \\__,_|_|  \\___/| .__/\n                               | |\n                               |_|\n+--------------------------------------------+------------------------+---------------------------+\n|                  ADDRESS                   | AIRDROP AMOUNT (10^18) |   AIRDROP AMOUNT (WEI)    |\n+--------------------------------------------+------------------------+---------------------------+\n| 0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC |                1000000 | 1000000000000000000000000 |\n+--------------------------------------------+------------------------+---------------------------+\n\n\n  _____                                    _ _\n |  __ \\                                  (_) |\n | |__) | __ ___  ___ ___  _ __ ___  _ __  _| | ___  ___\n |  ___/ '__/ _ \\/ __/ _ \\| '_   _ \\| '_ \\| | |/ _ \\/ __|\n | |   | | |  __/ (_| (_) | | | | | | |_) | | |  __/\\__ \\\n |_|   |_|  \\___|\\___\\___/|_| |_| |_| .__/|_|_|\\___||___/\n                                    | |\n                                    |_|\n\nNo precompiles set\n"})}),"\n",(0,s.jsx)(n.p,{children:"Also you can list the available Subnets:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"lux subnet list\ngo run main.go subnet list\n+-------------+-------------+----------+---------------------------------------------------+------------+-----------+\n|   SUBNET    |    CHAIN    | CHAIN ID |                       VM ID                       |    TYPE    | FROM REPO |\n+-------------+-------------+----------+---------------------------------------------------+------------+-----------+\n| testsubnet  | testsubnet  |     3333 | tGBrM2SXkAdNsqzb3SaFZZWMNdzjjFEUKteheTa4dhUwnfQyu | Subnet-EVM | false     |\n+-------------+-------------+----------+---------------------------------------------------+------------+-----------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"List deployed information:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"lux subnet list --deployed\ngo run main.go subnet list --deployed\n+-------------+-------------+---------------------------------------------------+---------------+-----------------------------------------------------------------+---------+\n|   SUBNET    |    CHAIN    |                       VM ID                       | LOCAL NETWORK |                          FUJI (TESTNET)                         | MAINNET |\n+-------------+-------------+---------------------------------------------------+---------------+-----------------------------------------------------------------+---------+\n| testsubnet  | testsubnet  | tGBrM2SXkAdNsqzb3SaFZZWMNdzjjFEUKteheTa4dhUwnfQyu | Yes           | SubnetID: XTK7AM2Pw5A4cCtQ3rTugqbeLCU9mVixML3YwwLYUJ4WXN2Kt     | No      |\n+             +             +                                                   +               +-----------------------------------------------------------------+---------+\n|             |             |                                                   |               | BlockchainID: 5ce2WhnyeMELzg9UtfpCDGNwRa2AzMzRhBWfTqmFuiXPWE4TR | No      |\n+-------------+-------------+---------------------------------------------------+---------------+-----------------------------------------------------------------+---------+\n\n"})}),"\n",(0,s.jsx)(n.h2,{id:"deploy-the-subnet",children:"Deploy the Subnet"}),"\n",(0,s.jsx)(n.p,{children:"To deploy the new Subnet, run"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"lux subnet deploy testsubnet\n"})}),"\n",(0,s.jsx)(n.p,{children:"This is going to start a new prompt series."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Use the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190\n? Choose a network to deploy on:\n  \u25b8 Local Network\n    Testnet\n    Mainnet\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This tutorial is about deploying to ",(0,s.jsx)(n.code,{children:"Testnet"}),", so navigate with the arrow keys to ",(0,s.jsx)(n.code,{children:"Testnet"})," and hit enter.\nThe user is then asked to provide which private key to use for the deployment. The deployment basically\nconsists in running a\n",(0,s.jsx)(n.a,{href:"/docs/reference/luxd/p-chain/api#platformcreatesubnet",children:"createSubnet transaction"}),". Therefore the\nkey needs to have funds."]}),"\n",(0,s.jsxs)(n.p,{children:["Also, this tutorial assumes that a node is up running, fully bootstrapped on ",(0,s.jsx)(n.code,{children:"Testnet"}),", and runs\nfrom the ",(0,s.jsx)(n.strong,{children:"same"})," box."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\u2714 Testnet\nDeploying [testsubnet] to Testnet\nUse the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190\n? Which private key should be used to issue the transaction?:\n    test\n  \u25b8 mytestkey\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Subnets are currently permissioned only. Therefore, the process now requires the user to provide\n",(0,s.jsx)(n.em,{children:"which keys can control the Subnet"}),". CLI prompts the user to provide one or more ",(0,s.jsx)(n.strong,{children:"P-Chain addresses"}),".\nOnly the keys corresponding to these addresses are going to be able to add or remove validators.\nMake sure to provide ",(0,s.jsx)(n.strong,{children:"Testnet P-Chain"})," addresses -",(0,s.jsx)(n.code,{children:"P-Testnet...."}),"-."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Configure which addresses may add new validators to the subnet.\nThese addresses are known as your control keys. You are going to also\nset how many control keys are required to add a validator.\nUse the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190\n? Set control keys:\n  \u25b8 Add control key\n    Done\n    Cancel\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Enter at ",(0,s.jsx)(n.code,{children:"Add control key"})," and provide at least one key. You can enter multiple addresses, just use\none here. When finishing, hit ",(0,s.jsx)(n.code,{children:"Done"}),". (The address provided here is\nintentionally invalid. The address has a checksum and the tool is going to make sure it's a valid address)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\u2714 Add control key\nEnter P-Chain address (Ex: `P-...`): P-testnet1vaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaasz\nUse the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190\n? Set control keys:\n    Add control key\n  \u25b8 Done\n    Cancel\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Finally, there is a need to define the threshold of how many keys to require for a change to be valid\n-there is some input validation-. For example, if the is one control key, as preceding, just enter 1.\nThe threshold ",(0,s.jsx)(n.em,{children:"could"})," be arbitrary depending on the needs, for example 2 of 4 addresses,\n1 of 3, 3 of 5, etc., but currently this tool only works if ",(0,s.jsx)(n.em,{children:"the private key used here owns at least\none control key and the threshold is 1"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\u2714 Enter required number of control key signatures to add a validator: 1\n"})}),"\n",(0,s.jsx)(n.p,{children:"Here the wizard completes, and CLI attempts the transaction."}),"\n",(0,s.jsx)(n.p,{children:"If the private key isn't funded or doesn't have enough funds, the error message is going to be:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'Error: insufficient funds: provided UTXOs need 100000000 more units of asset "U8iRqJoiJm8xZHAacmvYyZVwqQx6uDNtQeP3CQ6fcgQk3JqnK"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If the private key has funds, but the ",(0,s.jsx)(n.strong,{children:"control key"})," is incorrect (not controlled by the private\nkey), the CLI is going to create the Subnet, but ",(0,s.jsx)(n.em,{children:"not the blockchain"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Subnet has been created with ID: 2EkPnvnDiLgudnf8NjtxaNcVFtdAAnUPvaoNBrc9WG5tNmmfaK. Now creating blockchain...\nError: insufficient authorization\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Therefore the user needs to provide a control key which he has indeed control of, and then it succeeds.\nThe output (assuming the node is running on ",(0,s.jsx)(n.code,{children:"localhost"})," and the API port set to standard ",(0,s.jsx)(n.code,{children:"9650"}),")\nis going to look something like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'Subnet has been created with ID: 2b175hLJhGdj3CzgXENso9CmwMgejaCQXhMFzBsm8hXbH2MF7H. Now creating blockchain...\nEndpoint for blockchain "2XDnKyAEr1RhhWpTpMXqrjeejN23vETmDykVzkb4PrU1fQjewh" with VM ID "tGBrMADESojmu5Et9CpbGCrmVf9fiAJtZM5ZJ3YVDj5JTu2qw": http://127.0.0.1:9650/ext/bc/2XDnKyAEr1RhhWpTpMXqrjeejN23vETmDykVzkb4PrU1fQjewh/rpc\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Well done. You have just created your own Subnet with your own Subnet-EVM running on ",(0,s.jsx)(n.code,{children:"Testnet"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["To get your new Subnet information, visit the\n",(0,s.jsx)(n.a,{href:"https://subnets-test.lux.network/",children:"Lux Subnet Explorer"}),". The\nsearch best works by blockchain ID, so in this example, enter ",(0,s.jsx)(n.code,{children:"2XDnKyAEr1RhhWpTpMXqrjeejN23vETmDykVzkb4PrU1fQjewh"}),"\ninto the search box and you should see your shiny new blockchain information."]}),"\n",(0,s.jsx)(n.h2,{id:"request-to-join-a-subnet-as-a-validator",children:"Request to Join a Subnet as a Validator"}),"\n",(0,s.jsx)(n.p,{children:"The new Subnet created in the previous steps doesn't have any dedicated validators yet.\nTo request permission to validate a Subnet, the following steps are required:"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["Before a node can be a validator on a Subnet, the node is required to already be a validator on the\nprimary network, which means that your node has ",(0,s.jsx)(n.strong,{children:"fully bootstrapped"}),"."]}),(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"/docs/nodes/validate/add-a-validator#add-a-validator-with-wallet",children:"here"})," on how to\nbecome a validator."]})]}),"\n",(0,s.jsxs)(n.p,{children:["First, request permission to validate by running the ",(0,s.jsx)(n.code,{children:"join"})," command along with the Subnet name:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"lux subnet join testsubnet\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note: Running ",(0,s.jsx)(n.code,{children:"join"})," does not guarantee that your node is a validator of the Subnet! The owner of\nthe Subnet must approve your node to be a validator afterwards by calling ",(0,s.jsx)(n.code,{children:"addValidator"})," as\ndescribed in the next section."]}),"\n",(0,s.jsxs)(n.p,{children:["When you call the ",(0,s.jsx)(n.code,{children:"join"})," command, you are first prompted with the network selection:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Use the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190\n? Choose a network to validate on (this command only supports public networks):\n  \u25b8 Testnet\n    Mainnet\n"})}),"\n",(0,s.jsx)(n.p,{children:'Next, there are two setup choices: Automatic and Manual configurations. As mentioned earlier,\n"Automatic" is going to attempt at editing a config file and setting up your plugin directory, while\n"Manual" is going to just print the required config to the screen. See what "Automatic" does:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\u2714 Automatic\n\u2714 Path to your existing config file (or where it's going to be generated): config.json\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Provide a path to a config file. If executing this command on the box where your\nvalidator is running, then you could point this to the actually used config file, for example\n",(0,s.jsx)(n.code,{children:"/etc/luxd/config.json"})," - just make sure the tool has ",(0,s.jsx)(n.strong,{children:"write"})," access to the file. Or you\ncould just copy the file later. In any case, the tool is going to either try to edit the existing file\nspecified by the given path, or create a new file. Again, set write permissions."]}),"\n",(0,s.jsxs)(n.p,{children:["Next, provide the plugin directory. The beginning of this tutorial contains VMs description\n",(0,s.jsx)(n.a,{href:"#virtual-machine",children:"Virtual Machine"}),". Each VM runs its own plugin, therefore Luxd needs to\nbe able to access the correspondent plugin binary. As this is the ",(0,s.jsx)(n.code,{children:"join"})," command, which doesn't\nknow yet about the plugin, there is a need to provide the directory where the plugin resides. Make\nsure to provide the location for your case:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\u2714 Path to your luxd plugin dir (likely luxd/build/plugins): /home/user/go/src/github.com/luxfi/luxd/build/plugins\n"})}),"\n",(0,s.jsx)(n.p,{children:"The tool doesn't know where exactly it's located so it requires the full path. With the path given,\nit's going to copy the VM binary to the provided location:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"\u2714 Path to your luxd plugin dir (likely luxd/build/plugins): /home/user/go/src/github.com/luxfi/luxd/build/plugins\u2588\nVM binary written to /home/user/go/src/github.com/luxfi/luxd/build/plugins/tGBrMADESojmu5Et9CpbGCrmVf9fiAJtZM5ZJ3YVDj5JTu2qw\nThis is going to edit your existing config file. This edit is nondestructive,\nbut it's always good to have a backup.\nUse the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190\n? Proceed?:\n  \u25b8 Yes\n    No\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Hitting ",(0,s.jsx)(n.code,{children:"Yes"})," is going to attempt at writing the config file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"\u2714 Yes\nThe config file has been edited. To use it, make sure to start the node with the '--config-file' option, e.g.\n\n./build/luxd --config-file config.json\n\n(using your binary location). The node has to be restarted for the changes to take effect.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["It's ",(0,s.jsx)(n.strong,{children:"required to restart the node"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:['If choosing "Manual" instead, the tool is going to just print ',(0,s.jsx)(n.em,{children:"instructions"}),". The user is going to have\nto follow these instructions and apply them to the node. Note that the IDs for the VM and Subnets is\ngoing to be different in your case."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\u2714 Manual\n\nTo setup your node, you must do two things:\n\n1. Add your VM binary to your node's plugin directory\n2. Update your node config to start validating the subnet\n\nTo add the VM to your plugin directory, copy or scp from /tmp/tGBrMADESojmu5Et9CpbGCrmVf9fiAJtZM5ZJ3YVDj5JTu2qw\n\nIf you installed luxd manually, your plugin directory is likely\nluxd/build/plugins.\n\nIf you start your node from the command line WITHOUT a config file (e.g. via command\nline or systemd script), add the following flag to your node's startup command:\n\n--track-subnets=2b175hLJhGdj3CzgXENso9CmwMgejaCQXhMFzBsm8hXbH2MF7H\n(if the node already has a track-subnets config, append the new value by\ncomma-separating it).\n\nFor example:\n./build/luxd --network-id=Testnet --track-subnets=2b175hLJhGdj3CzgXENso9CmwMgejaCQXhMFzBsm8hXbH2MF7H\n\nIf you start the node via a JSON config file, add this to your config file:\ntrack-subnets: 2b175hLJhGdj3CzgXENso9CmwMgejaCQXhMFzBsm8hXbH2MF7H\n\nTIP: Try this command with the --luxd-config flag pointing to your config file,\nthis tool is going to try to update the file automatically (make sure it can write to it).\n\nAfter you update your config, you are going to need to restart your node for the changes to\ntake effect.\n"})}),"\n",(0,s.jsx)(n.h2,{id:"add-a-validator",children:"Add a Validator"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["If the ",(0,s.jsx)(n.code,{children:"join"})," command isn't successfully completed before ",(0,s.jsx)(n.code,{children:"addValidator"})," is completed, the Subnet\ncould experience degraded performance or even halt."]})}),"\n",(0,s.jsxs)(n.p,{children:["Now that the node has joined the Subnet, a Subnet control key holder must call ",(0,s.jsx)(n.code,{children:"addValidator"})," to\ngrant the node permission to be a validator in your Subnet."]}),"\n",(0,s.jsx)(n.p,{children:"To whitelist a node as a recognized validator on the Subnet, run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"lux subnet addValidator testsubnet\n"})}),"\n",(0,s.jsxs)(n.p,{children:["As this operation involves a new\n",(0,s.jsx)(n.a,{href:"/docs/reference/luxd/p-chain/api#platformaddsubnetvalidator",children:"transaction"}),", you will need to specify\nwhich private key to use:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Use the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190\n? Which private key should be used to issue the transaction?:\n    test\n  \u25b8 mytestkey\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Choose ",(0,s.jsx)(n.code,{children:"Testnet"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Use the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190\n? Choose a network to deploy on. This command only supports Testnet currently.:\n  \u25b8 Testnet\n    Mainnet\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now use the ",(0,s.jsx)(n.strong,{children:"NodeID"})," of the new validator defined at the beginning of this tutorial. For best\nresults make sure the validator is running and synced."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"What is the NodeID of the validator you'd like to whitelist?: NodeID-BFa1paAAAAAAAAAAAAAAAAAAAAQGjPhUy\n"})}),"\n",(0,s.jsx)(n.p,{children:"-this ID is intentionally modified-"}),"\n",(0,s.jsxs)(n.p,{children:["The next question requires a bit of thinking. A validator has a weight, which defines how often\nconsensus selects it for decision making. You should think ahead of how many validators you want\ninitially to identify a good value here. The range is 1 to 100, but the minimum for a Subnet without\nany validators yet is 20. The structure is a bit described at\n",(0,s.jsx)(n.a,{href:"/docs/reference/luxd/p-chain/api#platformaddsubnetvalidator",children:"addSubnetValidator"})," under the\n",(0,s.jsx)(n.code,{children:"weight"})," section."]}),"\n",(0,s.jsx)(n.p,{children:"Just select 30 for this one:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Use the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190\n? What stake weight would you like to assign to the validator?:\n    Default (20)\n  \u25b8 Custom\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\u2714 What stake weight would you like to assign to the validator?: 30\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then specify when the validator is going to start validating. The time must be in the future. Custom\noption is going to require to enter a specific date in ",(0,s.jsx)(n.code,{children:"YYYY-MM-DD HH:MM:SS"})," format. Just take the\ndefault this time:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Use the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190\n? Start time:\n  \u25b8 Start in one minute\n    Custom\n"})}),"\n",(0,s.jsx)(n.p,{children:"Finally, specify how long it's going to be validating:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\u2714 Start in one minute\nUse the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190\n? How long should your validator validate for?:\n  \u25b8 Until primary network validator expires\n    Custom\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If choosing ",(0,s.jsx)(n.code,{children:"Custom"})," here, the user must enter a ",(0,s.jsx)(n.strong,{children:"duration"}),", which is a time span expressed in\nhours. For example, could say ",(0,s.jsx)(n.code,{children:"200 days = 24 \\* 200 = 4800 hours"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\u2714 How long should this validator be validating? Enter a duration, e.g. 8760h: 4800h\n"})}),"\n",(0,s.jsx)(n.p,{children:"CLI shows an actual date of when that's now:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"? Your validator is going to finish staking by 2023-02-13 12:26:55:\n  \u25b8 Yes\n    No\n"})}),"\n",(0,s.jsx)(n.p,{children:"Confirm if correct. At this point the prompt series is complete and CLI attempts the transaction:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"NodeID: NodeID-BFa1padLXBj7VHa2JYvYGzcTBPQGjPhUy\nNetwork: Testnet\nStart time: 2022-07-28 12:26:55\nEnd time: 2023-02-13 12:26:55\nWeight: 30\nInputs complete, issuing transaction to add the provided validator information...\n"})}),"\n",(0,s.jsx)(n.p,{children:"This might take a couple of seconds, and if successful, it's going to print:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Transaction successful, transaction ID :EhZh8PvQyqA9xggxn6EsdemXMnWKyy839NzEJ5DHExTBiXbjV\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This means the node is now a validator on the given Subnet on ",(0,s.jsx)(n.code,{children:"Testnet"}),"!"]}),"\n",(0,s.jsx)(n.h2,{id:"subnet-export",children:"Subnet Export"}),"\n",(0,s.jsx)(n.p,{children:"This tool is most useful on the machine where a validator is or is going to be running. In order to\nallow a VM to run on a different machine, you can export the configuration. Just need to provide a path\nto where to export the data:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"lux subnet export testsubnet\n\u2714 Enter file path to write export data to: /tmp/testsubnet-export.dat\n"})}),"\n",(0,s.jsx)(n.p,{children:"The file is in text format and you shouldn't change it. You can then use it to import the\nconfiguration on a different machine."}),"\n",(0,s.jsx)(n.h2,{id:"subnet-import",children:"Subnet Import"}),"\n",(0,s.jsxs)(n.p,{children:["To import a VM specification exported in the previous section, just issue the ",(0,s.jsx)(n.code,{children:"import"})," command with\nthe path to the file after having copied the file over:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"lux subnet import /tmp/testsubnet-export.dat\nSubnet imported successfully\n"})}),"\n",(0,s.jsx)(n.p,{children:"After this the whole Subnet configuration should be available on the target machine:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"lux subnet list\n+---------------+---------------+----------+-----------+----------+\n|    SUBNET     |     CHAIN     | CHAIN ID |   TYPE    | DEPLOYED |\n+---------------+---------------+----------+-----------+----------+\n| testsubnet    | testsubnet    |     3333 | SubnetEVM | No       |\n+---------------+---------------+----------+-----------+----------+\n"})}),"\n",(0,s.jsx)(n.h2,{id:"appendix",children:"Appendix"}),"\n",(0,s.jsx)(n.h3,{id:"connect-with-core",children:"Connect with Core"}),"\n",(0,s.jsx)(n.p,{children:"To connect Core (or MetaMask) with your blockchain on the new\nSubnet running on your local computer,\nyou can add a new network on your Core wallet\nwith the following values:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"- Network Name: testsubnet\n- RPC URL: [http://127.0.0.1:9650/ext/bc/2XDnKyAEr1RhhWpTpMXqrjeejN23vETmDykVzkb4PrU1fQjewh/rpc]\n- Chain ID: 3333\n- Symbol: TST\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["Unless you deploy your Subnet on other nodes, you aren't going to be able to use other nodes,\nincluding the public API server ",(0,s.jsx)(n.code,{children:"https://api.lux-test.network/"}),", to connect to Core."]}),(0,s.jsxs)(n.p,{children:["If you want to open up this node for others to access your Subnet, you should set it up properly\nwith ",(0,s.jsx)(n.code,{children:"https//node-ip-address"})," instead of ",(0,s.jsx)(n.code,{children:"http://127.0.0.1:9650"}),", however, it's out of scope for\nthis tutorial on how to do that."]})]})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},43540:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(48318);const o={},i=s.createContext(o);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);